{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNT1FShbMrwMwp9G6crnn1O",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/huricane85/2024/blob/main/FPL%20Model%202526%20v1.3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b6S0KMo-gSGQ",
        "outputId": "2d5e472e-6b11-44a0-f0df-89b7737e83f0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'UnderstatScraper'...\n",
            "remote: Enumerating objects: 34, done.\u001b[K\n",
            "remote: Counting objects: 100% (34/34), done.\u001b[K\n",
            "remote: Compressing objects: 100% (31/31), done.\u001b[K\n",
            "remote: Total 34 (delta 11), reused 25 (delta 2), pack-reused 0 (from 0)\u001b[K\n",
            "Receiving objects: 100% (34/34), 268.30 KiB | 6.24 MiB/s, done.\n",
            "Resolving deltas: 100% (11/11), done.\n"
          ]
        }
      ],
      "source": [
        "!git clone https://github.com/doughagey/UnderstatScraper"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#!/usr/bin/env python3\n",
        "# -*- coding: utf-8 -*-\n",
        "\"\"\"\n",
        "Created on Mar 1 17:50:36 2020\n",
        "@author: doug hagey\n",
        "\"\"\"\n",
        "\n",
        "import pandas as pd\n",
        "import requests\n",
        "\n",
        "def scrape_understat(payload):\n",
        "    #Build request using url, headers (mimicking what Firefox does normally)\n",
        "    #Works best with verify=True as you won't get the ssl errors. Payload is\n",
        "    #taylored for each request\n",
        "    url = 'https://understat.com/main/getPlayersStats/'\n",
        "    headers = {'content-type':'application/json; charset=utf-8',\n",
        "    'Host': 'understat.com',\n",
        "    'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:73.0) Gecko/20100101 Firefox/73.0',\n",
        "    'Accept': 'application/json, text/javascript, */*; q=0.01',\n",
        "    'Accept-Encoding': 'gzip, deflate, br',\n",
        "    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n",
        "    'X-Requested-With': 'XMLHttpRequest',\n",
        "    'Content-Length': '310',\n",
        "    'Origin': 'https: // understat.com',\n",
        "    'Connection': 'keep - alive',\n",
        "    'Referer': 'https: // understat.com / league / EPL'\n",
        "    }\n",
        "    response = requests.post(url, data=payload, headers = headers, verify=True)\n",
        "    response_json = response.json()\n",
        "    inner_wrapper = response_json['response']\n",
        "    json_player_data = inner_wrapper['players']\n",
        "    return json_player_data\n",
        "\n",
        "def clean_df(player_df, weeks):\n",
        "    # Get rid of the columns that we don't care about\n",
        "    #player_df.drop(['yellow_cards','red_cards', 'xGChain','xGBuildup','games','time'], axis=1, inplace=True)\n",
        "    player_df  = player_df.rename(columns={'goals':'goals_'+weeks,'xG':'xG_'+weeks,'assists':'assists_'+weeks, 'xA':'xA_'+weeks, 'shots':'shots_'+weeks, 'key_passes':\n",
        "        'key_passes_'+weeks,'npg':'npg_'+weeks,'npxG':'npxG_'+weeks})\n",
        "    if weeks != '1wks':\n",
        "        player_df.drop(['position','team_title'], axis=1, inplace=True)\n",
        "    return(player_df)\n",
        "\n",
        "#Creprint('Getting data for last 1 matches')\n",
        "json_player_data = scrape_understat({'league':'EPL', 'season':'2024', 'n_last_matches': '38'})\n",
        "one_game_table = pd.DataFrame(json_player_data)\n",
        "one_game_df = clean_df(one_game_table,'38wks')\n",
        "\n",
        "\n",
        "print('Getting data for the whole season')\n",
        "json_player_data = scrape_understat({'league':'EPL', 'season':'2024'})\n",
        "season_table = pd.DataFrame(json_player_data)\n",
        "season_df = clean_df(season_table, 'season')\n",
        "\n",
        "print('Getting data for last 1 matches')\n",
        "json_player_data = scrape_understat({'league':'EPL', 'season':'2024', 'n_last_matches': '38'})\n",
        "one_game_table = pd.DataFrame(json_player_data)\n",
        "one_game_df = clean_df(one_game_table, '38wks')\n",
        "\n",
        "print('Merging Tables')\n",
        "EPL_player_df = pd.merge(one_game_df, season_df, on=['id','player_name'])\n",
        "EPL_player_df = pd.merge(EPL_player_df, one_game_df, on=['id','player_name'])\n",
        "\n",
        "\n",
        "print('Writing CSV File')\n",
        "EPL_player_df.to_csv('Understat_EPL_Player_Data_Combined 2021.csv', encoding='utf-8', index=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D7aK55NHgZOt",
        "outputId": "f306146b-4a75-4444-daa0-62035ed7f90f"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Getting data for the whole season\n",
            "Getting data for last 1 matches\n",
            "Merging Tables\n",
            "Writing CSV File\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "EPL_player_df = EPL_player_df.round(2)\n",
        "EPL_player_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 600
        },
        "id": "n__CYp9pmkGz",
        "outputId": "e1a26251-443e-4dc0-8f8a-73c4a3549ea1"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        id         player_name games_x time_x goals_38wks_x  \\\n",
              "0     1250       Mohamed Salah      38   3392            29   \n",
              "1     5232      Alexander Isak      34   2822            23   \n",
              "2     8260      Erling Haaland      31   2749            22   \n",
              "3     4456          Chris Wood      36   3024            20   \n",
              "4     6552        Bryan Mbeumo      38   3419            20   \n",
              "..     ...                 ...     ...    ...           ...   \n",
              "557  13586       Olabade Aluko       1      1             0   \n",
              "558  13588       Gustavo Nunes       3      8             0   \n",
              "559  13606     Michael Golding       1      1             0   \n",
              "560  13636  Joachim Kayi-Sanda       2      9             0   \n",
              "561  13649   Claudio Echeverri       1      4             0   \n",
              "\n",
              "             xG_38wks_x assists_38wks_x          xA_38wks_x shots_38wks_x  \\\n",
              "0     27.70626749098301              18  15.858334187418222           130   \n",
              "1    22.356988068670034               6    5.44870379474014            99   \n",
              "2     23.95459282770753               3  3.5812273556366563           109   \n",
              "3    15.638655036687851               3   3.044111367315054            68   \n",
              "4     13.63216146454215               7  10.376488702371716            86   \n",
              "..                  ...             ...                 ...           ...   \n",
              "557                   0               0                   0             0   \n",
              "558                   0               0                   0             0   \n",
              "559                   0               0                   0             0   \n",
              "560                   0               0                   0             0   \n",
              "561                   0               0                   0             0   \n",
              "\n",
              "    key_passes_38wks_x  ... assists_38wks_y          xA_38wks_y shots_38wks_y  \\\n",
              "0                   89  ...              18  15.858334187418222           130   \n",
              "1                   42  ...               6    5.44870379474014            99   \n",
              "2                   29  ...               3  3.5812273556366563           109   \n",
              "3                   22  ...               3   3.044111367315054            68   \n",
              "4                   70  ...               7  10.376488702371716            86   \n",
              "..                 ...  ...             ...                 ...           ...   \n",
              "557                  0  ...               0                   0             0   \n",
              "558                  0  ...               0                   0             0   \n",
              "559                  0  ...               0                   0             0   \n",
              "560                  0  ...               0                   0             0   \n",
              "561                  0  ...               0                   0             0   \n",
              "\n",
              "    key_passes_38wks_y yellow_cards red_cards npg_38wks_y        npxG_38wks_y  \\\n",
              "0                   89            1         0          20  20.855747912079096   \n",
              "1                   42            1         0          19  19.312312599271536   \n",
              "2                   29            2         0          19  20.909917432814837   \n",
              "3                   22            1         0          17  13.355148404836655   \n",
              "4                   70            3         0          15    9.06514835730195   \n",
              "..                 ...          ...       ...         ...                 ...   \n",
              "557                  0            0         0           0                   0   \n",
              "558                  0            0         0           0                   0   \n",
              "559                  0            0         0           0                   0   \n",
              "560                  0            0         0           0                   0   \n",
              "561                  0            0         0           0                   0   \n",
              "\n",
              "                 xGChain            xGBuildup  \n",
              "0      48.53588879853487    16.20675839856267  \n",
              "1     26.209551103413105    3.579237926751375  \n",
              "2     22.845245644450188   3.5353690683841705  \n",
              "3      14.72016467526555   1.6692094188183546  \n",
              "4     24.377113293856382    9.351834732107818  \n",
              "..                   ...                  ...  \n",
              "557                    0                    0  \n",
              "558                    0                    0  \n",
              "559                    0                    0  \n",
              "560  0.13608679175376892  0.13608679175376892  \n",
              "561                    0                    0  \n",
              "\n",
              "[562 rows x 44 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-91bfaa75-10a9-49d6-b47a-f76a2d8cbf70\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>player_name</th>\n",
              "      <th>games_x</th>\n",
              "      <th>time_x</th>\n",
              "      <th>goals_38wks_x</th>\n",
              "      <th>xG_38wks_x</th>\n",
              "      <th>assists_38wks_x</th>\n",
              "      <th>xA_38wks_x</th>\n",
              "      <th>shots_38wks_x</th>\n",
              "      <th>key_passes_38wks_x</th>\n",
              "      <th>...</th>\n",
              "      <th>assists_38wks_y</th>\n",
              "      <th>xA_38wks_y</th>\n",
              "      <th>shots_38wks_y</th>\n",
              "      <th>key_passes_38wks_y</th>\n",
              "      <th>yellow_cards</th>\n",
              "      <th>red_cards</th>\n",
              "      <th>npg_38wks_y</th>\n",
              "      <th>npxG_38wks_y</th>\n",
              "      <th>xGChain</th>\n",
              "      <th>xGBuildup</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1250</td>\n",
              "      <td>Mohamed Salah</td>\n",
              "      <td>38</td>\n",
              "      <td>3392</td>\n",
              "      <td>29</td>\n",
              "      <td>27.70626749098301</td>\n",
              "      <td>18</td>\n",
              "      <td>15.858334187418222</td>\n",
              "      <td>130</td>\n",
              "      <td>89</td>\n",
              "      <td>...</td>\n",
              "      <td>18</td>\n",
              "      <td>15.858334187418222</td>\n",
              "      <td>130</td>\n",
              "      <td>89</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>20.855747912079096</td>\n",
              "      <td>48.53588879853487</td>\n",
              "      <td>16.20675839856267</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5232</td>\n",
              "      <td>Alexander Isak</td>\n",
              "      <td>34</td>\n",
              "      <td>2822</td>\n",
              "      <td>23</td>\n",
              "      <td>22.356988068670034</td>\n",
              "      <td>6</td>\n",
              "      <td>5.44870379474014</td>\n",
              "      <td>99</td>\n",
              "      <td>42</td>\n",
              "      <td>...</td>\n",
              "      <td>6</td>\n",
              "      <td>5.44870379474014</td>\n",
              "      <td>99</td>\n",
              "      <td>42</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>19</td>\n",
              "      <td>19.312312599271536</td>\n",
              "      <td>26.209551103413105</td>\n",
              "      <td>3.579237926751375</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8260</td>\n",
              "      <td>Erling Haaland</td>\n",
              "      <td>31</td>\n",
              "      <td>2749</td>\n",
              "      <td>22</td>\n",
              "      <td>23.95459282770753</td>\n",
              "      <td>3</td>\n",
              "      <td>3.5812273556366563</td>\n",
              "      <td>109</td>\n",
              "      <td>29</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>3.5812273556366563</td>\n",
              "      <td>109</td>\n",
              "      <td>29</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>19</td>\n",
              "      <td>20.909917432814837</td>\n",
              "      <td>22.845245644450188</td>\n",
              "      <td>3.5353690683841705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4456</td>\n",
              "      <td>Chris Wood</td>\n",
              "      <td>36</td>\n",
              "      <td>3024</td>\n",
              "      <td>20</td>\n",
              "      <td>15.638655036687851</td>\n",
              "      <td>3</td>\n",
              "      <td>3.044111367315054</td>\n",
              "      <td>68</td>\n",
              "      <td>22</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>3.044111367315054</td>\n",
              "      <td>68</td>\n",
              "      <td>22</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>17</td>\n",
              "      <td>13.355148404836655</td>\n",
              "      <td>14.72016467526555</td>\n",
              "      <td>1.6692094188183546</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6552</td>\n",
              "      <td>Bryan Mbeumo</td>\n",
              "      <td>38</td>\n",
              "      <td>3419</td>\n",
              "      <td>20</td>\n",
              "      <td>13.63216146454215</td>\n",
              "      <td>7</td>\n",
              "      <td>10.376488702371716</td>\n",
              "      <td>86</td>\n",
              "      <td>70</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>10.376488702371716</td>\n",
              "      <td>86</td>\n",
              "      <td>70</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>15</td>\n",
              "      <td>9.06514835730195</td>\n",
              "      <td>24.377113293856382</td>\n",
              "      <td>9.351834732107818</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>557</th>\n",
              "      <td>13586</td>\n",
              "      <td>Olabade Aluko</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>558</th>\n",
              "      <td>13588</td>\n",
              "      <td>Gustavo Nunes</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>559</th>\n",
              "      <td>13606</td>\n",
              "      <td>Michael Golding</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>560</th>\n",
              "      <td>13636</td>\n",
              "      <td>Joachim Kayi-Sanda</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.13608679175376892</td>\n",
              "      <td>0.13608679175376892</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>561</th>\n",
              "      <td>13649</td>\n",
              "      <td>Claudio Echeverri</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>562 rows × 44 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-91bfaa75-10a9-49d6-b47a-f76a2d8cbf70')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-91bfaa75-10a9-49d6-b47a-f76a2d8cbf70 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-91bfaa75-10a9-49d6-b47a-f76a2d8cbf70');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8df9a88f-0aab-4f2a-9328-17d186a31eb9\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8df9a88f-0aab-4f2a-9328-17d186a31eb9')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8df9a88f-0aab-4f2a-9328-17d186a31eb9 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_da606478-236c-49e2-a90f-eef7fe27c3b8\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('EPL_player_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_da606478-236c-49e2-a90f-eef7fe27c3b8 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('EPL_player_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "EPL_player_df"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "one_game_df.to_csv('one_game_df.csv', encoding='utf-8', index=False)\n",
        "one_game_df['time'] = one_game_df['time'].astype(int)\n",
        "one_game_df = one_game_df[one_game_df['time'] > 40]\n",
        "one_game_df['goals_38wks'] = one_game_df['goals_38wks'].astype(int)\n",
        "one_game_df['xG_38wks'] = one_game_df['xG_38wks'].astype(float)\n",
        "one_game_df['xgdifference'] = one_game_df.goals_38wks - one_game_df.xG_38wks\n",
        "one_game_df['assists_38wks'] = one_game_df['assists_38wks'].astype(int)\n",
        "one_game_df['xA_38wks'] = one_game_df['xA_38wks'].astype(float)\n",
        "one_game_df['xAdifference'] = one_game_df.assists_38wks - one_game_df.xA_38wks\n",
        "seasonedit = one_game_df.drop(columns=[ 'yellow_cards','red_cards','time'])\n",
        "sortXgDifference = seasonedit.sort_values('xgdifference')\n",
        "sortXgDifference.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 988
        },
        "id": "IrXPzyJNg3ui",
        "outputId": "36745fa1-1237-4fe6-b6d6-823e32f1c0e9"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-4-771438681.py:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  one_game_df['goals_38wks'] = one_game_df['goals_38wks'].astype(int)\n",
            "/tmp/ipython-input-4-771438681.py:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  one_game_df['xG_38wks'] = one_game_df['xG_38wks'].astype(float)\n",
            "/tmp/ipython-input-4-771438681.py:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  one_game_df['xgdifference'] = one_game_df.goals_38wks - one_game_df.xG_38wks\n",
            "/tmp/ipython-input-4-771438681.py:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  one_game_df['assists_38wks'] = one_game_df['assists_38wks'].astype(int)\n",
            "/tmp/ipython-input-4-771438681.py:8: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  one_game_df['xA_38wks'] = one_game_df['xA_38wks'].astype(float)\n",
            "/tmp/ipython-input-4-771438681.py:9: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  one_game_df['xAdifference'] = one_game_df.assists_38wks - one_game_df.xA_38wks\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        id            player_name games  goals_38wks   xG_38wks  \\\n",
              "106   5555  Dominic Calvert-Lewin    26            3   8.584494   \n",
              "162   9912         Cameron Archer    35            2   6.927640   \n",
              "50   11357           Noni Madueke    32            7  11.862219   \n",
              "34    5675           Ismaila Sarr    38            8  12.308559   \n",
              "253  11735                  Sávio    29            1   5.246914   \n",
              "55    6854             Diogo Jota    26            6  10.206197   \n",
              "111   6482          Eddie Nketiah    29            3   7.153361   \n",
              "49    9662         Dango Ouattara    32            7  10.933680   \n",
              "21   10048        Nicolas Jackson    30           10  13.834071   \n",
              "24   12963              Evanilson    31           10  13.714270   \n",
              "\n",
              "     assists_38wks   xA_38wks shots_38wks key_passes_38wks npg_38wks  \\\n",
              "106              1   0.740650          50                7         3   \n",
              "162              0   0.473485          29                6         2   \n",
              "50               3   3.121702          80               33         7   \n",
              "34               6  10.056549          59               44         8   \n",
              "253              8   6.944661          55               45         1   \n",
              "55               3   1.852303          51               11         6   \n",
              "111              1   1.385831          43               13         3   \n",
              "49               4   5.989505          62               35         7   \n",
              "21               5   3.472397          76               28        10   \n",
              "24               1   1.915185          73               25        10   \n",
              "\n",
              "             npxG_38wks             xGChain           xGBuildup  xgdifference  \\\n",
              "106   8.584493719041348   7.679076200351119   1.292787717655301     -5.584494   \n",
              "162   6.166471207514405  7.4672291576862335  1.9211225835606456     -4.927640   \n",
              "50   11.862219285219908   18.66834883764386   6.725336389616132     -4.862219   \n",
              "34   12.308559328317642  24.235270714387298  7.3139182310551405     -4.308559   \n",
              "253   5.246914088726044   16.14704818278551   5.930092327296734     -4.246914   \n",
              "55    10.20619698613882  13.053022043779492   3.036761373281479     -4.206197   \n",
              "111    7.15336112678051   9.502782799303532  2.1897604260593653     -4.153361   \n",
              "49   10.933680262416601  18.476627525873482  4.4393982803449035     -3.933680   \n",
              "21   13.834070887416601  16.895098600536585  3.0802767761051655     -3.834071   \n",
              "24   12.953101200982928  15.386878173798323   2.785225234925747     -3.714270   \n",
              "\n",
              "     xAdifference  \n",
              "106      0.259350  \n",
              "162     -0.473485  \n",
              "50      -0.121702  \n",
              "34      -4.056549  \n",
              "253      1.055339  \n",
              "55       1.147697  \n",
              "111     -0.385831  \n",
              "49      -1.989505  \n",
              "21       1.527603  \n",
              "24      -0.915185  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b06642c6-f2ff-450c-b223-8992672143ed\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>player_name</th>\n",
              "      <th>games</th>\n",
              "      <th>goals_38wks</th>\n",
              "      <th>xG_38wks</th>\n",
              "      <th>assists_38wks</th>\n",
              "      <th>xA_38wks</th>\n",
              "      <th>shots_38wks</th>\n",
              "      <th>key_passes_38wks</th>\n",
              "      <th>npg_38wks</th>\n",
              "      <th>npxG_38wks</th>\n",
              "      <th>xGChain</th>\n",
              "      <th>xGBuildup</th>\n",
              "      <th>xgdifference</th>\n",
              "      <th>xAdifference</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>5555</td>\n",
              "      <td>Dominic Calvert-Lewin</td>\n",
              "      <td>26</td>\n",
              "      <td>3</td>\n",
              "      <td>8.584494</td>\n",
              "      <td>1</td>\n",
              "      <td>0.740650</td>\n",
              "      <td>50</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>8.584493719041348</td>\n",
              "      <td>7.679076200351119</td>\n",
              "      <td>1.292787717655301</td>\n",
              "      <td>-5.584494</td>\n",
              "      <td>0.259350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>162</th>\n",
              "      <td>9912</td>\n",
              "      <td>Cameron Archer</td>\n",
              "      <td>35</td>\n",
              "      <td>2</td>\n",
              "      <td>6.927640</td>\n",
              "      <td>0</td>\n",
              "      <td>0.473485</td>\n",
              "      <td>29</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "      <td>6.166471207514405</td>\n",
              "      <td>7.4672291576862335</td>\n",
              "      <td>1.9211225835606456</td>\n",
              "      <td>-4.927640</td>\n",
              "      <td>-0.473485</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>11357</td>\n",
              "      <td>Noni Madueke</td>\n",
              "      <td>32</td>\n",
              "      <td>7</td>\n",
              "      <td>11.862219</td>\n",
              "      <td>3</td>\n",
              "      <td>3.121702</td>\n",
              "      <td>80</td>\n",
              "      <td>33</td>\n",
              "      <td>7</td>\n",
              "      <td>11.862219285219908</td>\n",
              "      <td>18.66834883764386</td>\n",
              "      <td>6.725336389616132</td>\n",
              "      <td>-4.862219</td>\n",
              "      <td>-0.121702</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>5675</td>\n",
              "      <td>Ismaila Sarr</td>\n",
              "      <td>38</td>\n",
              "      <td>8</td>\n",
              "      <td>12.308559</td>\n",
              "      <td>6</td>\n",
              "      <td>10.056549</td>\n",
              "      <td>59</td>\n",
              "      <td>44</td>\n",
              "      <td>8</td>\n",
              "      <td>12.308559328317642</td>\n",
              "      <td>24.235270714387298</td>\n",
              "      <td>7.3139182310551405</td>\n",
              "      <td>-4.308559</td>\n",
              "      <td>-4.056549</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>253</th>\n",
              "      <td>11735</td>\n",
              "      <td>Sávio</td>\n",
              "      <td>29</td>\n",
              "      <td>1</td>\n",
              "      <td>5.246914</td>\n",
              "      <td>8</td>\n",
              "      <td>6.944661</td>\n",
              "      <td>55</td>\n",
              "      <td>45</td>\n",
              "      <td>1</td>\n",
              "      <td>5.246914088726044</td>\n",
              "      <td>16.14704818278551</td>\n",
              "      <td>5.930092327296734</td>\n",
              "      <td>-4.246914</td>\n",
              "      <td>1.055339</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>6854</td>\n",
              "      <td>Diogo Jota</td>\n",
              "      <td>26</td>\n",
              "      <td>6</td>\n",
              "      <td>10.206197</td>\n",
              "      <td>3</td>\n",
              "      <td>1.852303</td>\n",
              "      <td>51</td>\n",
              "      <td>11</td>\n",
              "      <td>6</td>\n",
              "      <td>10.20619698613882</td>\n",
              "      <td>13.053022043779492</td>\n",
              "      <td>3.036761373281479</td>\n",
              "      <td>-4.206197</td>\n",
              "      <td>1.147697</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>111</th>\n",
              "      <td>6482</td>\n",
              "      <td>Eddie Nketiah</td>\n",
              "      <td>29</td>\n",
              "      <td>3</td>\n",
              "      <td>7.153361</td>\n",
              "      <td>1</td>\n",
              "      <td>1.385831</td>\n",
              "      <td>43</td>\n",
              "      <td>13</td>\n",
              "      <td>3</td>\n",
              "      <td>7.15336112678051</td>\n",
              "      <td>9.502782799303532</td>\n",
              "      <td>2.1897604260593653</td>\n",
              "      <td>-4.153361</td>\n",
              "      <td>-0.385831</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>9662</td>\n",
              "      <td>Dango Ouattara</td>\n",
              "      <td>32</td>\n",
              "      <td>7</td>\n",
              "      <td>10.933680</td>\n",
              "      <td>4</td>\n",
              "      <td>5.989505</td>\n",
              "      <td>62</td>\n",
              "      <td>35</td>\n",
              "      <td>7</td>\n",
              "      <td>10.933680262416601</td>\n",
              "      <td>18.476627525873482</td>\n",
              "      <td>4.4393982803449035</td>\n",
              "      <td>-3.933680</td>\n",
              "      <td>-1.989505</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>10048</td>\n",
              "      <td>Nicolas Jackson</td>\n",
              "      <td>30</td>\n",
              "      <td>10</td>\n",
              "      <td>13.834071</td>\n",
              "      <td>5</td>\n",
              "      <td>3.472397</td>\n",
              "      <td>76</td>\n",
              "      <td>28</td>\n",
              "      <td>10</td>\n",
              "      <td>13.834070887416601</td>\n",
              "      <td>16.895098600536585</td>\n",
              "      <td>3.0802767761051655</td>\n",
              "      <td>-3.834071</td>\n",
              "      <td>1.527603</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>12963</td>\n",
              "      <td>Evanilson</td>\n",
              "      <td>31</td>\n",
              "      <td>10</td>\n",
              "      <td>13.714270</td>\n",
              "      <td>1</td>\n",
              "      <td>1.915185</td>\n",
              "      <td>73</td>\n",
              "      <td>25</td>\n",
              "      <td>10</td>\n",
              "      <td>12.953101200982928</td>\n",
              "      <td>15.386878173798323</td>\n",
              "      <td>2.785225234925747</td>\n",
              "      <td>-3.714270</td>\n",
              "      <td>-0.915185</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b06642c6-f2ff-450c-b223-8992672143ed')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b06642c6-f2ff-450c-b223-8992672143ed button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b06642c6-f2ff-450c-b223-8992672143ed');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-65764b86-50a0-460d-80c8-a7b7f3eabeb0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-65764b86-50a0-460d-80c8-a7b7f3eabeb0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-65764b86-50a0-460d-80c8-a7b7f3eabeb0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "sortXgDifference",
              "summary": "{\n  \"name\": \"sortXgDifference\",\n  \"rows\": 509,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 509,\n        \"samples\": [\n          \"6888\",\n          \"13185\",\n          \"725\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 509,\n        \"samples\": [\n          \"William Saliba\",\n          \"Jahmai Simpson-Pusey\",\n          \"Ola Aina\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"games\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 38,\n        \"samples\": [\n          \"5\",\n          \"2\",\n          \"29\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"goals_38wks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 29,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          3,\n          0,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xG_38wks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.7201301446324946,\n        \"min\": 0.0,\n        \"max\": 27.70626749098301,\n        \"num_unique_values\": 446,\n        \"samples\": [\n          0.06839418411254883,\n          4.607429768890142,\n          0.814534755423665\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"assists_38wks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 18,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          11,\n          10,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xA_38wks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.3073531028848238,\n        \"min\": 0.0,\n        \"max\": 15.858334187418222,\n        \"num_unique_values\": 454,\n        \"samples\": [\n          0.021070318296551704,\n          0.33556320145726204,\n          1.5821922849863768\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"shots_38wks\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 83,\n        \"samples\": [\n          \"19\",\n          \"50\",\n          \"27\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"key_passes_38wks\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 66,\n        \"samples\": [\n          \"15\",\n          \"89\",\n          \"7\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"npg_38wks\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"3\",\n          \"20\",\n          \"12\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"npxG_38wks\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 446,\n        \"samples\": [\n          \"0.06839418411254883\",\n          \"4.607429768890142\",\n          \"0.814534755423665\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xGChain\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 509,\n        \"samples\": [\n          \"14.345305103808641\",\n          \"1.0117364432662725\",\n          \"10.087742604315281\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xGBuildup\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 506,\n        \"samples\": [\n          \"1.4127340912818909\",\n          \"1.2308019548654556\",\n          \"1.4234060682356358\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xgdifference\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.261279649625292,\n        \"min\": -5.5844937190413475,\n        \"max\": 6.553701013326645,\n        \"num_unique_values\": 446,\n        \"samples\": [\n          -0.06839418411254883,\n          0.39257023110985756,\n          -0.814534755423665\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xAdifference\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0593210897845975,\n        \"min\": -4.954366408288479,\n        \"max\": 5.59554797783494,\n        \"num_unique_values\": 454,\n        \"samples\": [\n          -0.021070318296551704,\n          -0.33556320145726204,\n          -1.5821922849863768\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sortXgDifference.tail(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 533
        },
        "id": "UxuLfRINhwx7",
        "outputId": "f67c70ab-4132-4eea-d0c2-1d3c1ef8a7ca"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id         player_name games  goals_38wks   xG_38wks  assists_38wks  \\\n",
              "86  6756       Dwight McNeil    21            4   1.512262              6   \n",
              "66  6456  Callum Hudson-Odoi    31            5   2.511491              2   \n",
              "30  6818      James Maddison    31            9   5.893605              7   \n",
              "11  1776        Jarrod Bowen    34           13   9.816104              8   \n",
              "38  8127  Amad Diallo Traore    26            8   4.745838              6   \n",
              "25   500          Alex Iwobi    38            9   5.021548              6   \n",
              "53  2254       Mateo Kovacic    31            6   1.806073              2   \n",
              "3   4456          Chris Wood    36           20  15.638655              3   \n",
              "4   6552        Bryan Mbeumo    38           20  13.632161              7   \n",
              "7   7080       Matheus Cunha    33           15   8.446299              6   \n",
              "\n",
              "     xA_38wks shots_38wks key_passes_38wks npg_38wks          npxG_38wks  \\\n",
              "86   6.039636          24               37         4  1.5122616775333881   \n",
              "66   2.946556          37               44         5  2.5114910937845707   \n",
              "30   6.016693          39               42         9  5.8936047330498695   \n",
              "11   7.633319          87               50        12   9.054935092106462   \n",
              "38   4.755917          47               49         8    4.74583822209388   \n",
              "25   8.458939          68               58         9   5.021547559648752   \n",
              "53   3.685477          45               33         6  1.8060728069394827   \n",
              "3    3.044111          68               22        17  13.355148404836655   \n",
              "4   10.376489          86               70        15    9.06514835730195   \n",
              "7    7.411126         110               56        15   8.446298986673355   \n",
              "\n",
              "               xGChain           xGBuildup  xgdifference  xAdifference  \n",
              "86    8.58305960521102  3.5590311624109745      2.487738     -0.039636  \n",
              "66  11.848760638386011   8.000117145478725      2.488509     -0.946556  \n",
              "30  15.656851299107075   7.841132877394557      3.106395      0.983307  \n",
              "11   15.45670910179615  3.2645750464871526      3.183896      0.366681  \n",
              "38  12.264865227043629   5.410414909943938      3.254162      1.244083  \n",
              "25   21.47882725391537   10.64560728892684      3.978452     -2.458939  \n",
              "53   16.83304774388671  13.353065870702267      4.193927     -1.685477  \n",
              "3    14.72016467526555  1.6692094188183546      4.361345     -0.044111  \n",
              "4   24.377113293856382   9.351834732107818      6.367839     -3.376489  \n",
              "7   18.023087229579687   7.101435688324273      6.553701     -1.411126  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9b323503-249c-40e2-af9c-cc91dd0c8d66\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>player_name</th>\n",
              "      <th>games</th>\n",
              "      <th>goals_38wks</th>\n",
              "      <th>xG_38wks</th>\n",
              "      <th>assists_38wks</th>\n",
              "      <th>xA_38wks</th>\n",
              "      <th>shots_38wks</th>\n",
              "      <th>key_passes_38wks</th>\n",
              "      <th>npg_38wks</th>\n",
              "      <th>npxG_38wks</th>\n",
              "      <th>xGChain</th>\n",
              "      <th>xGBuildup</th>\n",
              "      <th>xgdifference</th>\n",
              "      <th>xAdifference</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>86</th>\n",
              "      <td>6756</td>\n",
              "      <td>Dwight McNeil</td>\n",
              "      <td>21</td>\n",
              "      <td>4</td>\n",
              "      <td>1.512262</td>\n",
              "      <td>6</td>\n",
              "      <td>6.039636</td>\n",
              "      <td>24</td>\n",
              "      <td>37</td>\n",
              "      <td>4</td>\n",
              "      <td>1.5122616775333881</td>\n",
              "      <td>8.58305960521102</td>\n",
              "      <td>3.5590311624109745</td>\n",
              "      <td>2.487738</td>\n",
              "      <td>-0.039636</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>6456</td>\n",
              "      <td>Callum Hudson-Odoi</td>\n",
              "      <td>31</td>\n",
              "      <td>5</td>\n",
              "      <td>2.511491</td>\n",
              "      <td>2</td>\n",
              "      <td>2.946556</td>\n",
              "      <td>37</td>\n",
              "      <td>44</td>\n",
              "      <td>5</td>\n",
              "      <td>2.5114910937845707</td>\n",
              "      <td>11.848760638386011</td>\n",
              "      <td>8.000117145478725</td>\n",
              "      <td>2.488509</td>\n",
              "      <td>-0.946556</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>6818</td>\n",
              "      <td>James Maddison</td>\n",
              "      <td>31</td>\n",
              "      <td>9</td>\n",
              "      <td>5.893605</td>\n",
              "      <td>7</td>\n",
              "      <td>6.016693</td>\n",
              "      <td>39</td>\n",
              "      <td>42</td>\n",
              "      <td>9</td>\n",
              "      <td>5.8936047330498695</td>\n",
              "      <td>15.656851299107075</td>\n",
              "      <td>7.841132877394557</td>\n",
              "      <td>3.106395</td>\n",
              "      <td>0.983307</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>1776</td>\n",
              "      <td>Jarrod Bowen</td>\n",
              "      <td>34</td>\n",
              "      <td>13</td>\n",
              "      <td>9.816104</td>\n",
              "      <td>8</td>\n",
              "      <td>7.633319</td>\n",
              "      <td>87</td>\n",
              "      <td>50</td>\n",
              "      <td>12</td>\n",
              "      <td>9.054935092106462</td>\n",
              "      <td>15.45670910179615</td>\n",
              "      <td>3.2645750464871526</td>\n",
              "      <td>3.183896</td>\n",
              "      <td>0.366681</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>8127</td>\n",
              "      <td>Amad Diallo Traore</td>\n",
              "      <td>26</td>\n",
              "      <td>8</td>\n",
              "      <td>4.745838</td>\n",
              "      <td>6</td>\n",
              "      <td>4.755917</td>\n",
              "      <td>47</td>\n",
              "      <td>49</td>\n",
              "      <td>8</td>\n",
              "      <td>4.74583822209388</td>\n",
              "      <td>12.264865227043629</td>\n",
              "      <td>5.410414909943938</td>\n",
              "      <td>3.254162</td>\n",
              "      <td>1.244083</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>500</td>\n",
              "      <td>Alex Iwobi</td>\n",
              "      <td>38</td>\n",
              "      <td>9</td>\n",
              "      <td>5.021548</td>\n",
              "      <td>6</td>\n",
              "      <td>8.458939</td>\n",
              "      <td>68</td>\n",
              "      <td>58</td>\n",
              "      <td>9</td>\n",
              "      <td>5.021547559648752</td>\n",
              "      <td>21.47882725391537</td>\n",
              "      <td>10.64560728892684</td>\n",
              "      <td>3.978452</td>\n",
              "      <td>-2.458939</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>2254</td>\n",
              "      <td>Mateo Kovacic</td>\n",
              "      <td>31</td>\n",
              "      <td>6</td>\n",
              "      <td>1.806073</td>\n",
              "      <td>2</td>\n",
              "      <td>3.685477</td>\n",
              "      <td>45</td>\n",
              "      <td>33</td>\n",
              "      <td>6</td>\n",
              "      <td>1.8060728069394827</td>\n",
              "      <td>16.83304774388671</td>\n",
              "      <td>13.353065870702267</td>\n",
              "      <td>4.193927</td>\n",
              "      <td>-1.685477</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4456</td>\n",
              "      <td>Chris Wood</td>\n",
              "      <td>36</td>\n",
              "      <td>20</td>\n",
              "      <td>15.638655</td>\n",
              "      <td>3</td>\n",
              "      <td>3.044111</td>\n",
              "      <td>68</td>\n",
              "      <td>22</td>\n",
              "      <td>17</td>\n",
              "      <td>13.355148404836655</td>\n",
              "      <td>14.72016467526555</td>\n",
              "      <td>1.6692094188183546</td>\n",
              "      <td>4.361345</td>\n",
              "      <td>-0.044111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6552</td>\n",
              "      <td>Bryan Mbeumo</td>\n",
              "      <td>38</td>\n",
              "      <td>20</td>\n",
              "      <td>13.632161</td>\n",
              "      <td>7</td>\n",
              "      <td>10.376489</td>\n",
              "      <td>86</td>\n",
              "      <td>70</td>\n",
              "      <td>15</td>\n",
              "      <td>9.06514835730195</td>\n",
              "      <td>24.377113293856382</td>\n",
              "      <td>9.351834732107818</td>\n",
              "      <td>6.367839</td>\n",
              "      <td>-3.376489</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>7080</td>\n",
              "      <td>Matheus Cunha</td>\n",
              "      <td>33</td>\n",
              "      <td>15</td>\n",
              "      <td>8.446299</td>\n",
              "      <td>6</td>\n",
              "      <td>7.411126</td>\n",
              "      <td>110</td>\n",
              "      <td>56</td>\n",
              "      <td>15</td>\n",
              "      <td>8.446298986673355</td>\n",
              "      <td>18.023087229579687</td>\n",
              "      <td>7.101435688324273</td>\n",
              "      <td>6.553701</td>\n",
              "      <td>-1.411126</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9b323503-249c-40e2-af9c-cc91dd0c8d66')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9b323503-249c-40e2-af9c-cc91dd0c8d66 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9b323503-249c-40e2-af9c-cc91dd0c8d66');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9bc588e6-202b-4093-9112-90816ef1e32a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9bc588e6-202b-4093-9112-90816ef1e32a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9bc588e6-202b-4093-9112-90816ef1e32a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"sortXgDifference\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"6552\",\n          \"6456\",\n          \"500\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Bryan Mbeumo\",\n          \"Callum Hudson-Odoi\",\n          \"Alex Iwobi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"games\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"21\",\n          \"31\",\n          \"36\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"goals_38wks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 4,\n        \"max\": 20,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5,\n          6,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xG_38wks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.898949905823924,\n        \"min\": 1.5122616775333881,\n        \"max\": 15.638655036687851,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          13.63216146454215,\n          2.5114910937845707,\n          5.021547559648752\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"assists_38wks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2,\n        \"max\": 8,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          3,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xA_38wks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.4678575281200343,\n        \"min\": 2.9465562608093023,\n        \"max\": 10.376488702371716,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          10.376488702371716,\n          2.9465562608093023,\n          8.458939167670906\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"shots_38wks\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"86\",\n          \"37\",\n          \"68\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"key_passes_38wks\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"70\",\n          \"44\",\n          \"58\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"npg_38wks\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"5\",\n          \"6\",\n          \"4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"npxG_38wks\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"9.06514835730195\",\n          \"2.5114910937845707\",\n          \"5.021547559648752\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xGChain\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"24.377113293856382\",\n          \"11.848760638386011\",\n          \"21.47882725391537\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xGBuildup\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"9.351834732107818\",\n          \"8.000117145478725\",\n          \"10.64560728892684\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xgdifference\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.448716024060297,\n        \"min\": 2.487738322466612,\n        \"max\": 6.553701013326645,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          6.3678385354578495,\n          2.4885089062154293,\n          3.978452440351248\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xAdifference\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5054940582291398,\n        \"min\": -3.3764887023717165,\n        \"max\": 1.2440826203674078,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          -3.3764887023717165,\n          -0.9465562608093023,\n          -2.4589391676709056\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "one_game_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 583
        },
        "id": "NDPdgpJUVBBZ",
        "outputId": "21923615-4023-4475-a433-b589fc636e71"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        id       player_name games  time  goals_38wks   xG_38wks  \\\n",
              "0     1250     Mohamed Salah    38  3392           29  27.706267   \n",
              "1     5232    Alexander Isak    34  2822           23  22.356988   \n",
              "2     8260    Erling Haaland    31  2749           22  23.954593   \n",
              "3     4456        Chris Wood    36  3024           20  15.638655   \n",
              "4     6552      Bryan Mbeumo    38  3419           20  13.632161   \n",
              "..     ...               ...   ...   ...          ...        ...   \n",
              "547  13463      Nasser Djiga     5    65            0   0.000000   \n",
              "548  13466  Chido Obi-Martin     7   145            0   0.557594   \n",
              "549  13467  Tyler Fredricson     2   170            0   0.000000   \n",
              "553  13579      Jeremy Monga     7    77            0   0.207149   \n",
              "554  13582      Jay Robinson     4   122            0   0.055534   \n",
              "\n",
              "     assists_38wks   xA_38wks shots_38wks key_passes_38wks yellow_cards  \\\n",
              "0               18  15.858334         130               89            1   \n",
              "1                6   5.448704          99               42            1   \n",
              "2                3   3.581227         109               29            2   \n",
              "3                3   3.044111          68               22            1   \n",
              "4                7  10.376489          86               70            3   \n",
              "..             ...        ...         ...              ...          ...   \n",
              "547              0   0.000000           0                0            0   \n",
              "548              0   0.000000           5                0            1   \n",
              "549              0   0.000000           0                0            0   \n",
              "553              0   0.018543           3                1            0   \n",
              "554              0   0.681748           1                3            0   \n",
              "\n",
              "    red_cards npg_38wks           npxG_38wks              xGChain  \\\n",
              "0           0        20   20.855747912079096    48.53588879853487   \n",
              "1           0        19   19.312312599271536   26.209551103413105   \n",
              "2           0        19   20.909917432814837   22.845245644450188   \n",
              "3           0        17   13.355148404836655    14.72016467526555   \n",
              "4           0        15     9.06514835730195   24.377113293856382   \n",
              "..        ...       ...                  ...                  ...   \n",
              "547         0         0                    0  0.07505488395690918   \n",
              "548         0         0   0.5575938895344734   0.8561866730451584   \n",
              "549         0         0                    0  0.29411039501428604   \n",
              "553         0         0   0.2071486935019493  0.31338607892394066   \n",
              "554         0         0  0.05553441867232323    0.873368987813592   \n",
              "\n",
              "               xGBuildup  xgdifference  xAdifference  \n",
              "0      16.20675839856267      1.293733      2.141666  \n",
              "1      3.579237926751375      0.643012      0.551296  \n",
              "2     3.5353690683841705     -1.954593     -0.581227  \n",
              "3     1.6692094188183546      4.361345     -0.044111  \n",
              "4      9.351834732107818      6.367839     -3.376489  \n",
              "..                   ...           ...           ...  \n",
              "547  0.07505488395690918      0.000000      0.000000  \n",
              "548  0.34466181695461273     -0.557594      0.000000  \n",
              "549  0.29411039501428604      0.000000      0.000000  \n",
              "553  0.08769410848617554     -0.207149     -0.018543  \n",
              "554  0.13608679175376892     -0.055534     -0.681748  \n",
              "\n",
              "[509 rows x 18 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3bb48228-c95d-42fb-831f-140d7800b1e8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>player_name</th>\n",
              "      <th>games</th>\n",
              "      <th>time</th>\n",
              "      <th>goals_38wks</th>\n",
              "      <th>xG_38wks</th>\n",
              "      <th>assists_38wks</th>\n",
              "      <th>xA_38wks</th>\n",
              "      <th>shots_38wks</th>\n",
              "      <th>key_passes_38wks</th>\n",
              "      <th>yellow_cards</th>\n",
              "      <th>red_cards</th>\n",
              "      <th>npg_38wks</th>\n",
              "      <th>npxG_38wks</th>\n",
              "      <th>xGChain</th>\n",
              "      <th>xGBuildup</th>\n",
              "      <th>xgdifference</th>\n",
              "      <th>xAdifference</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1250</td>\n",
              "      <td>Mohamed Salah</td>\n",
              "      <td>38</td>\n",
              "      <td>3392</td>\n",
              "      <td>29</td>\n",
              "      <td>27.706267</td>\n",
              "      <td>18</td>\n",
              "      <td>15.858334</td>\n",
              "      <td>130</td>\n",
              "      <td>89</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>20.855747912079096</td>\n",
              "      <td>48.53588879853487</td>\n",
              "      <td>16.20675839856267</td>\n",
              "      <td>1.293733</td>\n",
              "      <td>2.141666</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5232</td>\n",
              "      <td>Alexander Isak</td>\n",
              "      <td>34</td>\n",
              "      <td>2822</td>\n",
              "      <td>23</td>\n",
              "      <td>22.356988</td>\n",
              "      <td>6</td>\n",
              "      <td>5.448704</td>\n",
              "      <td>99</td>\n",
              "      <td>42</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>19</td>\n",
              "      <td>19.312312599271536</td>\n",
              "      <td>26.209551103413105</td>\n",
              "      <td>3.579237926751375</td>\n",
              "      <td>0.643012</td>\n",
              "      <td>0.551296</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8260</td>\n",
              "      <td>Erling Haaland</td>\n",
              "      <td>31</td>\n",
              "      <td>2749</td>\n",
              "      <td>22</td>\n",
              "      <td>23.954593</td>\n",
              "      <td>3</td>\n",
              "      <td>3.581227</td>\n",
              "      <td>109</td>\n",
              "      <td>29</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>19</td>\n",
              "      <td>20.909917432814837</td>\n",
              "      <td>22.845245644450188</td>\n",
              "      <td>3.5353690683841705</td>\n",
              "      <td>-1.954593</td>\n",
              "      <td>-0.581227</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4456</td>\n",
              "      <td>Chris Wood</td>\n",
              "      <td>36</td>\n",
              "      <td>3024</td>\n",
              "      <td>20</td>\n",
              "      <td>15.638655</td>\n",
              "      <td>3</td>\n",
              "      <td>3.044111</td>\n",
              "      <td>68</td>\n",
              "      <td>22</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>17</td>\n",
              "      <td>13.355148404836655</td>\n",
              "      <td>14.72016467526555</td>\n",
              "      <td>1.6692094188183546</td>\n",
              "      <td>4.361345</td>\n",
              "      <td>-0.044111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6552</td>\n",
              "      <td>Bryan Mbeumo</td>\n",
              "      <td>38</td>\n",
              "      <td>3419</td>\n",
              "      <td>20</td>\n",
              "      <td>13.632161</td>\n",
              "      <td>7</td>\n",
              "      <td>10.376489</td>\n",
              "      <td>86</td>\n",
              "      <td>70</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>15</td>\n",
              "      <td>9.06514835730195</td>\n",
              "      <td>24.377113293856382</td>\n",
              "      <td>9.351834732107818</td>\n",
              "      <td>6.367839</td>\n",
              "      <td>-3.376489</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>547</th>\n",
              "      <td>13463</td>\n",
              "      <td>Nasser Djiga</td>\n",
              "      <td>5</td>\n",
              "      <td>65</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.07505488395690918</td>\n",
              "      <td>0.07505488395690918</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>548</th>\n",
              "      <td>13466</td>\n",
              "      <td>Chido Obi-Martin</td>\n",
              "      <td>7</td>\n",
              "      <td>145</td>\n",
              "      <td>0</td>\n",
              "      <td>0.557594</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.5575938895344734</td>\n",
              "      <td>0.8561866730451584</td>\n",
              "      <td>0.34466181695461273</td>\n",
              "      <td>-0.557594</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>549</th>\n",
              "      <td>13467</td>\n",
              "      <td>Tyler Fredricson</td>\n",
              "      <td>2</td>\n",
              "      <td>170</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.29411039501428604</td>\n",
              "      <td>0.29411039501428604</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>553</th>\n",
              "      <td>13579</td>\n",
              "      <td>Jeremy Monga</td>\n",
              "      <td>7</td>\n",
              "      <td>77</td>\n",
              "      <td>0</td>\n",
              "      <td>0.207149</td>\n",
              "      <td>0</td>\n",
              "      <td>0.018543</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.2071486935019493</td>\n",
              "      <td>0.31338607892394066</td>\n",
              "      <td>0.08769410848617554</td>\n",
              "      <td>-0.207149</td>\n",
              "      <td>-0.018543</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>554</th>\n",
              "      <td>13582</td>\n",
              "      <td>Jay Robinson</td>\n",
              "      <td>4</td>\n",
              "      <td>122</td>\n",
              "      <td>0</td>\n",
              "      <td>0.055534</td>\n",
              "      <td>0</td>\n",
              "      <td>0.681748</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.05553441867232323</td>\n",
              "      <td>0.873368987813592</td>\n",
              "      <td>0.13608679175376892</td>\n",
              "      <td>-0.055534</td>\n",
              "      <td>-0.681748</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>509 rows × 18 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3bb48228-c95d-42fb-831f-140d7800b1e8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3bb48228-c95d-42fb-831f-140d7800b1e8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3bb48228-c95d-42fb-831f-140d7800b1e8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-da3a73f4-7b42-45cc-88e8-a9a58ab6d653\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-da3a73f4-7b42-45cc-88e8-a9a58ab6d653')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-da3a73f4-7b42-45cc-88e8-a9a58ab6d653 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_c721c585-0df3-46db-8d2f-6150966a4b29\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('one_game_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c721c585-0df3-46db-8d2f-6150966a4b29 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('one_game_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "one_game_df",
              "summary": "{\n  \"name\": \"one_game_df\",\n  \"rows\": 509,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 509,\n        \"samples\": [\n          \"447\",\n          \"2203\",\n          \"12911\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 509,\n        \"samples\": [\n          \"Kevin De Bruyne\",\n          \"Emiliano Buend\\u00eda\",\n          \"Abdul Fatawu\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"games\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 38,\n        \"samples\": [\n          \"2\",\n          \"3\",\n          \"35\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1024,\n        \"min\": 41,\n        \"max\": 3420,\n        \"num_unique_values\": 455,\n        \"samples\": [\n          71,\n          2635,\n          2622\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"goals_38wks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 29,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          29,\n          8,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xG_38wks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.7201301446324933,\n        \"min\": 0.0,\n        \"max\": 27.70626749098301,\n        \"num_unique_values\": 446,\n        \"samples\": [\n          0.36144955176860094,\n          0.34869277104735374,\n          1.8944458104670048\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"assists_38wks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 18,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          11,\n          0,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xA_38wks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.3073531028848238,\n        \"min\": 0.0,\n        \"max\": 15.858334187418222,\n        \"num_unique_values\": 454,\n        \"samples\": [\n          3.099418031051755,\n          7.019554221071303,\n          0.5219662692397833\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"shots_38wks\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 83,\n        \"samples\": [\n          \"49\",\n          \"130\",\n          \"60\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"key_passes_38wks\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 66,\n        \"samples\": [\n          \"60\",\n          \"34\",\n          \"89\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yellow_cards\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"10\",\n          \"0\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"red_cards\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"0\",\n          \"1\",\n          \"2\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"npg_38wks\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"20\",\n          \"3\",\n          \"4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"npxG_38wks\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 446,\n        \"samples\": [\n          \"0.36144955176860094\",\n          \"0.34869277104735374\",\n          \"1.8944458104670048\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xGChain\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 509,\n        \"samples\": [\n          \"18.807611417025328\",\n          \"0.956121938303113\",\n          \"2.3615895370021462\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xGBuildup\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 506,\n        \"samples\": [\n          \"2.1683908347040415\",\n          \"0.470432810485363\",\n          \"0.30675258580595255\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xgdifference\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2612796496252874,\n        \"min\": -5.5844937190413475,\n        \"max\": 6.553701013326645,\n        \"num_unique_values\": 446,\n        \"samples\": [\n          -0.36144955176860094,\n          -0.34869277104735374,\n          1.1055541895329952\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xAdifference\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0593210897845975,\n        \"min\": -4.954366408288479,\n        \"max\": 5.59554797783494,\n        \"num_unique_values\": 454,\n        \"samples\": [\n          -1.099418031051755,\n          0.9804457789286971,\n          -0.5219662692397833\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "onegamedftidy = one_game_df.drop(columns=[\n",
        " 'time',\n",
        " 'goals_38wks',\n",
        " 'assists_38wks',\n",
        " 'shots_38wks',\n",
        " 'key_passes_38wks',\n",
        " 'yellow_cards',\n",
        " 'red_cards',\n",
        " 'npg_38wks',\n",
        " 'npxG_38wks',\n",
        " 'xGChain',\n",
        " 'xGBuildup',\n",
        " 'xgdifference',\n",
        " 'xAdifference'])\n",
        "onegamedftidy"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "RKf0tUGEh8FV",
        "outputId": "8538228e-4d6f-414c-e9cc-0a1262070d20"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        id       player_name games   xG_38wks   xA_38wks\n",
              "0     1250     Mohamed Salah    38  27.706267  15.858334\n",
              "1     5232    Alexander Isak    34  22.356988   5.448704\n",
              "2     8260    Erling Haaland    31  23.954593   3.581227\n",
              "3     4456        Chris Wood    36  15.638655   3.044111\n",
              "4     6552      Bryan Mbeumo    38  13.632161  10.376489\n",
              "..     ...               ...   ...        ...        ...\n",
              "547  13463      Nasser Djiga     5   0.000000   0.000000\n",
              "548  13466  Chido Obi-Martin     7   0.557594   0.000000\n",
              "549  13467  Tyler Fredricson     2   0.000000   0.000000\n",
              "553  13579      Jeremy Monga     7   0.207149   0.018543\n",
              "554  13582      Jay Robinson     4   0.055534   0.681748\n",
              "\n",
              "[509 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8c0f84ea-fca0-49db-aa3e-876fdac1d60c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>player_name</th>\n",
              "      <th>games</th>\n",
              "      <th>xG_38wks</th>\n",
              "      <th>xA_38wks</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1250</td>\n",
              "      <td>Mohamed Salah</td>\n",
              "      <td>38</td>\n",
              "      <td>27.706267</td>\n",
              "      <td>15.858334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5232</td>\n",
              "      <td>Alexander Isak</td>\n",
              "      <td>34</td>\n",
              "      <td>22.356988</td>\n",
              "      <td>5.448704</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8260</td>\n",
              "      <td>Erling Haaland</td>\n",
              "      <td>31</td>\n",
              "      <td>23.954593</td>\n",
              "      <td>3.581227</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4456</td>\n",
              "      <td>Chris Wood</td>\n",
              "      <td>36</td>\n",
              "      <td>15.638655</td>\n",
              "      <td>3.044111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6552</td>\n",
              "      <td>Bryan Mbeumo</td>\n",
              "      <td>38</td>\n",
              "      <td>13.632161</td>\n",
              "      <td>10.376489</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>547</th>\n",
              "      <td>13463</td>\n",
              "      <td>Nasser Djiga</td>\n",
              "      <td>5</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>548</th>\n",
              "      <td>13466</td>\n",
              "      <td>Chido Obi-Martin</td>\n",
              "      <td>7</td>\n",
              "      <td>0.557594</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>549</th>\n",
              "      <td>13467</td>\n",
              "      <td>Tyler Fredricson</td>\n",
              "      <td>2</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>553</th>\n",
              "      <td>13579</td>\n",
              "      <td>Jeremy Monga</td>\n",
              "      <td>7</td>\n",
              "      <td>0.207149</td>\n",
              "      <td>0.018543</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>554</th>\n",
              "      <td>13582</td>\n",
              "      <td>Jay Robinson</td>\n",
              "      <td>4</td>\n",
              "      <td>0.055534</td>\n",
              "      <td>0.681748</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>509 rows × 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c0f84ea-fca0-49db-aa3e-876fdac1d60c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8c0f84ea-fca0-49db-aa3e-876fdac1d60c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8c0f84ea-fca0-49db-aa3e-876fdac1d60c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-cf64c5f3-0165-486e-b435-81e5e5ae16a8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cf64c5f3-0165-486e-b435-81e5e5ae16a8')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-cf64c5f3-0165-486e-b435-81e5e5ae16a8 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_61e2d8c1-e856-4bd8-b4e4-34d91561603e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('onegamedftidy')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_61e2d8c1-e856-4bd8-b4e4-34d91561603e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('onegamedftidy');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "onegamedftidy",
              "summary": "{\n  \"name\": \"onegamedftidy\",\n  \"rows\": 509,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 509,\n        \"samples\": [\n          \"447\",\n          \"2203\",\n          \"12911\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 509,\n        \"samples\": [\n          \"Kevin De Bruyne\",\n          \"Emiliano Buend\\u00eda\",\n          \"Abdul Fatawu\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"games\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 38,\n        \"samples\": [\n          \"2\",\n          \"3\",\n          \"35\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xG_38wks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.7201301446324933,\n        \"min\": 0.0,\n        \"max\": 27.70626749098301,\n        \"num_unique_values\": 446,\n        \"samples\": [\n          0.36144955176860094,\n          0.34869277104735374,\n          1.8944458104670048\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xA_38wks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.3073531028848238,\n        \"min\": 0.0,\n        \"max\": 15.858334187418222,\n        \"num_unique_values\": 454,\n        \"samples\": [\n          3.099418031051755,\n          7.019554221071303,\n          0.5219662692397833\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from urllib.request import urlopen\n",
        "from json import loads\n",
        "from csv import writer\n",
        "\n",
        "\n",
        "def team_converter(team_id):\n",
        "    '''Converts a team's ID to their actual name'''\n",
        "    team_map = {\n",
        "    1: \"Arsenal\",\n",
        "    2: \"Aston Villa\",\n",
        "    3: \"Bournemouth\",\n",
        "    4: \"Brentford\",\n",
        "    5: \"Brighton\",\n",
        "    6: \"Burnley\",\n",
        "    7: \"Chelsea\",\n",
        "    8: \"Crystal Palace\",\n",
        "    9: \"Everton\",\n",
        "    10: \"Fulham\",\n",
        "    11: \"Leeds\",\n",
        "    12: \"Liverpool\",\n",
        "    13: \"Manchester City\",\n",
        "    14: \"Manchester United\",\n",
        "    15: \"Newcastle United\",\n",
        "    16: \"Nottingham Forest\",\n",
        "    17: \"Sunderland\",\n",
        "    18: \"Tottenham\",\n",
        "    19: \"West Ham\",\n",
        "    20: \"Wolverhampton Wanderers\",\n",
        "        None: None\n",
        "    }\n",
        "    return team_map[team_id]\n",
        "\n",
        "\n",
        "def position_converter(position):\n",
        "    '''Converts a player's element_type to their actual position'''\n",
        "    position_map = {\n",
        "        1: \"Goalkeeper\",\n",
        "        2: \"Defender\",\n",
        "        3: \"Midfielder\",\n",
        "        4: \"Forward\"\n",
        "    }\n",
        "    return position_map[position]\n",
        "\n",
        "\n",
        "def main():\n",
        "    all_data = loads(urlopen(\"https://fantasy.premierleague.com/api/fixtures/\").read())\n",
        "    fixtures = all_data\n",
        "\n",
        "    important_data = [\n",
        "        [\n",
        "            x[\"event\"],\n",
        "            team_converter(x[\"team_h\"]),\n",
        "            team_converter(x[\"team_a\"]),\n",
        "            x[\"kickoff_time\"],\n",
        "\n",
        "        ]\n",
        "        for x in fixtures\n",
        "    ]\n",
        "\n",
        "    with open(\"/fixtures_data.csv\", \"w\", encoding=\"utf-8\", newline=\"\") as out:\n",
        "        headers = [\"event\",\"team_h\",\"team_a\",\"kickoff_time\"]\n",
        "        w = writer(out)\n",
        "        w.writerow(headers)\n",
        "        w.writerows(important_data)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "id": "Y_cV1kyak7XX"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import scipy\n",
        "import numpy as np\n",
        "from numpy import random\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import matplotlib"
      ],
      "metadata": {
        "id": "DXejj-4jjUI-"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from urllib.request import urlopen\n",
        "from json import loads\n",
        "from csv import writer\n",
        "\n",
        "\n",
        "def team_converter(team_id):\n",
        "    '''Converts a team's ID to their actual name'''\n",
        "    team_map = {\n",
        "    1: \"Arsenal\",\n",
        "    2: \"Aston Villa\",\n",
        "    3: \"Bournemouth\",\n",
        "    4: \"Brentford\",\n",
        "    5: \"Brighton\",\n",
        "    6: \"Burnley\",\n",
        "    7: \"Chelsea\",\n",
        "    8: \"Crystal Palace\",\n",
        "    9: \"Everton\",\n",
        "    10: \"Fulham\",\n",
        "    11: \"Leeds\",\n",
        "    12: \"Liverpool\",\n",
        "    13: \"Manchester City\",\n",
        "    14: \"Manchester United\",\n",
        "    15: \"Newcastle United\",\n",
        "    16: \"Nottingham Forest\",\n",
        "    17: \"Sunderland\",\n",
        "    18: \"Tottenham\",\n",
        "    19: \"West Ham\",\n",
        "    20: \"Wolverhampton Wanderers\",\n",
        "        None: None\n",
        "    }\n",
        "    return team_map[team_id]\n",
        "\n",
        "\n",
        "def position_converter(position):\n",
        "    '''Converts a player's element_type to their actual position'''\n",
        "    position_map = {\n",
        "        1: \"Goalkeeper\",\n",
        "        2: \"Defender\",\n",
        "        3: \"Midfielder\",\n",
        "        4: \"Forward\"\n",
        "    }\n",
        "    return position_map[position]\n",
        "\n",
        "\n",
        "def main():\n",
        "    all_data = loads(urlopen(\"https://fantasy.premierleague.com/api/bootstrap-static/\").read())\n",
        "    players = all_data[\"elements\"]\n",
        "\n",
        "    important_data = [\n",
        "        [\n",
        "            x[\"id\"],\n",
        "            team_converter(x[\"team\"]),\n",
        "            position_converter(x[\"element_type\"])[0],\n",
        "            x[\"web_name\"],\n",
        "            x[\"now_cost\"] / 10,\n",
        "            x[\"selected_by_percent\"],\n",
        "            float(x[\"expected_goals\"]),  # Convert to float\n",
        "            float(x[\"expected_assists\"]),  # Convert to float\n",
        "            x[\"goals_scored\"],\n",
        "            x[\"assists\"],\n",
        "            x[\"bps\"],\n",
        "            x[\"ict_index\"],\n",
        "            x[\"total_points\"],\n",
        "            x[\"points_per_game\"],\n",
        "            x[\"minutes\"]\n",
        "        ]\n",
        "        for x in players\n",
        "    ]\n",
        "\n",
        "    with open(\"players_data.csv\", \"w\", encoding=\"utf-8\", newline=\"\") as out:\n",
        "        headers = [\"id\",\"team\", \"pos\", \"name\", \"cost\", \"selected_by_percent\", \"expected_goals\", \"expected_assists\", \"goals_scored\", \"assists\", \"bps\", \"ict_index\",\"points\", \"points_per_game\", \"minutes\"]\n",
        "        w = writer(out)\n",
        "        w.writerow(headers)\n",
        "        w.writerows(important_data)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "id": "CKZZPD0xQGLu"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "playerdata = pd.read_csv(\"/content/players_data.csv\")\n",
        "master = playerdata\n",
        "#master = master.dropna()\n",
        "master['apppoint'] = 2\n",
        "master['assistvalue'] = 3\n",
        "#master['BPS90'] = master.bps/(master.minutes/90)\n",
        "master"
      ],
      "metadata": {
        "id": "VOx8tP0bjttO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 687
        },
        "outputId": "0dfe6687-d5f2-4055-fcb2-35bab3b79fda"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id                     team pos          name  cost  \\\n",
              "0      1                  Arsenal   G          Raya   5.5   \n",
              "1      2                  Arsenal   G  Arrizabalaga   4.5   \n",
              "2      3                  Arsenal   G          Hein   4.0   \n",
              "3      4                  Arsenal   G       Setford   4.0   \n",
              "4      5                  Arsenal   D       Gabriel   6.0   \n",
              "..   ...                      ...  ..           ...   ...   \n",
              "661  655  Wolverhampton Wanderers   F   Fábio Silva   5.0   \n",
              "662  656  Wolverhampton Wanderers   F     Kalajdžić   5.0   \n",
              "663  657  Wolverhampton Wanderers   F       Chiwome   4.5   \n",
              "664  658  Wolverhampton Wanderers   F        Fraser   4.5   \n",
              "665  663  Wolverhampton Wanderers   M       J.Arias   5.5   \n",
              "\n",
              "     selected_by_percent  expected_goals  expected_assists  goals_scored  \\\n",
              "0                   18.5            0.00              0.03             0   \n",
              "1                    1.0            0.06              0.03             0   \n",
              "2                    0.6            0.00              0.00             0   \n",
              "3                    0.2            0.00              0.00             0   \n",
              "4                   26.1            2.70              1.21             3   \n",
              "..                   ...             ...               ...           ...   \n",
              "661                  0.7            0.00              0.00             0   \n",
              "662                  0.2            0.00              0.00             0   \n",
              "663                  0.1            0.00              0.00             0   \n",
              "664                  2.9            0.00              0.00             0   \n",
              "665                  1.0            0.00              0.00             0   \n",
              "\n",
              "     assists  bps  ict_index  points  points_per_game  minutes  apppoint  \\\n",
              "0          0  555       76.7     142              3.7     3420         2   \n",
              "1          0  406       75.8     106              3.4     2790         2   \n",
              "2          0    0        0.0       0              0.0        0         2   \n",
              "3          0    0        0.0       0              0.0        0         2   \n",
              "4          2  459      108.2     117              4.2     2363         2   \n",
              "..       ...  ...        ...     ...              ...      ...       ...   \n",
              "661        0    0        0.0       0              0.0        0         2   \n",
              "662        0    0        0.0       0              0.0        0         2   \n",
              "663        0    0        0.0       0              0.0        0         2   \n",
              "664        0    0        0.0       0              0.0        0         2   \n",
              "665        0    0        0.0       0              0.0        0         2   \n",
              "\n",
              "     assistvalue  \n",
              "0              3  \n",
              "1              3  \n",
              "2              3  \n",
              "3              3  \n",
              "4              3  \n",
              "..           ...  \n",
              "661            3  \n",
              "662            3  \n",
              "663            3  \n",
              "664            3  \n",
              "665            3  \n",
              "\n",
              "[666 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1f797ec5-4e99-41a4-87aa-e66b6c08c0bc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>name</th>\n",
              "      <th>cost</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>expected_goals</th>\n",
              "      <th>expected_assists</th>\n",
              "      <th>goals_scored</th>\n",
              "      <th>assists</th>\n",
              "      <th>bps</th>\n",
              "      <th>ict_index</th>\n",
              "      <th>points</th>\n",
              "      <th>points_per_game</th>\n",
              "      <th>minutes</th>\n",
              "      <th>apppoint</th>\n",
              "      <th>assistvalue</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>G</td>\n",
              "      <td>Raya</td>\n",
              "      <td>5.5</td>\n",
              "      <td>18.5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>555</td>\n",
              "      <td>76.7</td>\n",
              "      <td>142</td>\n",
              "      <td>3.7</td>\n",
              "      <td>3420</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>G</td>\n",
              "      <td>Arrizabalaga</td>\n",
              "      <td>4.5</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.06</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>406</td>\n",
              "      <td>75.8</td>\n",
              "      <td>106</td>\n",
              "      <td>3.4</td>\n",
              "      <td>2790</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>G</td>\n",
              "      <td>Hein</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>G</td>\n",
              "      <td>Setford</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>D</td>\n",
              "      <td>Gabriel</td>\n",
              "      <td>6.0</td>\n",
              "      <td>26.1</td>\n",
              "      <td>2.70</td>\n",
              "      <td>1.21</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>459</td>\n",
              "      <td>108.2</td>\n",
              "      <td>117</td>\n",
              "      <td>4.2</td>\n",
              "      <td>2363</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>661</th>\n",
              "      <td>655</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>F</td>\n",
              "      <td>Fábio Silva</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.7</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>662</th>\n",
              "      <td>656</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>F</td>\n",
              "      <td>Kalajdžić</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>663</th>\n",
              "      <td>657</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>F</td>\n",
              "      <td>Chiwome</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>664</th>\n",
              "      <td>658</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>F</td>\n",
              "      <td>Fraser</td>\n",
              "      <td>4.5</td>\n",
              "      <td>2.9</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>665</th>\n",
              "      <td>663</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>M</td>\n",
              "      <td>J.Arias</td>\n",
              "      <td>5.5</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>666 rows × 17 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1f797ec5-4e99-41a4-87aa-e66b6c08c0bc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1f797ec5-4e99-41a4-87aa-e66b6c08c0bc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1f797ec5-4e99-41a4-87aa-e66b6c08c0bc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-41f0c2f5-674a-4050-b0a5-7723d7564b93\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-41f0c2f5-674a-4050-b0a5-7723d7564b93')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-41f0c2f5-674a-4050-b0a5-7723d7564b93 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_6a132478-42bf-4e28-adce-83b006a6071a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('playerdata')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_6a132478-42bf-4e28-adce-83b006a6071a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('playerdata');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "playerdata",
              "summary": "{\n  \"name\": \"playerdata\",\n  \"rows\": 666,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 192,\n        \"min\": 1,\n        \"max\": 666,\n        \"num_unique_values\": 666,\n        \"samples\": [\n          608,\n          120,\n          627\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Arsenal\",\n          \"Tottenham\",\n          \"Nottingham Forest\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pos\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"D\",\n          \"F\",\n          \"G\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 648,\n        \"samples\": [\n          \"Guedes\",\n          \"S\\u00e1nchez\",\n          \"Emerson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.118688627903711,\n        \"min\": 4.0,\n        \"max\": 14.5,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          7.5,\n          10.5,\n          5.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"selected_by_percent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.9320055032673995,\n        \"min\": 0.0,\n        \"max\": 57.2,\n        \"num_unique_values\": 107,\n        \"samples\": [\n          1.4,\n          0.3,\n          26.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"expected_goals\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.993490453797477,\n        \"min\": 0.0,\n        \"max\": 24.7,\n        \"num_unique_values\": 249,\n        \"samples\": [\n          4.45,\n          0.17,\n          1.44\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"expected_assists\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5826405519750342,\n        \"min\": 0.0,\n        \"max\": 9.53,\n        \"num_unique_values\": 227,\n        \"samples\": [\n          7.78,\n          4.27,\n          1.18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"goals_scored\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 29,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0,\n          10,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"assists\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 18,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          7,\n          10,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 212,\n        \"min\": -2,\n        \"max\": 1133,\n        \"num_unique_values\": 287,\n        \"samples\": [\n          211,\n          245,\n          186\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ict_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 69.68047504646096,\n        \"min\": 0.0,\n        \"max\": 476.0,\n        \"num_unique_values\": 356,\n        \"samples\": [\n          32.2,\n          223.8,\n          188.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"points\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51,\n        \"min\": 0,\n        \"max\": 344,\n        \"num_unique_values\": 153,\n        \"samples\": [\n          93,\n          60,\n          67\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"points_per_game\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5601612113050674,\n        \"min\": 0.0,\n        \"max\": 9.1,\n        \"num_unique_values\": 55,\n        \"samples\": [\n          1.7,\n          3.8,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"minutes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1104,\n        \"min\": 0,\n        \"max\": 3420,\n        \"num_unique_values\": 356,\n        \"samples\": [\n          1888,\n          1613,\n          169\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"apppoint\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2,\n        \"max\": 2,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"assistvalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 3,\n        \"max\": 3,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "gwfixtures = pd.read_csv(\"/fixtures_data.csv\")\n",
        "gwfixtures"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "g1l47H8lex3A",
        "outputId": "fc8bc3dd-f80e-42de-bfe9-74f37692f1d3"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     event             team_h            team_a          kickoff_time\n",
              "0        1          Liverpool         Brentford  2025-08-15T19:00:00Z\n",
              "1        1        Aston Villa  Newcastle United  2025-08-16T11:30:00Z\n",
              "2        1            Burnley            Fulham  2025-08-16T14:00:00Z\n",
              "3        1          Tottenham       Bournemouth  2025-08-16T14:00:00Z\n",
              "4        1         Sunderland          West Ham  2025-08-16T14:00:00Z\n",
              "..     ...                ...               ...                   ...\n",
              "375     38    Manchester City       Aston Villa  2026-05-24T15:00:00Z\n",
              "376     38  Nottingham Forest         Brentford  2026-05-24T15:00:00Z\n",
              "377     38          Tottenham           Everton  2026-05-24T15:00:00Z\n",
              "378     38         Sunderland           Chelsea  2026-05-24T15:00:00Z\n",
              "379     38           West Ham             Leeds  2026-05-24T15:00:00Z\n",
              "\n",
              "[380 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cfdb5791-1b22-428a-97d1-d4519e232ea6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>event</th>\n",
              "      <th>team_h</th>\n",
              "      <th>team_a</th>\n",
              "      <th>kickoff_time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>2025-08-15T19:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>2025-08-16T11:30:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>Burnley</td>\n",
              "      <td>Fulham</td>\n",
              "      <td>2025-08-16T14:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>Tottenham</td>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>2025-08-16T14:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>Sunderland</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>2025-08-16T14:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>375</th>\n",
              "      <td>38</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>2026-05-24T15:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>376</th>\n",
              "      <td>38</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>2026-05-24T15:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>377</th>\n",
              "      <td>38</td>\n",
              "      <td>Tottenham</td>\n",
              "      <td>Everton</td>\n",
              "      <td>2026-05-24T15:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>378</th>\n",
              "      <td>38</td>\n",
              "      <td>Sunderland</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>2026-05-24T15:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>379</th>\n",
              "      <td>38</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>2026-05-24T15:00:00Z</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>380 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cfdb5791-1b22-428a-97d1-d4519e232ea6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cfdb5791-1b22-428a-97d1-d4519e232ea6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cfdb5791-1b22-428a-97d1-d4519e232ea6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b3387acf-9145-44d9-8bf1-b419231cfb99\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b3387acf-9145-44d9-8bf1-b419231cfb99')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b3387acf-9145-44d9-8bf1-b419231cfb99 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_3fa9904d-0b15-4dcf-92ab-3a45670189c4\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('gwfixtures')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3fa9904d-0b15-4dcf-92ab-3a45670189c4 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('gwfixtures');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "gwfixtures",
              "summary": "{\n  \"name\": \"gwfixtures\",\n  \"rows\": 380,\n  \"fields\": [\n    {\n      \"column\": \"event\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 1,\n        \"max\": 38,\n        \"num_unique_values\": 38,\n        \"samples\": [\n          34,\n          37,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team_h\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Liverpool\",\n          \"Everton\",\n          \"Arsenal\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team_a\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Brentford\",\n          \"Burnley\",\n          \"Leeds\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kickoff_time\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 70,\n        \"samples\": [\n          \"2025-09-13T16:30:00Z\",\n          \"2025-08-15T19:00:00Z\",\n          \"2025-12-27T15:00:00Z\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pandas import ExcelWriter"
      ],
      "metadata": {
        "id": "ONZy1SvCDu6y"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "writer = ExcelWriter('notes.xlsx')"
      ],
      "metadata": {
        "id": "iubZBRlVEhiz"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#rawallplayers.to_excel(writer, sheet_name='Sheet1')\n",
        "#gw15adjustments.to_excel(writer, sheet_name='Sheet2')\n",
        "#fplwithunderstat.to_excel(writer, sheet_name='Sheet3')\n",
        "\n",
        "# Close the Pandas Excel writer and output the Excel file.\n",
        "#writer.save()"
      ],
      "metadata": {
        "id": "slYEIma_E0uP"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gwfixtures"
      ],
      "metadata": {
        "id": "3udskoGrT73A",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "9c3c0820-f86d-4867-ef0d-d4160c0fca62"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     event             team_h            team_a          kickoff_time\n",
              "0        1          Liverpool         Brentford  2025-08-15T19:00:00Z\n",
              "1        1        Aston Villa  Newcastle United  2025-08-16T11:30:00Z\n",
              "2        1            Burnley            Fulham  2025-08-16T14:00:00Z\n",
              "3        1          Tottenham       Bournemouth  2025-08-16T14:00:00Z\n",
              "4        1         Sunderland          West Ham  2025-08-16T14:00:00Z\n",
              "..     ...                ...               ...                   ...\n",
              "375     38    Manchester City       Aston Villa  2026-05-24T15:00:00Z\n",
              "376     38  Nottingham Forest         Brentford  2026-05-24T15:00:00Z\n",
              "377     38          Tottenham           Everton  2026-05-24T15:00:00Z\n",
              "378     38         Sunderland           Chelsea  2026-05-24T15:00:00Z\n",
              "379     38           West Ham             Leeds  2026-05-24T15:00:00Z\n",
              "\n",
              "[380 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4899c232-3591-415f-a133-e2bb48ec9c10\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>event</th>\n",
              "      <th>team_h</th>\n",
              "      <th>team_a</th>\n",
              "      <th>kickoff_time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>2025-08-15T19:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>2025-08-16T11:30:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>Burnley</td>\n",
              "      <td>Fulham</td>\n",
              "      <td>2025-08-16T14:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>Tottenham</td>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>2025-08-16T14:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>Sunderland</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>2025-08-16T14:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>375</th>\n",
              "      <td>38</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>2026-05-24T15:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>376</th>\n",
              "      <td>38</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>2026-05-24T15:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>377</th>\n",
              "      <td>38</td>\n",
              "      <td>Tottenham</td>\n",
              "      <td>Everton</td>\n",
              "      <td>2026-05-24T15:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>378</th>\n",
              "      <td>38</td>\n",
              "      <td>Sunderland</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>2026-05-24T15:00:00Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>379</th>\n",
              "      <td>38</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>2026-05-24T15:00:00Z</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>380 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4899c232-3591-415f-a133-e2bb48ec9c10')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4899c232-3591-415f-a133-e2bb48ec9c10 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4899c232-3591-415f-a133-e2bb48ec9c10');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-51718df0-a522-4843-9a8d-267f5161e9f6\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-51718df0-a522-4843-9a8d-267f5161e9f6')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-51718df0-a522-4843-9a8d-267f5161e9f6 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_55f75610-64a7-428c-8a42-a4ee4518e380\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('gwfixtures')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_55f75610-64a7-428c-8a42-a4ee4518e380 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('gwfixtures');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "gwfixtures",
              "summary": "{\n  \"name\": \"gwfixtures\",\n  \"rows\": 380,\n  \"fields\": [\n    {\n      \"column\": \"event\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 1,\n        \"max\": 38,\n        \"num_unique_values\": 38,\n        \"samples\": [\n          34,\n          37,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team_h\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Liverpool\",\n          \"Everton\",\n          \"Arsenal\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team_a\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Brentford\",\n          \"Burnley\",\n          \"Leeds\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kickoff_time\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 70,\n        \"samples\": [\n          \"2025-09-13T16:30:00Z\",\n          \"2025-08-15T19:00:00Z\",\n          \"2025-12-27T15:00:00Z\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#from google.colab import drive\n",
        "#drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "GzSzE5_Ckuq3"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import shutil"
      ],
      "metadata": {
        "id": "xSIwXnyAk2op"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#shutil.copy(\"/content/API model.xlsx\",\"/content/drive/MyDrive/FPL\")"
      ],
      "metadata": {
        "id": "O724A90vk3b4"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import string"
      ],
      "metadata": {
        "id": "JSw3vk9PJvps"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "apiplayers = master"
      ],
      "metadata": {
        "id": "3bvpGcxtVMyS"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Mostselected = apiplayers.nlargest(20, 'selected_by_percent')\n",
        "Mostselected"
      ],
      "metadata": {
        "id": "O-wNiNtosYZU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "outputId": "bafbeddf-5eeb-48f9-956d-2dcf54ce04ef"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id               team pos         name  cost  selected_by_percent  \\\n",
              "249  249            Chelsea   F   João Pedro   7.5                 57.2   \n",
              "385  381          Liverpool   M      M.Salah  14.5                 56.5   \n",
              "235  235            Chelsea   M       Palmer  10.5                 51.1   \n",
              "386  382          Liverpool   M        Wirtz   8.5                 34.8   \n",
              "504  499   Newcastle United   F         Isak  10.5                 34.1   \n",
              "615  610           West Ham   D  Wan-Bissaka   4.5                 32.3   \n",
              "140  101           Brighton   G     Kelleher   4.5                 32.1   \n",
              "374  370          Liverpool   D     Frimpong   6.0                 27.9   \n",
              "587  582          Tottenham   M        Kudus   6.5                 27.2   \n",
              "407  402    Manchester City   D    Aït-Nouri   6.0                 26.6   \n",
              "4      5            Arsenal   D      Gabriel   6.0                 26.1   \n",
              "39    38        Aston Villa   D        Konsa   4.5                 24.1   \n",
              "48    47        Aston Villa   M       Rogers   7.0                 22.9   \n",
              "629  624           West Ham   F        Bowen   8.0                 20.0   \n",
              "224  224            Chelsea   D    Cucurella   6.0                 19.9   \n",
              "377  373          Liverpool   D       Virgil   6.0                 19.4   \n",
              "0      1            Arsenal   G         Raya   5.5                 18.5   \n",
              "436  119  Manchester United   M       Mbeumo   8.0                 18.4   \n",
              "512  507  Nottingham Forest   D         Aina   5.0                 18.3   \n",
              "435  430    Manchester City   F      Haaland  14.0                 18.1   \n",
              "\n",
              "     expected_goals  expected_assists  goals_scored  assists   bps  ict_index  \\\n",
              "249            8.96              3.10            10        6   516      166.0   \n",
              "385           24.70              8.99            29       18  1133      476.0   \n",
              "235           16.79              9.53            15       10   952      338.0   \n",
              "386            0.00              0.00             0        0     0        0.0   \n",
              "504           20.33              3.59            23        6   848      292.7   \n",
              "615            1.18              2.75             2        6   496      152.7   \n",
              "140            0.00              0.00             0        0   156       22.4   \n",
              "374            0.00              0.00             0        0     0        0.0   \n",
              "587            6.97              2.67             5        4   373      177.5   \n",
              "407            2.69              3.98             4        7   447      191.0   \n",
              "4              2.70              1.21             3        2   459      108.2   \n",
              "39             1.29              0.61             2        0   448       82.4   \n",
              "48             6.49              5.24             8       11   534      214.3   \n",
              "629            8.60              6.47            13       11   678      271.9   \n",
              "224            2.79              2.39             5        2   533      137.9   \n",
              "377            2.22              0.98             3        1   631      143.7   \n",
              "0              0.00              0.03             0        0   555       76.7   \n",
              "436           12.52              9.24            20        9   948      340.8   \n",
              "512            0.63              2.25             2        1   483       94.1   \n",
              "435           21.90              2.04            22        3   795      281.8   \n",
              "\n",
              "     points  points_per_game  minutes  apppoint  assistvalue  \n",
              "249     126              4.7     1946         2            3  \n",
              "385     344              9.1     3374         2            3  \n",
              "235     214              5.8     3193         2            3  \n",
              "386       0              0.0        0         2            3  \n",
              "504     211              6.2     2758         2            3  \n",
              "615     118              3.3     3154         2            3  \n",
              "140      45              4.5      900         2            3  \n",
              "374       0              0.0        0         2            3  \n",
              "587     106              3.3     2589         2            3  \n",
              "407     125              3.4     3112         2            3  \n",
              "4       117              4.2     2363         2            3  \n",
              "39      103              3.0     2936         2            3  \n",
              "48      161              4.4     3115         2            3  \n",
              "629     193              5.7     2974         2            3  \n",
              "224     133              3.7     2988         2            3  \n",
              "377     143              3.9     3330         2            3  \n",
              "0       142              3.7     3420         2            3  \n",
              "436     236              6.2     3415         2            3  \n",
              "512     128              3.7     2996         2            3  \n",
              "435     181              5.8     2736         2            3  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-01dcc7cd-7315-4cc8-8302-9907ebbf5016\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>name</th>\n",
              "      <th>cost</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>expected_goals</th>\n",
              "      <th>expected_assists</th>\n",
              "      <th>goals_scored</th>\n",
              "      <th>assists</th>\n",
              "      <th>bps</th>\n",
              "      <th>ict_index</th>\n",
              "      <th>points</th>\n",
              "      <th>points_per_game</th>\n",
              "      <th>minutes</th>\n",
              "      <th>apppoint</th>\n",
              "      <th>assistvalue</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>249</th>\n",
              "      <td>249</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>F</td>\n",
              "      <td>João Pedro</td>\n",
              "      <td>7.5</td>\n",
              "      <td>57.2</td>\n",
              "      <td>8.96</td>\n",
              "      <td>3.10</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>516</td>\n",
              "      <td>166.0</td>\n",
              "      <td>126</td>\n",
              "      <td>4.7</td>\n",
              "      <td>1946</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>385</th>\n",
              "      <td>381</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>M</td>\n",
              "      <td>M.Salah</td>\n",
              "      <td>14.5</td>\n",
              "      <td>56.5</td>\n",
              "      <td>24.70</td>\n",
              "      <td>8.99</td>\n",
              "      <td>29</td>\n",
              "      <td>18</td>\n",
              "      <td>1133</td>\n",
              "      <td>476.0</td>\n",
              "      <td>344</td>\n",
              "      <td>9.1</td>\n",
              "      <td>3374</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>235</th>\n",
              "      <td>235</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>M</td>\n",
              "      <td>Palmer</td>\n",
              "      <td>10.5</td>\n",
              "      <td>51.1</td>\n",
              "      <td>16.79</td>\n",
              "      <td>9.53</td>\n",
              "      <td>15</td>\n",
              "      <td>10</td>\n",
              "      <td>952</td>\n",
              "      <td>338.0</td>\n",
              "      <td>214</td>\n",
              "      <td>5.8</td>\n",
              "      <td>3193</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>386</th>\n",
              "      <td>382</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>M</td>\n",
              "      <td>Wirtz</td>\n",
              "      <td>8.5</td>\n",
              "      <td>34.8</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>504</th>\n",
              "      <td>499</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>F</td>\n",
              "      <td>Isak</td>\n",
              "      <td>10.5</td>\n",
              "      <td>34.1</td>\n",
              "      <td>20.33</td>\n",
              "      <td>3.59</td>\n",
              "      <td>23</td>\n",
              "      <td>6</td>\n",
              "      <td>848</td>\n",
              "      <td>292.7</td>\n",
              "      <td>211</td>\n",
              "      <td>6.2</td>\n",
              "      <td>2758</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>615</th>\n",
              "      <td>610</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>D</td>\n",
              "      <td>Wan-Bissaka</td>\n",
              "      <td>4.5</td>\n",
              "      <td>32.3</td>\n",
              "      <td>1.18</td>\n",
              "      <td>2.75</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>496</td>\n",
              "      <td>152.7</td>\n",
              "      <td>118</td>\n",
              "      <td>3.3</td>\n",
              "      <td>3154</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>140</th>\n",
              "      <td>101</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>G</td>\n",
              "      <td>Kelleher</td>\n",
              "      <td>4.5</td>\n",
              "      <td>32.1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>156</td>\n",
              "      <td>22.4</td>\n",
              "      <td>45</td>\n",
              "      <td>4.5</td>\n",
              "      <td>900</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374</th>\n",
              "      <td>370</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>D</td>\n",
              "      <td>Frimpong</td>\n",
              "      <td>6.0</td>\n",
              "      <td>27.9</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>587</th>\n",
              "      <td>582</td>\n",
              "      <td>Tottenham</td>\n",
              "      <td>M</td>\n",
              "      <td>Kudus</td>\n",
              "      <td>6.5</td>\n",
              "      <td>27.2</td>\n",
              "      <td>6.97</td>\n",
              "      <td>2.67</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>373</td>\n",
              "      <td>177.5</td>\n",
              "      <td>106</td>\n",
              "      <td>3.3</td>\n",
              "      <td>2589</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>407</th>\n",
              "      <td>402</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>D</td>\n",
              "      <td>Aït-Nouri</td>\n",
              "      <td>6.0</td>\n",
              "      <td>26.6</td>\n",
              "      <td>2.69</td>\n",
              "      <td>3.98</td>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>447</td>\n",
              "      <td>191.0</td>\n",
              "      <td>125</td>\n",
              "      <td>3.4</td>\n",
              "      <td>3112</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>D</td>\n",
              "      <td>Gabriel</td>\n",
              "      <td>6.0</td>\n",
              "      <td>26.1</td>\n",
              "      <td>2.70</td>\n",
              "      <td>1.21</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>459</td>\n",
              "      <td>108.2</td>\n",
              "      <td>117</td>\n",
              "      <td>4.2</td>\n",
              "      <td>2363</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>38</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>D</td>\n",
              "      <td>Konsa</td>\n",
              "      <td>4.5</td>\n",
              "      <td>24.1</td>\n",
              "      <td>1.29</td>\n",
              "      <td>0.61</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>448</td>\n",
              "      <td>82.4</td>\n",
              "      <td>103</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2936</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>47</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>M</td>\n",
              "      <td>Rogers</td>\n",
              "      <td>7.0</td>\n",
              "      <td>22.9</td>\n",
              "      <td>6.49</td>\n",
              "      <td>5.24</td>\n",
              "      <td>8</td>\n",
              "      <td>11</td>\n",
              "      <td>534</td>\n",
              "      <td>214.3</td>\n",
              "      <td>161</td>\n",
              "      <td>4.4</td>\n",
              "      <td>3115</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>629</th>\n",
              "      <td>624</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>F</td>\n",
              "      <td>Bowen</td>\n",
              "      <td>8.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>8.60</td>\n",
              "      <td>6.47</td>\n",
              "      <td>13</td>\n",
              "      <td>11</td>\n",
              "      <td>678</td>\n",
              "      <td>271.9</td>\n",
              "      <td>193</td>\n",
              "      <td>5.7</td>\n",
              "      <td>2974</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>224</th>\n",
              "      <td>224</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>D</td>\n",
              "      <td>Cucurella</td>\n",
              "      <td>6.0</td>\n",
              "      <td>19.9</td>\n",
              "      <td>2.79</td>\n",
              "      <td>2.39</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>533</td>\n",
              "      <td>137.9</td>\n",
              "      <td>133</td>\n",
              "      <td>3.7</td>\n",
              "      <td>2988</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>377</th>\n",
              "      <td>373</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>D</td>\n",
              "      <td>Virgil</td>\n",
              "      <td>6.0</td>\n",
              "      <td>19.4</td>\n",
              "      <td>2.22</td>\n",
              "      <td>0.98</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>631</td>\n",
              "      <td>143.7</td>\n",
              "      <td>143</td>\n",
              "      <td>3.9</td>\n",
              "      <td>3330</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>G</td>\n",
              "      <td>Raya</td>\n",
              "      <td>5.5</td>\n",
              "      <td>18.5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>555</td>\n",
              "      <td>76.7</td>\n",
              "      <td>142</td>\n",
              "      <td>3.7</td>\n",
              "      <td>3420</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>436</th>\n",
              "      <td>119</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>M</td>\n",
              "      <td>Mbeumo</td>\n",
              "      <td>8.0</td>\n",
              "      <td>18.4</td>\n",
              "      <td>12.52</td>\n",
              "      <td>9.24</td>\n",
              "      <td>20</td>\n",
              "      <td>9</td>\n",
              "      <td>948</td>\n",
              "      <td>340.8</td>\n",
              "      <td>236</td>\n",
              "      <td>6.2</td>\n",
              "      <td>3415</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>512</th>\n",
              "      <td>507</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>D</td>\n",
              "      <td>Aina</td>\n",
              "      <td>5.0</td>\n",
              "      <td>18.3</td>\n",
              "      <td>0.63</td>\n",
              "      <td>2.25</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>483</td>\n",
              "      <td>94.1</td>\n",
              "      <td>128</td>\n",
              "      <td>3.7</td>\n",
              "      <td>2996</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>435</th>\n",
              "      <td>430</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>F</td>\n",
              "      <td>Haaland</td>\n",
              "      <td>14.0</td>\n",
              "      <td>18.1</td>\n",
              "      <td>21.90</td>\n",
              "      <td>2.04</td>\n",
              "      <td>22</td>\n",
              "      <td>3</td>\n",
              "      <td>795</td>\n",
              "      <td>281.8</td>\n",
              "      <td>181</td>\n",
              "      <td>5.8</td>\n",
              "      <td>2736</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-01dcc7cd-7315-4cc8-8302-9907ebbf5016')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-01dcc7cd-7315-4cc8-8302-9907ebbf5016 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-01dcc7cd-7315-4cc8-8302-9907ebbf5016');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-34988a3c-8616-4dd3-850f-f184dc10e1bf\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-34988a3c-8616-4dd3-850f-f184dc10e1bf')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-34988a3c-8616-4dd3-850f-f184dc10e1bf button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_25cd2ecf-e5fb-4328-b2d6-89039baf99e5\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('Mostselected')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_25cd2ecf-e5fb-4328-b2d6-89039baf99e5 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('Mostselected');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Mostselected",
              "summary": "{\n  \"name\": \"Mostselected\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 206,\n        \"min\": 1,\n        \"max\": 624,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          249,\n          119,\n          373\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"Tottenham\",\n          \"Chelsea\",\n          \"Manchester United\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pos\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"M\",\n          \"G\",\n          \"F\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Jo\\u00e3o Pedro\",\n          \"Mbeumo\",\n          \"Virgil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.9059829390595646,\n        \"min\": 4.5,\n        \"max\": 14.5,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          5.0,\n          5.5,\n          7.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"selected_by_percent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.376245285563028,\n        \"min\": 18.1,\n        \"max\": 57.2,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          57.2,\n          18.4,\n          19.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"expected_goals\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.034888136646398,\n        \"min\": 0.0,\n        \"max\": 24.7,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          8.96,\n          24.7,\n          1.18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"expected_assists\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.123724623957078,\n        \"min\": 0.0,\n        \"max\": 9.53,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          3.1,\n          8.99,\n          1.21\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"goals_scored\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 0,\n        \"max\": 29,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          20,\n          8,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"assists\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 0,\n        \"max\": 18,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          7,\n          6,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 295,\n        \"min\": 0,\n        \"max\": 1133,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          516,\n          496,\n          534\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ict_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 125.15243116422384,\n        \"min\": 0.0,\n        \"max\": 476.0,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          166.0,\n          152.7,\n          214.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"points\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 79,\n        \"min\": 0,\n        \"max\": 344,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          126,\n          118,\n          161\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"points_per_game\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0463317629872546,\n        \"min\": 0.0,\n        \"max\": 9.1,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          3.0,\n          5.7,\n          4.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"minutes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1054,\n        \"min\": 0,\n        \"max\": 3420,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          1946,\n          3154,\n          3115\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"apppoint\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2,\n        \"max\": 2,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"assistvalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 3,\n        \"max\": 3,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ax = sns.barplot(x='selected_by_percent', y='name', data=Mostselected, hue='pos', dodge=False)\n",
        "sns.set(rc={'figure.figsize':(11.7,8.27)})\n",
        "plt.title(\"Most Selected\")\n",
        "plt.xticks(rotation=90)\n",
        "plt.ylabel(\"selected_by_percent\")\n",
        "plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n",
        "plt.gcf().set_size_inches(30,10)"
      ],
      "metadata": {
        "id": "8PBz92opthgG",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 600
        },
        "outputId": "fd1dde50-132a-4f88-f3b3-06b2aeb393d9"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 3000x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "import plotly.graph_objects as go"
      ],
      "metadata": {
        "id": "t81EQEbg_2jQ"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "id": "ace4f75a",
        "outputId": "93a38d41-b9b2-4011-e278-2da09531adb3"
      },
      "source": [
        "import io\n",
        "\n",
        "markdown_table = \"\"\"Team,Opta Rating\n",
        "Arsenal,99.5\n",
        "Aston Villa,95.3\n",
        "Bournemouth,92\n",
        "Brentford,91.7\n",
        "Brighton,93.5\n",
        "Burnley,89\n",
        "Chelsea,96.1\n",
        "Crystal Palace,94.2\n",
        "Everton,90.9\n",
        "Fulham,90.4\n",
        "Leeds,89.3\n",
        "Liverpool,100\n",
        "Manchester City,98.1\n",
        "Manchester United,91.1\n",
        "Newcastle United,95.3\n",
        "Nottingham Forest,91.6\n",
        "Sunderland,82.3\n",
        "Tottenham,90.6\n",
        "West Ham,89.3\n",
        "Wolverhampton Wanderers,88.8\n",
        "\"\"\"\n",
        "\n",
        "optaratings = pd.read_csv(io.StringIO(markdown_table))\n",
        "optaratings['Opta Rating'] = optaratings['Opta Rating'].astype(float)\n",
        "optaratings"
      ],
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       Team  Opta Rating\n",
              "0                   Arsenal         99.5\n",
              "1               Aston Villa         95.3\n",
              "2               Bournemouth         92.0\n",
              "3                 Brentford         91.7\n",
              "4                  Brighton         93.5\n",
              "5                   Burnley         89.0\n",
              "6                   Chelsea         96.1\n",
              "7            Crystal Palace         94.2\n",
              "8                   Everton         90.9\n",
              "9                    Fulham         90.4\n",
              "10                    Leeds         89.3\n",
              "11                Liverpool        100.0\n",
              "12          Manchester City         98.1\n",
              "13        Manchester United         91.1\n",
              "14         Newcastle United         95.3\n",
              "15        Nottingham Forest         91.6\n",
              "16               Sunderland         82.3\n",
              "17                Tottenham         90.6\n",
              "18                 West Ham         89.3\n",
              "19  Wolverhampton Wanderers         88.8"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ea87d3f1-3587-448f-ab58-5d2faf820623\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Team</th>\n",
              "      <th>Opta Rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Arsenal</td>\n",
              "      <td>99.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>95.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>92.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Brentford</td>\n",
              "      <td>91.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Brighton</td>\n",
              "      <td>93.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Burnley</td>\n",
              "      <td>89.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Chelsea</td>\n",
              "      <td>96.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>94.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Everton</td>\n",
              "      <td>90.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Fulham</td>\n",
              "      <td>90.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Leeds</td>\n",
              "      <td>89.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Liverpool</td>\n",
              "      <td>100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Manchester City</td>\n",
              "      <td>98.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Manchester United</td>\n",
              "      <td>91.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>95.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>91.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Sunderland</td>\n",
              "      <td>82.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Tottenham</td>\n",
              "      <td>90.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>West Ham</td>\n",
              "      <td>89.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>88.8</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea87d3f1-3587-448f-ab58-5d2faf820623')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ea87d3f1-3587-448f-ab58-5d2faf820623 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ea87d3f1-3587-448f-ab58-5d2faf820623');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b655c4e3-d958-48e5-adf5-562d6c3b2a52\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b655c4e3-d958-48e5-adf5-562d6c3b2a52')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b655c4e3-d958-48e5-adf5-562d6c3b2a52 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_73938460-5cf6-42fa-afe2-f442e013f9c7\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('optaratings')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_73938460-5cf6-42fa-afe2-f442e013f9c7 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('optaratings');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "optaratings",
              "summary": "{\n  \"name\": \"optaratings\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"Team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Arsenal\",\n          \"Tottenham\",\n          \"Nottingham Forest\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Opta Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.191407250177689,\n        \"min\": 82.3,\n        \"max\": 100.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          99.5,\n          95.3,\n          90.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        },
        "id": "56ab9acf",
        "outputId": "cf9db0e1-0d69-4b15-f765-912d894b1036"
      },
      "source": [
        "long_df_data = []\n",
        "epsilon = 1e-9 # Small value to prevent division by zero\n",
        "\n",
        "# Get all unique teams\n",
        "all_teams = optaratings['Team'].unique()\n",
        "# Get all unique events from the fixtures data\n",
        "all_events = gwfixtures_with_opta['event'].unique()\n",
        "\n",
        "# Create a base DataFrame with all combinations of teams and events\n",
        "base_long_df = pd.DataFrame([(team, event) for team in all_teams for event in all_events], columns=['Team', 'event'])\n",
        "\n",
        "# Add print statements to check the base DataFrame\n",
        "print(f\"Number of unique teams in base_long_df: {base_long_df['Team'].nunique()}\")\n",
        "print(f\"Number of unique events in base_long_df: {base_long_df['event'].nunique()}\")\n",
        "print(f\"Shape of base_long_df: {base_long_df.shape}\")\n",
        "\n",
        "\n",
        "# Calculate adjustment factors for teams with fixtures and store them in a temporary list\n",
        "fixture_adjustments_data = []\n",
        "for index, row in gwfixtures_with_opta.iterrows():\n",
        "    home_team = row['team_h']\n",
        "    home_event = row['event']\n",
        "    home_opta = row['Home Opta']\n",
        "    away_opta = row['Away Opta']\n",
        "\n",
        "    rating_difference = home_opta - away_opta\n",
        "    sensitivity = 0.02\n",
        "\n",
        "    home_adjustment_factor = 1 + (rating_difference * sensitivity)\n",
        "    away_adjustment_factor = 1 - (rating_difference * sensitivity)\n",
        "\n",
        "    fixture_adjustments_data.append([home_team, home_event, home_adjustment_factor])\n",
        "    fixture_adjustments_data.append([away_team, away_event, away_adjustment_factor])\n",
        "\n",
        "# Convert the list of fixture adjustments to a DataFrame\n",
        "fixture_adjustments_df = pd.DataFrame(fixture_adjustments_data, columns=['Team', 'event', 'Adjustment factor'])\n",
        "\n",
        "# Drop duplicates in fixture_adjustments_df based on Team and event\n",
        "fixture_adjustments_df = fixture_adjustments_df.drop_duplicates(subset=['Team', 'event'])\n",
        "\n",
        "\n",
        "# Merge the calculated adjustments with the base DataFrame. This will keep all team-event combinations\n",
        "# and add the calculated adjustment factor where a fixture exists.\n",
        "long_df = pd.merge(\n",
        "    base_long_df,\n",
        "    fixture_adjustments_df,\n",
        "    on=['Team', 'event'],\n",
        "    how='left'\n",
        ")\n",
        "\n",
        "# Fill missing adjustment factors (for teams without fixtures in an event) with 1.0\n",
        "long_df['Adjustment factor'] = long_df['Adjustment factor'].fillna(1.0)\n",
        "\n",
        "long_df"
      ],
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of unique teams in base_long_df: 20\n",
            "Number of unique events in base_long_df: 38\n",
            "Shape of base_long_df: (760, 2)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        Team  event  Adjustment factor\n",
              "0                    Arsenal      1              1.000\n",
              "1                    Arsenal      2              1.204\n",
              "2                    Arsenal      3              1.000\n",
              "3                    Arsenal      4              1.158\n",
              "4                    Arsenal      5              1.028\n",
              "..                       ...    ...                ...\n",
              "755  Wolverhampton Wanderers     34              0.964\n",
              "756  Wolverhampton Wanderers     35              1.130\n",
              "757  Wolverhampton Wanderers     36              1.000\n",
              "758  Wolverhampton Wanderers     37              0.968\n",
              "759  Wolverhampton Wanderers     38              1.000\n",
              "\n",
              "[760 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eae9def7-adf9-4122-8347-aa9b1030114c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Team</th>\n",
              "      <th>event</th>\n",
              "      <th>Adjustment factor</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Arsenal</td>\n",
              "      <td>1</td>\n",
              "      <td>1.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Arsenal</td>\n",
              "      <td>2</td>\n",
              "      <td>1.204</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Arsenal</td>\n",
              "      <td>3</td>\n",
              "      <td>1.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Arsenal</td>\n",
              "      <td>4</td>\n",
              "      <td>1.158</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Arsenal</td>\n",
              "      <td>5</td>\n",
              "      <td>1.028</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>755</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>34</td>\n",
              "      <td>0.964</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>756</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>35</td>\n",
              "      <td>1.130</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>757</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>36</td>\n",
              "      <td>1.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>758</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>37</td>\n",
              "      <td>0.968</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>759</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>38</td>\n",
              "      <td>1.000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>760 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eae9def7-adf9-4122-8347-aa9b1030114c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-eae9def7-adf9-4122-8347-aa9b1030114c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-eae9def7-adf9-4122-8347-aa9b1030114c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b25069c2-3b6d-4b0c-a21e-bccb3a561b85\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b25069c2-3b6d-4b0c-a21e-bccb3a561b85')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b25069c2-3b6d-4b0c-a21e-bccb3a561b85 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_977873b4-d6e4-4775-97bd-797c252521f0\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('long_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_977873b4-d6e4-4775-97bd-797c252521f0 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('long_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "long_df",
              "summary": "{\n  \"name\": \"long_df\",\n  \"rows\": 760,\n  \"fields\": [\n    {\n      \"column\": \"Team\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Arsenal\",\n          \"Tottenham\",\n          \"Nottingham Forest\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"event\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 1,\n        \"max\": 38,\n        \"num_unique_values\": 38,\n        \"samples\": [\n          34,\n          37,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adjustment factor\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08409919281433531,\n        \"min\": 0.6459999999999999,\n        \"max\": 1.354,\n        \"num_unique_values\": 207,\n        \"samples\": [\n          1.186,\n          1.156,\n          1.0619999999999998\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 528
        },
        "id": "79598c51",
        "outputId": "5abb54c6-77f6-48a8-e08d-181105accc0e"
      },
      "source": [
        "master_with_xp = master.copy()\n",
        "\n",
        "for gw in range(1, 6):\n",
        "    # Filter long_df for the current gameweek\n",
        "    long_df_gw = long_df[long_df['event'] == gw][['Team', 'Adjustment factor']]\n",
        "\n",
        "    # Merge master with long_df_gw to get the adjustment factor for each player's team\n",
        "    master_with_xp = pd.merge(\n",
        "        master_with_xp,\n",
        "        long_df_gw,\n",
        "        left_on='team',\n",
        "        right_on='Team',\n",
        "        how='left'\n",
        "    )\n",
        "\n",
        "    # Calculate the expected points for the current gameweek\n",
        "    master_with_xp[f'GW{gw} XP'] = master_with_xp['points_per_game'] * master_with_xp['Adjustment factor']\n",
        "\n",
        "    # Drop the temporary columns used for merging\n",
        "    master_with_xp = master_with_xp.drop(columns=['Team', 'Adjustment factor'])\n",
        "\n",
        "master_with_xp"
      ],
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id                     team pos          name  cost  \\\n",
              "0      1                  Arsenal   G          Raya   5.5   \n",
              "1      2                  Arsenal   G  Arrizabalaga   4.5   \n",
              "2      3                  Arsenal   G          Hein   4.0   \n",
              "3      4                  Arsenal   G       Setford   4.0   \n",
              "4      5                  Arsenal   D       Gabriel   6.0   \n",
              "..   ...                      ...  ..           ...   ...   \n",
              "661  655  Wolverhampton Wanderers   F   Fábio Silva   5.0   \n",
              "662  656  Wolverhampton Wanderers   F     Kalajdžić   5.0   \n",
              "663  657  Wolverhampton Wanderers   F       Chiwome   4.5   \n",
              "664  658  Wolverhampton Wanderers   F        Fraser   4.5   \n",
              "665  663  Wolverhampton Wanderers   M       J.Arias   5.5   \n",
              "\n",
              "     selected_by_percent  expected_goals  expected_assists  goals_scored  \\\n",
              "0                   18.5            0.00              0.03             0   \n",
              "1                    1.0            0.06              0.03             0   \n",
              "2                    0.6            0.00              0.00             0   \n",
              "3                    0.2            0.00              0.00             0   \n",
              "4                   26.1            2.70              1.21             3   \n",
              "..                   ...             ...               ...           ...   \n",
              "661                  0.7            0.00              0.00             0   \n",
              "662                  0.2            0.00              0.00             0   \n",
              "663                  0.1            0.00              0.00             0   \n",
              "664                  2.9            0.00              0.00             0   \n",
              "665                  1.0            0.00              0.00             0   \n",
              "\n",
              "     assists  ...  points  points_per_game  minutes  apppoint  assistvalue  \\\n",
              "0          0  ...     142              3.7     3420         2            3   \n",
              "1          0  ...     106              3.4     2790         2            3   \n",
              "2          0  ...       0              0.0        0         2            3   \n",
              "3          0  ...       0              0.0        0         2            3   \n",
              "4          2  ...     117              4.2     2363         2            3   \n",
              "..       ...  ...     ...              ...      ...       ...          ...   \n",
              "661        0  ...       0              0.0        0         2            3   \n",
              "662        0  ...       0              0.0        0         2            3   \n",
              "663        0  ...       0              0.0        0         2            3   \n",
              "664        0  ...       0              0.0        0         2            3   \n",
              "665        0  ...       0              0.0        0         2            3   \n",
              "\n",
              "     GW1 XP  GW2 XP  GW3 XP  GW4 XP  GW5 XP  \n",
              "0       3.7  4.4548     3.7  4.2846  3.8036  \n",
              "1       3.4  4.0936     3.4  3.9372  3.4952  \n",
              "2       0.0  0.0000     0.0  0.0000  0.0000  \n",
              "3       0.0  0.0000     0.0  0.0000  0.0000  \n",
              "4       4.2  5.0568     4.2  4.8636  4.3176  \n",
              "..      ...     ...     ...     ...     ...  \n",
              "661     0.0  0.0000     0.0  0.0000  0.0000  \n",
              "662     0.0  0.0000     0.0  0.0000  0.0000  \n",
              "663     0.0  0.0000     0.0  0.0000  0.0000  \n",
              "664     0.0  0.0000     0.0  0.0000  0.0000  \n",
              "665     0.0  0.0000     0.0  0.0000  0.0000  \n",
              "\n",
              "[666 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b408fefe-1a82-4618-8b63-52a8358c264b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>name</th>\n",
              "      <th>cost</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>expected_goals</th>\n",
              "      <th>expected_assists</th>\n",
              "      <th>goals_scored</th>\n",
              "      <th>assists</th>\n",
              "      <th>...</th>\n",
              "      <th>points</th>\n",
              "      <th>points_per_game</th>\n",
              "      <th>minutes</th>\n",
              "      <th>apppoint</th>\n",
              "      <th>assistvalue</th>\n",
              "      <th>GW1 XP</th>\n",
              "      <th>GW2 XP</th>\n",
              "      <th>GW3 XP</th>\n",
              "      <th>GW4 XP</th>\n",
              "      <th>GW5 XP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>G</td>\n",
              "      <td>Raya</td>\n",
              "      <td>5.5</td>\n",
              "      <td>18.5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>142</td>\n",
              "      <td>3.7</td>\n",
              "      <td>3420</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3.7</td>\n",
              "      <td>4.4548</td>\n",
              "      <td>3.7</td>\n",
              "      <td>4.2846</td>\n",
              "      <td>3.8036</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>G</td>\n",
              "      <td>Arrizabalaga</td>\n",
              "      <td>4.5</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.06</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>106</td>\n",
              "      <td>3.4</td>\n",
              "      <td>2790</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3.4</td>\n",
              "      <td>4.0936</td>\n",
              "      <td>3.4</td>\n",
              "      <td>3.9372</td>\n",
              "      <td>3.4952</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>G</td>\n",
              "      <td>Hein</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>G</td>\n",
              "      <td>Setford</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>D</td>\n",
              "      <td>Gabriel</td>\n",
              "      <td>6.0</td>\n",
              "      <td>26.1</td>\n",
              "      <td>2.70</td>\n",
              "      <td>1.21</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>117</td>\n",
              "      <td>4.2</td>\n",
              "      <td>2363</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>4.2</td>\n",
              "      <td>5.0568</td>\n",
              "      <td>4.2</td>\n",
              "      <td>4.8636</td>\n",
              "      <td>4.3176</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>661</th>\n",
              "      <td>655</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>F</td>\n",
              "      <td>Fábio Silva</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.7</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>662</th>\n",
              "      <td>656</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>F</td>\n",
              "      <td>Kalajdžić</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>663</th>\n",
              "      <td>657</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>F</td>\n",
              "      <td>Chiwome</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>664</th>\n",
              "      <td>658</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>F</td>\n",
              "      <td>Fraser</td>\n",
              "      <td>4.5</td>\n",
              "      <td>2.9</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>665</th>\n",
              "      <td>663</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>M</td>\n",
              "      <td>J.Arias</td>\n",
              "      <td>5.5</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>666 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b408fefe-1a82-4618-8b63-52a8358c264b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b408fefe-1a82-4618-8b63-52a8358c264b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b408fefe-1a82-4618-8b63-52a8358c264b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e74c4780-fcee-40ad-961a-a519e2dde9c2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e74c4780-fcee-40ad-961a-a519e2dde9c2')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e74c4780-fcee-40ad-961a-a519e2dde9c2 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_aa125d7e-2251-4547-97b7-1bf4a873b110\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('master_with_xp')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_aa125d7e-2251-4547-97b7-1bf4a873b110 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('master_with_xp');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "master_with_xp"
            }
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e816663b",
        "outputId": "fbcf82f1-4082-401b-cf95-72bbabccc35e"
      },
      "source": [
        "print(\"Unique teams in long_df:\")\n",
        "print(long_df['Team'].unique())"
      ],
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Unique teams in long_df:\n",
            "['Arsenal' 'Aston Villa' 'Bournemouth' 'Brentford' 'Brighton' 'Burnley'\n",
            " 'Chelsea' 'Crystal Palace' 'Everton' 'Fulham' 'Leeds' 'Liverpool'\n",
            " 'Manchester City' 'Manchester United' 'Newcastle United'\n",
            " 'Nottingham Forest' 'Sunderland' 'Tottenham' 'West Ham'\n",
            " 'Wolverhampton Wanderers']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "id": "8c2f5645",
        "outputId": "849d7ccc-ccfe-4baa-8e94-0ed1357c02f0"
      },
      "source": [
        "long_df_event1 = long_df[long_df['event'] == 1]\n",
        "long_df_event1"
      ],
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        Team  event  Adjustment factor\n",
              "0                    Arsenal      1              1.000\n",
              "38               Aston Villa      1              1.000\n",
              "76               Bournemouth      1              1.000\n",
              "114                Brentford      1              1.000\n",
              "152                 Brighton      1              1.000\n",
              "190                  Burnley      1              0.972\n",
              "228                  Chelsea      1              1.038\n",
              "266           Crystal Palace      1              1.000\n",
              "304                  Everton      1              1.000\n",
              "342                   Fulham      1              1.000\n",
              "380                    Leeds      1              0.968\n",
              "418                Liverpool      1              1.166\n",
              "456          Manchester City      1              1.000\n",
              "494        Manchester United      1              0.832\n",
              "532         Newcastle United      1              1.000\n",
              "570        Nottingham Forest      1              0.962\n",
              "608               Sunderland      1              0.860\n",
              "646                Tottenham      1              0.972\n",
              "684                 West Ham      1              1.000\n",
              "722  Wolverhampton Wanderers      1              0.814"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a398ae11-b181-4933-93e1-74e439141ce1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Team</th>\n",
              "      <th>event</th>\n",
              "      <th>Adjustment factor</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Arsenal</td>\n",
              "      <td>1</td>\n",
              "      <td>1.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>1</td>\n",
              "      <td>1.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76</th>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>1</td>\n",
              "      <td>1.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>114</th>\n",
              "      <td>Brentford</td>\n",
              "      <td>1</td>\n",
              "      <td>1.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>152</th>\n",
              "      <td>Brighton</td>\n",
              "      <td>1</td>\n",
              "      <td>1.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>190</th>\n",
              "      <td>Burnley</td>\n",
              "      <td>1</td>\n",
              "      <td>0.972</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>228</th>\n",
              "      <td>Chelsea</td>\n",
              "      <td>1</td>\n",
              "      <td>1.038</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>266</th>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>1</td>\n",
              "      <td>1.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>304</th>\n",
              "      <td>Everton</td>\n",
              "      <td>1</td>\n",
              "      <td>1.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>342</th>\n",
              "      <td>Fulham</td>\n",
              "      <td>1</td>\n",
              "      <td>1.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>380</th>\n",
              "      <td>Leeds</td>\n",
              "      <td>1</td>\n",
              "      <td>0.968</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>418</th>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1</td>\n",
              "      <td>1.166</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>456</th>\n",
              "      <td>Manchester City</td>\n",
              "      <td>1</td>\n",
              "      <td>1.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>494</th>\n",
              "      <td>Manchester United</td>\n",
              "      <td>1</td>\n",
              "      <td>0.832</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>532</th>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>1</td>\n",
              "      <td>1.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>570</th>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>1</td>\n",
              "      <td>0.962</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>608</th>\n",
              "      <td>Sunderland</td>\n",
              "      <td>1</td>\n",
              "      <td>0.860</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>646</th>\n",
              "      <td>Tottenham</td>\n",
              "      <td>1</td>\n",
              "      <td>0.972</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>684</th>\n",
              "      <td>West Ham</td>\n",
              "      <td>1</td>\n",
              "      <td>1.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>722</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>1</td>\n",
              "      <td>0.814</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a398ae11-b181-4933-93e1-74e439141ce1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a398ae11-b181-4933-93e1-74e439141ce1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a398ae11-b181-4933-93e1-74e439141ce1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-efd6807e-2fed-40a6-825e-82c79f5e3ef5\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-efd6807e-2fed-40a6-825e-82c79f5e3ef5')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-efd6807e-2fed-40a6-825e-82c79f5e3ef5 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_1e61e931-3d3a-41fa-8d0b-d390aee654f4\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('long_df_event1')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_1e61e931-3d3a-41fa-8d0b-d390aee654f4 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('long_df_event1');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "long_df_event1",
              "summary": "{\n  \"name\": \"long_df_event1\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"Team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Arsenal\",\n          \"Tottenham\",\n          \"Nottingham Forest\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"event\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adjustment factor\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07497480278487952,\n        \"min\": 0.8140000000000001,\n        \"max\": 1.166,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.86\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "39be58de",
        "outputId": "2ead84e2-3833-4629-92b3-761b15a51dd0"
      },
      "source": [
        "long_df_event1 = long_df[long_df['event'] == 1]\n",
        "long_df_event1"
      ],
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       Team  event  Adjustment factor\n",
              "0                 Liverpool      1              1.166\n",
              "2               Aston Villa      1              1.000\n",
              "4                   Burnley      1              0.972\n",
              "6                 Tottenham      1              0.972\n",
              "8                Sunderland      1              0.860\n",
              "10  Wolverhampton Wanderers      1              0.814\n",
              "12                  Chelsea      1              1.038\n",
              "14        Nottingham Forest      1              0.962\n",
              "16        Manchester United      1              0.832\n",
              "18                    Leeds      1              0.968"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bcff1f30-7911-4dd7-90a9-f7612c6f1f46\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Team</th>\n",
              "      <th>event</th>\n",
              "      <th>Adjustment factor</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Liverpool</td>\n",
              "      <td>1</td>\n",
              "      <td>1.166</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>1</td>\n",
              "      <td>1.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Burnley</td>\n",
              "      <td>1</td>\n",
              "      <td>0.972</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Tottenham</td>\n",
              "      <td>1</td>\n",
              "      <td>0.972</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Sunderland</td>\n",
              "      <td>1</td>\n",
              "      <td>0.860</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>1</td>\n",
              "      <td>0.814</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Chelsea</td>\n",
              "      <td>1</td>\n",
              "      <td>1.038</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>1</td>\n",
              "      <td>0.962</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Manchester United</td>\n",
              "      <td>1</td>\n",
              "      <td>0.832</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Leeds</td>\n",
              "      <td>1</td>\n",
              "      <td>0.968</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bcff1f30-7911-4dd7-90a9-f7612c6f1f46')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bcff1f30-7911-4dd7-90a9-f7612c6f1f46 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bcff1f30-7911-4dd7-90a9-f7612c6f1f46');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-3537b26b-fc95-401e-9831-cef092b18778\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3537b26b-fc95-401e-9831-cef092b18778')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-3537b26b-fc95-401e-9831-cef092b18778 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_2ddf4722-9ea9-48bc-b7b7-6e64abf9e3a9\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('long_df_event1')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2ddf4722-9ea9-48bc-b7b7-6e64abf9e3a9 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('long_df_event1');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "long_df_event1",
              "summary": "{\n  \"name\": \"long_df_event1\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"Team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Manchester United\",\n          \"Aston Villa\",\n          \"Wolverhampton Wanderers\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"event\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adjustment factor\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10442988078131658,\n        \"min\": 0.8140000000000001,\n        \"max\": 1.166,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.8319999999999999\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f0ed73ac",
        "outputId": "bd150ef6-1e72-4c7f-ee00-77dadfedad14"
      },
      "source": [
        "fixtures_event1 = gwfixtures[gwfixtures['event'] == 1]\n",
        "print(f\"Number of fixtures in Event 1: {len(fixtures_event1)}\")"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of fixtures in Event 1: 10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fab1c862",
        "outputId": "90b70c17-4321-4a51-a36e-cb174b20d6d7"
      },
      "source": [
        "!pip install pulp"
      ],
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pulp\n",
            "  Downloading pulp-3.2.1-py3-none-any.whl.metadata (6.9 kB)\n",
            "Downloading pulp-3.2.1-py3-none-any.whl (16.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m16.4/16.4 MB\u001b[0m \u001b[31m73.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pulp\n",
            "Successfully installed pulp-3.2.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 693
        },
        "id": "8ec33ec9",
        "outputId": "29296e70-cb17-490f-e6d1-4ed9fcf0d259"
      },
      "source": [
        "from pulp import *\n",
        "\n",
        "# Create a LP problem\n",
        "prob = LpProblem(\"Fantasy Football Team Selection\", LpMaximize)\n",
        "\n",
        "# Create a list of players\n",
        "players = master_with_xp.to_dict('records')\n",
        "\n",
        "# Create decision variables for each player (1 if selected, 0 otherwise)\n",
        "player_vars = LpVariable.dicts(\"player\", range(len(players)), 0, 1, LpBinary)\n",
        "\n",
        "# Objective function: Maximize total GW1 XP\n",
        "prob += lpSum([players[i]['GW1 XP'] * player_vars[i] for i in range(len(players))]), \"Total GW1 XP\"\n",
        "\n",
        "# Constraints\n",
        "\n",
        "# 1. Total cost cannot exceed 100\n",
        "prob += lpSum([players[i]['cost'] * player_vars[i] for i in range(len(players))]) <= 100, \"Total Cost\"\n",
        "\n",
        "# 2. Number of players per position\n",
        "prob += lpSum([player_vars[i] for i in range(len(players)) if players[i]['pos'] == 'G']) == 2, \"Goalkeepers\"\n",
        "prob += lpSum([player_vars[i] for i in range(len(players)) if players[i]['pos'] == 'D']) == 5, \"Defenders\"\n",
        "prob += lpSum([player_vars[i] for i in range(len(players)) if players[i]['pos'] == 'M']) == 5, \"Midfielders\"\n",
        "prob += lpSum([player_vars[i] for i in range(len(players)) if players[i]['pos'] == 'F']) == 3, \"Forwards\"\n",
        "\n",
        "# 3. Maximum 3 players from the same team\n",
        "teams = master_with_xp['team'].unique()\n",
        "for team in teams:\n",
        "    prob += lpSum([player_vars[i] for i in range(len(players)) if players[i]['team'] == team]) <= 3, f\"Max 3 players from {team}\"\n",
        "\n",
        "# Solve the problem\n",
        "prob.solve()\n",
        "\n",
        "# Print the status of the solution\n",
        "print(\"Status:\", LpStatus[prob.status])\n",
        "\n",
        "# Create a list of selected players\n",
        "selected_players = []\n",
        "for i in range(len(players)):\n",
        "    if player_vars[i].varValue == 1:\n",
        "        selected_players.append(players[i])\n",
        "\n",
        "# Create a DataFrame of the optimal team\n",
        "optimal_team_df = pd.DataFrame(selected_players)\n",
        "\n",
        "# Display the optimal team and total GW1 XP\n",
        "print(\"\\nOptimal Team:\")\n",
        "display(optimal_team_df[['name', 'team', 'pos', 'cost', 'GW1 XP']])\n",
        "\n",
        "print(f\"\\nTotal GW1 XP for Optimal Team: {value(prob.objective)}\")\n",
        "print(f\"Total Cost for Optimal Team: {optimal_team_df['cost'].sum()}\")"
      ],
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Status: Optimal\n",
            "\n",
            "Optimal Team:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/pulp/pulp.py:1455: UserWarning:\n",
            "\n",
            "Spaces are not permitted in the name. Converted to '_'\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "         name               team pos  cost   GW1 XP\n",
              "0     Gabriel            Arsenal   D   6.0   4.2000\n",
              "1    Kluivert          Brentford   M   7.0   4.6000\n",
              "2    Kelleher           Brighton   G   4.5   4.5000\n",
              "3       Wissa           Brighton   F   7.5   5.3000\n",
              "4    Chalobah            Chelsea   D   5.0   3.8406\n",
              "5       Keane            Everton   D   4.5   3.4000\n",
              "6      McNeil            Everton   M   6.0   4.4000\n",
              "7      Virgil          Liverpool   D   6.0   4.5474\n",
              "8     M.Salah          Liverpool   M  14.5  10.6106\n",
              "9   Luis Díaz          Liverpool   M   8.0   5.9466\n",
              "10   Dúbravka   Newcastle United   G   4.0   4.4000\n",
              "11   J.Murphy   Newcastle United   M   6.5   4.5000\n",
              "12       Aina  Nottingham Forest   D   5.0   3.5594\n",
              "13       Wood  Nottingham Forest   F   7.5   5.3872\n",
              "14      Bowen           West Ham   F   8.0   5.7000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e701199d-9bf1-4672-811f-c41f7277d713\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>cost</th>\n",
              "      <th>GW1 XP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Gabriel</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>D</td>\n",
              "      <td>6.0</td>\n",
              "      <td>4.2000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Kluivert</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>M</td>\n",
              "      <td>7.0</td>\n",
              "      <td>4.6000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Kelleher</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>G</td>\n",
              "      <td>4.5</td>\n",
              "      <td>4.5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Wissa</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>F</td>\n",
              "      <td>7.5</td>\n",
              "      <td>5.3000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Chalobah</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>D</td>\n",
              "      <td>5.0</td>\n",
              "      <td>3.8406</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Keane</td>\n",
              "      <td>Everton</td>\n",
              "      <td>D</td>\n",
              "      <td>4.5</td>\n",
              "      <td>3.4000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>McNeil</td>\n",
              "      <td>Everton</td>\n",
              "      <td>M</td>\n",
              "      <td>6.0</td>\n",
              "      <td>4.4000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Virgil</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>D</td>\n",
              "      <td>6.0</td>\n",
              "      <td>4.5474</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>M.Salah</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>M</td>\n",
              "      <td>14.5</td>\n",
              "      <td>10.6106</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Luis Díaz</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>M</td>\n",
              "      <td>8.0</td>\n",
              "      <td>5.9466</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Dúbravka</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>G</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.4000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>J.Murphy</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>M</td>\n",
              "      <td>6.5</td>\n",
              "      <td>4.5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Aina</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>D</td>\n",
              "      <td>5.0</td>\n",
              "      <td>3.5594</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Wood</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>F</td>\n",
              "      <td>7.5</td>\n",
              "      <td>5.3872</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Bowen</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>F</td>\n",
              "      <td>8.0</td>\n",
              "      <td>5.7000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e701199d-9bf1-4672-811f-c41f7277d713')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e701199d-9bf1-4672-811f-c41f7277d713 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e701199d-9bf1-4672-811f-c41f7277d713');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-87b7501a-960e-4488-93f6-f953c1ea9912\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-87b7501a-960e-4488-93f6-f953c1ea9912')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-87b7501a-960e-4488-93f6-f953c1ea9912 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"print(f\\\"Total Cost for Optimal Team: {optimal_team_df['cost']\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"Luis D\\u00edaz\",\n          \"J.Murphy\",\n          \"Gabriel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Nottingham Forest\",\n          \"Brentford\",\n          \"Liverpool\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pos\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"M\",\n          \"F\",\n          \"D\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.5331140255951103,\n        \"min\": 4.0,\n        \"max\": 14.5,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          4.0,\n          7.0,\n          14.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GW1 XP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7177312852658158,\n        \"min\": 3.4,\n        \"max\": 10.610599999999998,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          5.387199999999999,\n          5.946599999999999,\n          4.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Total GW1 XP for Optimal Team: 74.89179999999999\n",
            "Total Cost for Optimal Team: 100.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "25f24c6a"
      },
      "source": [
        "# Task\n",
        "Using the `master_with_xp` dataframe, find an optimal team of 15 players with a total cost not exceeding 100, no more than 3 players from the same team, 2 goalkeepers, 5 defenders, 5 midfielders, and 3 forwards. From this 15-player squad, select a starting 11 consisting of 1 goalkeeper, at least 3 defenders, at least 3 midfielders, and 1 forward to maximize the sum of the 'GW1 XP' values for these 11 players."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2feb874e"
      },
      "source": [
        "## Define lp problem\n",
        "\n",
        "### Subtask:\n",
        "Set up the linear programming problem to maximize the total expected points of the starting 11.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6fee814e"
      },
      "source": [
        "**Reasoning**:\n",
        "Import necessary classes from pulp and create the LP problem instance as instructed.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7c110d6b",
        "outputId": "e0c09c87-217e-47c6-cb42-2943e1a9972e"
      },
      "source": [
        "from pulp import LpProblem, LpMaximize\n",
        "\n",
        "# Create a LP problem\n",
        "prob = LpProblem(\"Fantasy Football Team Selection\", LpMaximize)"
      ],
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/pulp/pulp.py:1455: UserWarning:\n",
            "\n",
            "Spaces are not permitted in the name. Converted to '_'\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6f309855"
      },
      "source": [
        "**Reasoning**:\n",
        "Define decision variables for each player to indicate selection for the 15-player squad and for the starting 11, and define the objective function to maximize the total GW1 XP of the starting 11.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oRHRwS6rwKMZ",
        "outputId": "93be60dc-e8a2-49a7-d303-5d156aaeb56c"
      },
      "source": [
        "# Create a list of players\n",
        "players = master_with_xp.to_dict('records')\n",
        "\n",
        "# Create decision variables for each player (1 if selected for the 15-player squad, 0 otherwise)\n",
        "squad_vars = LpVariable.dicts(\"squad\", range(len(players)), 0, 1, LpBinary)\n",
        "\n",
        "# Create decision variables for each player (1 if selected for the starting 11, 0 otherwise)\n",
        "starting_vars = LpVariable.dicts(\"starting\", range(len(players)), 0, 1, LpBinary)\n",
        "\n",
        "\n",
        "# Objective function: Maximize total GW1 to GW5 XP for the starting 11\n",
        "prob += lpSum([(players[i]['GW1 XP'] + players[i]['GW2 XP'] + players[i]['GW3 XP'] + players[i]['GW4 XP'] + players[i]['GW5 XP']) * starting_vars[i] for i in range(len(players))]), \"Total GW1-5 XP Starting 11\""
      ],
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/pulp/pulp.py:1831: UserWarning:\n",
            "\n",
            "Overwriting previously set objective.\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4fa05daf"
      },
      "source": [
        "**Reasoning**:\n",
        "Add constraints to the LP problem for the 15-player squad: total number of players, maximum cost, and number of players per position.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "00c3c57f"
      },
      "source": [
        "# Constraints for the 15-player squad\n",
        "\n",
        "# 1. Total number of players in the squad must be 15\n",
        "prob += lpSum([squad_vars[i] for i in range(len(players))]) == 15, \"Total Squad Size\"\n",
        "\n",
        "# 2. Total cost of the squad cannot exceed 100\n",
        "prob += lpSum([players[i]['cost'] * squad_vars[i] for i in range(len(players))]) <= 100, \"Total Squad Cost\"\n",
        "\n",
        "# 3. Number of players per position in the squad\n",
        "prob += lpSum([squad_vars[i] for i in range(len(players)) if players[i]['pos'] == 'G']) == 2, \"Squad Goalkeepers\"\n",
        "prob += lpSum([squad_vars[i] for i in range(len(players)) if players[i]['pos'] == 'D']) == 5, \"Squad Defenders\"\n",
        "prob += lpSum([squad_vars[i] for i in range(len(players)) if players[i]['pos'] == 'M']) == 5, \"Squad Midfielders\"\n",
        "prob += lpSum([squad_vars[i] for i in range(len(players)) if players[i]['pos'] == 'F']) == 3, \"Squad Forwards\""
      ],
      "execution_count": 80,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0d189f73"
      },
      "source": [
        "**Reasoning**:\n",
        "Add the constraint for the maximum number of players from the same team in the 15-player squad.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5296c0bd"
      },
      "source": [
        "# 4. Maximum 3 players from the same team in the squad\n",
        "teams = master_with_xp['team'].unique()\n",
        "for team in teams:\n",
        "    prob += lpSum([squad_vars[i] for i in range(len(players)) if players[i]['team'] == team]) <= 3, f\"Max 3 players from {team} in Squad\""
      ],
      "execution_count": 81,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "63c05c48"
      },
      "source": [
        "**Reasoning**:\n",
        "Add constraints to link the starting 11 selection to the squad selection and enforce the positional requirements for the starting 11.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bba645a4"
      },
      "source": [
        "# Constraints for the Starting 11\n",
        "\n",
        "# 5. A player can only be in the starting 11 if they are in the 15-player squad\n",
        "for i in range(len(players)):\n",
        "    prob += starting_vars[i] <= squad_vars[i], f\"Player {i} in Starting 11 must be in Squad\"\n",
        "\n",
        "# 6. Total number of players in the starting 11 must be 11\n",
        "prob += lpSum([starting_vars[i] for i in range(len(players))]) == 11, \"Total Starting 11 Size\"\n",
        "\n",
        "# 7. Positional requirements for the starting 11\n",
        "prob += lpSum([starting_vars[i] for i in range(len(players)) if players[i]['pos'] == 'G']) == 1, \"Starting 11 Goalkeeper\"\n",
        "prob += lpSum([starting_vars[i] for i in range(len(players)) if players[i]['pos'] == 'D']) >= 3, \"Starting 11 Minimum Defenders\"\n",
        "prob += lpSum([starting_vars[i] for i in range(len(players)) if players[i]['pos'] == 'M']) >= 3, \"Starting 11 Minimum Midfielders\"\n",
        "prob += lpSum([starting_vars[i] for i in range(len(players)) if players[i]['pos'] == 'F']) >= 1, \"Starting 11 Minimum Forwards\""
      ],
      "execution_count": 82,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f80a4c29"
      },
      "source": [
        "## Solve the problem\n",
        "\n",
        "### Subtask:\n",
        "Solve the updated linear programming problem.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b60aca54"
      },
      "source": [
        "**Reasoning**:\n",
        "Solve the updated linear programming problem and print the status.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "cbf8982b",
        "outputId": "c9d8eed4-de1f-4374-c2a4-2b4d1f461a1d"
      },
      "source": [
        "# Solve the problem\n",
        "prob.solve()\n",
        "\n",
        "# Print the status of the solution\n",
        "print(\"Status:\", LpStatus[prob.status])"
      ],
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "error",
          "ename": "PulpSolverError",
          "evalue": "Pulp: Error while executing /usr/local/lib/python3.11/dist-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mPulpSolverError\u001b[0m                           Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-87-291356138.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Solve the problem\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Print the status of the solution\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Status:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mLpStatus\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mprob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatus\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pulp/pulp.py\u001b[0m in \u001b[0;36msolve\u001b[0;34m(self, solver, **kwargs)\u001b[0m\n\u001b[1;32m   2056\u001b[0m         \u001b[0;31m# time it\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2057\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartClock\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2058\u001b[0;31m         \u001b[0mstatus\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msolver\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mactualSolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2059\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstopClock\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2060\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrestoreObjective\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwasNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdummyVar\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pulp/apis/coin_api.py\u001b[0m in \u001b[0;36mactualSolve\u001b[0;34m(self, lp, **kwargs)\u001b[0m\n\u001b[1;32m    138\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mactualSolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlp\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mLpProblem\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m         \u001b[0;34m\"\"\"Solve a well formulated lp problem\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 140\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msolve_CBC\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    141\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mavailable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pulp/apis/coin_api.py\u001b[0m in \u001b[0;36msolve_CBC\u001b[0;34m(self, lp, use_mps)\u001b[0m\n\u001b[1;32m    229\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    230\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexists\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtmpSol\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 231\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mPulpSolverError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Pulp: Error while executing \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    232\u001b[0m         (\n\u001b[1;32m    233\u001b[0m             \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mPulpSolverError\u001b[0m: Pulp: Error while executing /usr/local/lib/python3.11/dist-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4ec80454"
      },
      "source": [
        "**Reasoning**:\n",
        "Create and display DataFrames for the optimal squad and starting 11, then report the total objective value and cost.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "c4b38cf6",
        "outputId": "a73162c4-a675-4664-f8d9-d796cd179bd1"
      },
      "source": [
        "# Create a list of selected players for the squad and starting 11\n",
        "selected_squad_players = []\n",
        "selected_starting_players = []\n",
        "\n",
        "for i in range(len(players)):\n",
        "    if squad_vars[i].varValue == 1:\n",
        "        selected_squad_players.append(players[i])\n",
        "    if starting_vars[i].varValue == 1:\n",
        "        selected_starting_players.append(players[i])\n",
        "\n",
        "# Create DataFrames for the optimal squad and starting 11\n",
        "optimal_squad_df = pd.DataFrame(selected_squad_players)\n",
        "optimal_starting_df = pd.DataFrame(selected_starting_players)\n",
        "\n",
        "# Display the optimal squad and starting 11\n",
        "print(\"\\nOptimal Squad (15 players):\")\n",
        "display(optimal_squad_df[['name', 'team', 'pos', 'cost', 'GW1 XP']])\n",
        "\n",
        "print(\"\\nOptimal Starting 11:\")\n",
        "display(optimal_starting_df[['name', 'team', 'pos', 'cost', 'GW1 XP']])\n",
        "\n",
        "# Print the total GW1 XP for the starting 11 and the total cost of the squad\n",
        "print(f\"\\nTotal GW1 XP for Optimal Starting 11: {value(prob.objective)}\")\n",
        "print(f\"Total Cost for Optimal Squad: {optimal_squad_df['cost'].sum()}\")"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Optimal Squad (15 players):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "         name               team pos  cost   GW1 XP\n",
              "0     Gabriel            Arsenal   D   6.0   4.2000\n",
              "1      Faivre          Brentford   M   4.5   0.0000\n",
              "2    Kelleher           Brighton   G   4.5   4.5000\n",
              "3       Wissa           Brighton   F   7.5   5.3000\n",
              "4    Chalobah            Chelsea   D   5.0   3.8406\n",
              "5      Palmer            Chelsea   M  10.5   6.0204\n",
              "6      McNeil            Everton   M   6.0   4.4000\n",
              "7      Cairns              Leeds   G   4.0   0.0000\n",
              "8      Virgil          Liverpool   D   6.0   4.5474\n",
              "9     M.Salah          Liverpool   M  14.5  10.6106\n",
              "10  Luis Díaz          Liverpool   M   8.0   5.9466\n",
              "11      Amass  Manchester United   D   4.0   0.6656\n",
              "12    Malacia  Manchester United   D   4.0   0.5824\n",
              "13       Wood  Nottingham Forest   F   7.5   5.3872\n",
              "14      Bowen           West Ham   F   8.0   5.7000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f3f150f8-142e-4b67-856e-c8b12d2dceb7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>cost</th>\n",
              "      <th>GW1 XP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Gabriel</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>D</td>\n",
              "      <td>6.0</td>\n",
              "      <td>4.2000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Faivre</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>M</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Kelleher</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>G</td>\n",
              "      <td>4.5</td>\n",
              "      <td>4.5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Wissa</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>F</td>\n",
              "      <td>7.5</td>\n",
              "      <td>5.3000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Chalobah</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>D</td>\n",
              "      <td>5.0</td>\n",
              "      <td>3.8406</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Palmer</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>M</td>\n",
              "      <td>10.5</td>\n",
              "      <td>6.0204</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>McNeil</td>\n",
              "      <td>Everton</td>\n",
              "      <td>M</td>\n",
              "      <td>6.0</td>\n",
              "      <td>4.4000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Cairns</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>G</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Virgil</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>D</td>\n",
              "      <td>6.0</td>\n",
              "      <td>4.5474</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>M.Salah</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>M</td>\n",
              "      <td>14.5</td>\n",
              "      <td>10.6106</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Luis Díaz</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>M</td>\n",
              "      <td>8.0</td>\n",
              "      <td>5.9466</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Amass</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>D</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.6656</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Malacia</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>D</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.5824</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Wood</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>F</td>\n",
              "      <td>7.5</td>\n",
              "      <td>5.3872</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Bowen</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>F</td>\n",
              "      <td>8.0</td>\n",
              "      <td>5.7000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f3f150f8-142e-4b67-856e-c8b12d2dceb7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f3f150f8-142e-4b67-856e-c8b12d2dceb7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f3f150f8-142e-4b67-856e-c8b12d2dceb7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f76ce144-cded-446d-ae38-88b8f7a303ad\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f76ce144-cded-446d-ae38-88b8f7a303ad')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f76ce144-cded-446d-ae38-88b8f7a303ad button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"print(f\\\"Total Cost for Optimal Squad: {optimal_squad_df['cost']\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"M.Salah\",\n          \"Amass\",\n          \"Gabriel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Nottingham Forest\",\n          \"Brentford\",\n          \"Leeds\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pos\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"M\",\n          \"F\",\n          \"D\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.876423043262156,\n        \"min\": 4.0,\n        \"max\": 14.5,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.5,\n          4.0,\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GW1 XP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8467530892646966,\n        \"min\": 0.0,\n        \"max\": 10.610599999999998,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          5.946599999999999,\n          0.5823999999999998,\n          4.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Optimal Starting 11:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "         name               team pos  cost   GW1 XP\n",
              "0     Gabriel            Arsenal   D   6.0   4.2000\n",
              "1    Kelleher           Brighton   G   4.5   4.5000\n",
              "2       Wissa           Brighton   F   7.5   5.3000\n",
              "3    Chalobah            Chelsea   D   5.0   3.8406\n",
              "4      Palmer            Chelsea   M  10.5   6.0204\n",
              "5      McNeil            Everton   M   6.0   4.4000\n",
              "6      Virgil          Liverpool   D   6.0   4.5474\n",
              "7     M.Salah          Liverpool   M  14.5  10.6106\n",
              "8   Luis Díaz          Liverpool   M   8.0   5.9466\n",
              "9        Wood  Nottingham Forest   F   7.5   5.3872\n",
              "10      Bowen           West Ham   F   8.0   5.7000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5a52738d-0d3c-4b8e-aeca-9c1b2996cdc5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>cost</th>\n",
              "      <th>GW1 XP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Gabriel</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>D</td>\n",
              "      <td>6.0</td>\n",
              "      <td>4.2000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Kelleher</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>G</td>\n",
              "      <td>4.5</td>\n",
              "      <td>4.5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Wissa</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>F</td>\n",
              "      <td>7.5</td>\n",
              "      <td>5.3000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Chalobah</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>D</td>\n",
              "      <td>5.0</td>\n",
              "      <td>3.8406</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Palmer</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>M</td>\n",
              "      <td>10.5</td>\n",
              "      <td>6.0204</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>McNeil</td>\n",
              "      <td>Everton</td>\n",
              "      <td>M</td>\n",
              "      <td>6.0</td>\n",
              "      <td>4.4000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Virgil</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>D</td>\n",
              "      <td>6.0</td>\n",
              "      <td>4.5474</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>M.Salah</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>M</td>\n",
              "      <td>14.5</td>\n",
              "      <td>10.6106</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Luis Díaz</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>M</td>\n",
              "      <td>8.0</td>\n",
              "      <td>5.9466</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Wood</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>F</td>\n",
              "      <td>7.5</td>\n",
              "      <td>5.3872</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Bowen</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>F</td>\n",
              "      <td>8.0</td>\n",
              "      <td>5.7000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5a52738d-0d3c-4b8e-aeca-9c1b2996cdc5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5a52738d-0d3c-4b8e-aeca-9c1b2996cdc5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5a52738d-0d3c-4b8e-aeca-9c1b2996cdc5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f7d64d32-5b1e-4c56-b4e3-ebe21ca97a09\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f7d64d32-5b1e-4c56-b4e3-ebe21ca97a09')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f7d64d32-5b1e-4c56-b4e3-ebe21ca97a09 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"print(f\\\"Total Cost for Optimal Squad: {optimal_squad_df['cost']\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"McNeil\",\n          \"Gabriel\",\n          \"Wood\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Arsenal\",\n          \"Brighton\",\n          \"Nottingham Forest\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pos\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"G\",\n          \"M\",\n          \"D\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.835649677042122,\n        \"min\": 4.5,\n        \"max\": 14.5,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          6.0,\n          4.5,\n          14.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GW1 XP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8504614697175106,\n        \"min\": 3.8405999999999993,\n        \"max\": 10.610599999999998,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          4.4,\n          4.2,\n          5.387199999999999\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Total GW1 XP for Optimal Starting 11: 60.45279999999999\n",
            "Total Cost for Optimal Squad: 100.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "676a4463"
      },
      "source": [
        "## Summary:\n",
        "\n",
        "### Data Analysis Key Findings\n",
        "\n",
        "*   The linear programming problem was successfully solved and achieved an \"Optimal\" status.\n",
        "*   An optimal 15-player squad was identified with a total cost of exactly \\$100.0, meeting all squad constraints (size, cost, positional requirements, and maximum 3 players per team).\n",
        "*   An optimal starting 11 was selected from the squad, consisting of 1 goalkeeper, 4 defenders, 5 midfielders, and 1 forward, satisfying the starting 11 positional requirements.\n",
        "*   The total 'GW1 XP' for the optimal starting 11 is 60.45.\n",
        "\n",
        "### Insights or Next Steps\n",
        "\n",
        "*   The optimal solution utilizes the entire budget of \\$100, suggesting the constraints are tightly binding.\n",
        "*   Further analysis could involve exploring the impact of varying positional requirements or budget constraints on the optimal team composition and total expected points.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 528
        },
        "id": "5eb20195",
        "outputId": "fcf65848-dc60-489b-9a38-4a59675e9c18"
      },
      "source": [
        "master_with_xp['Total GW1-5 XP'] = master_with_xp[['GW1 XP', 'GW2 XP', 'GW3 XP', 'GW4 XP', 'GW5 XP']].sum(axis=1)\n",
        "master_with_xp"
      ],
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id                     team pos          name  cost  \\\n",
              "0      1                  Arsenal   G          Raya   5.5   \n",
              "1      2                  Arsenal   G  Arrizabalaga   4.5   \n",
              "2      3                  Arsenal   G          Hein   4.0   \n",
              "3      4                  Arsenal   G       Setford   4.0   \n",
              "4      5                  Arsenal   D       Gabriel   6.0   \n",
              "..   ...                      ...  ..           ...   ...   \n",
              "661  655  Wolverhampton Wanderers   F   Fábio Silva   5.0   \n",
              "662  656  Wolverhampton Wanderers   F     Kalajdžić   5.0   \n",
              "663  657  Wolverhampton Wanderers   F       Chiwome   4.5   \n",
              "664  658  Wolverhampton Wanderers   F        Fraser   4.5   \n",
              "665  663  Wolverhampton Wanderers   M       J.Arias   5.5   \n",
              "\n",
              "     selected_by_percent  expected_goals  expected_assists  goals_scored  \\\n",
              "0                   18.5            0.00              0.03             0   \n",
              "1                    1.0            0.06              0.03             0   \n",
              "2                    0.6            0.00              0.00             0   \n",
              "3                    0.2            0.00              0.00             0   \n",
              "4                   26.1            2.70              1.21             3   \n",
              "..                   ...             ...               ...           ...   \n",
              "661                  0.7            0.00              0.00             0   \n",
              "662                  0.2            0.00              0.00             0   \n",
              "663                  0.1            0.00              0.00             0   \n",
              "664                  2.9            0.00              0.00             0   \n",
              "665                  1.0            0.00              0.00             0   \n",
              "\n",
              "     assists  ...  points_per_game  minutes  apppoint  assistvalue  GW1 XP  \\\n",
              "0          0  ...              3.7     3420         2            3     3.7   \n",
              "1          0  ...              3.4     2790         2            3     3.4   \n",
              "2          0  ...              0.0        0         2            3     0.0   \n",
              "3          0  ...              0.0        0         2            3     0.0   \n",
              "4          2  ...              4.2     2363         2            3     4.2   \n",
              "..       ...  ...              ...      ...       ...          ...     ...   \n",
              "661        0  ...              0.0        0         2            3     0.0   \n",
              "662        0  ...              0.0        0         2            3     0.0   \n",
              "663        0  ...              0.0        0         2            3     0.0   \n",
              "664        0  ...              0.0        0         2            3     0.0   \n",
              "665        0  ...              0.0        0         2            3     0.0   \n",
              "\n",
              "     GW2 XP  GW3 XP  GW4 XP  GW5 XP  Total GW1-5 XP  \n",
              "0    4.4548     3.7  4.2846  3.8036          19.943  \n",
              "1    4.0936     3.4  3.9372  3.4952          18.326  \n",
              "2    0.0000     0.0  0.0000  0.0000           0.000  \n",
              "3    0.0000     0.0  0.0000  0.0000           0.000  \n",
              "4    5.0568     4.2  4.8636  4.3176          22.638  \n",
              "..      ...     ...     ...     ...             ...  \n",
              "661  0.0000     0.0  0.0000  0.0000           0.000  \n",
              "662  0.0000     0.0  0.0000  0.0000           0.000  \n",
              "663  0.0000     0.0  0.0000  0.0000           0.000  \n",
              "664  0.0000     0.0  0.0000  0.0000           0.000  \n",
              "665  0.0000     0.0  0.0000  0.0000           0.000  \n",
              "\n",
              "[666 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3b06169d-b5a5-4dc5-a390-304bc531ec21\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>name</th>\n",
              "      <th>cost</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>expected_goals</th>\n",
              "      <th>expected_assists</th>\n",
              "      <th>goals_scored</th>\n",
              "      <th>assists</th>\n",
              "      <th>...</th>\n",
              "      <th>points_per_game</th>\n",
              "      <th>minutes</th>\n",
              "      <th>apppoint</th>\n",
              "      <th>assistvalue</th>\n",
              "      <th>GW1 XP</th>\n",
              "      <th>GW2 XP</th>\n",
              "      <th>GW3 XP</th>\n",
              "      <th>GW4 XP</th>\n",
              "      <th>GW5 XP</th>\n",
              "      <th>Total GW1-5 XP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>G</td>\n",
              "      <td>Raya</td>\n",
              "      <td>5.5</td>\n",
              "      <td>18.5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>3.7</td>\n",
              "      <td>3420</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3.7</td>\n",
              "      <td>4.4548</td>\n",
              "      <td>3.7</td>\n",
              "      <td>4.2846</td>\n",
              "      <td>3.8036</td>\n",
              "      <td>19.943</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>G</td>\n",
              "      <td>Arrizabalaga</td>\n",
              "      <td>4.5</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.06</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>3.4</td>\n",
              "      <td>2790</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3.4</td>\n",
              "      <td>4.0936</td>\n",
              "      <td>3.4</td>\n",
              "      <td>3.9372</td>\n",
              "      <td>3.4952</td>\n",
              "      <td>18.326</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>G</td>\n",
              "      <td>Hein</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>G</td>\n",
              "      <td>Setford</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>D</td>\n",
              "      <td>Gabriel</td>\n",
              "      <td>6.0</td>\n",
              "      <td>26.1</td>\n",
              "      <td>2.70</td>\n",
              "      <td>1.21</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>4.2</td>\n",
              "      <td>2363</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>4.2</td>\n",
              "      <td>5.0568</td>\n",
              "      <td>4.2</td>\n",
              "      <td>4.8636</td>\n",
              "      <td>4.3176</td>\n",
              "      <td>22.638</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>661</th>\n",
              "      <td>655</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>F</td>\n",
              "      <td>Fábio Silva</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.7</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>662</th>\n",
              "      <td>656</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>F</td>\n",
              "      <td>Kalajdžić</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>663</th>\n",
              "      <td>657</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>F</td>\n",
              "      <td>Chiwome</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>664</th>\n",
              "      <td>658</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>F</td>\n",
              "      <td>Fraser</td>\n",
              "      <td>4.5</td>\n",
              "      <td>2.9</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>665</th>\n",
              "      <td>663</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>M</td>\n",
              "      <td>J.Arias</td>\n",
              "      <td>5.5</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>666 rows × 23 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3b06169d-b5a5-4dc5-a390-304bc531ec21')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3b06169d-b5a5-4dc5-a390-304bc531ec21 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3b06169d-b5a5-4dc5-a390-304bc531ec21');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-435ea190-5160-49f5-b495-c3dbe9226fd2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-435ea190-5160-49f5-b495-c3dbe9226fd2')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-435ea190-5160-49f5-b495-c3dbe9226fd2 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_780f6c37-9c8f-44b3-a032-232b550e5cac\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('master_with_xp')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_780f6c37-9c8f-44b3-a032-232b550e5cac button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('master_with_xp');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "master_with_xp"
            }
          },
          "metadata": {},
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 693
        },
        "id": "83fc2f7d",
        "outputId": "31c8e0be-cfc0-415b-d693-5faab01ebc44"
      },
      "source": [
        "from pulp import *\n",
        "\n",
        "# Create a LP problem\n",
        "prob = LpProblem(\"Fantasy Football Team Selection - Total XP\", LpMaximize)\n",
        "\n",
        "# Create a list of players\n",
        "players = master_with_xp.to_dict('records')\n",
        "\n",
        "# Create decision variables for each player (1 if selected, 0 otherwise)\n",
        "player_vars = LpVariable.dicts(\"player\", range(len(players)), 0, 1, LpBinary)\n",
        "\n",
        "# Objective function: Maximize total GW1-5 XP for the 15-player squad\n",
        "prob += lpSum([players[i]['Total GW1-5 XP'] * player_vars[i] for i in range(len(players))]), \"Total GW1-5 XP for Squad\"\n",
        "\n",
        "# Constraints\n",
        "\n",
        "# 1. Total number of players in the squad must be 15\n",
        "prob += lpSum([player_vars[i] for i in range(len(players))]) == 15, \"Total Squad Size\"\n",
        "\n",
        "# 2. Total cost of the squad cannot exceed 100\n",
        "prob += lpSum([players[i]['cost'] * player_vars[i] for i in range(len(players))]) <= 100, \"Total Squad Cost\"\n",
        "\n",
        "# 3. Number of players per position in the squad\n",
        "prob += lpSum([player_vars[i] for i in range(len(players)) if players[i]['pos'] == 'G']) == 2, \"Squad Goalkeepers\"\n",
        "prob += lpSum([player_vars[i] for i in range(len(players)) if players[i]['pos'] == 'D']) == 5, \"Squad Defenders\"\n",
        "prob += lpSum([player_vars[i] for i in range(len(players)) if players[i]['pos'] == 'M']) == 5, \"Squad Midfielders\"\n",
        "prob += lpSum([player_vars[i] for i in range(len(players)) if players[i]['pos'] == 'F']) == 3, \"Squad Forwards\"\n",
        "\n",
        "# 4. Maximum 3 players from the same team in the squad\n",
        "teams = master_with_xp['team'].unique()\n",
        "for team in teams:\n",
        "    prob += lpSum([player_vars[i] for i in range(len(players)) if players[i]['team'] == team]) <= 3, f\"Max 3 players from {team} in Squad\"\n",
        "\n",
        "# Solve the problem\n",
        "prob.solve()\n",
        "\n",
        "# Print the status of the solution\n",
        "print(\"Status:\", LpStatus[prob.status])\n",
        "\n",
        "# Create a list of selected players\n",
        "selected_players = []\n",
        "for i in range(len(players)):\n",
        "    if player_vars[i].varValue == 1:\n",
        "        selected_players.append(players[i])\n",
        "\n",
        "# Create a DataFrame of the optimal team\n",
        "optimal_squad_df = pd.DataFrame(selected_players)\n",
        "\n",
        "# Display the optimal squad and total GW1-5 XP\n",
        "print(\"\\nOptimal Squad (15 players):\")\n",
        "display(optimal_squad_df[['name', 'team', 'pos', 'cost', 'Total GW1-5 XP']])\n",
        "\n",
        "print(f\"\\nTotal GW1-5 XP for Optimal Squad: {value(prob.objective)}\")\n",
        "print(f\"Total Cost for Optimal Squad: {optimal_squad_df['cost'].sum()}\")"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Status: Optimal\n",
            "\n",
            "Optimal Squad (15 players):\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/pulp/pulp.py:1455: UserWarning:\n",
            "\n",
            "Spaces are not permitted in the name. Converted to '_'\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "         name                     team pos  cost  Total GW1-5 XP\n",
              "0     Gabriel                  Arsenal   D   6.0         22.6380\n",
              "1    J.Timber                  Arsenal   D   5.5         20.4820\n",
              "2       Wissa                 Brighton   F   7.5         26.0336\n",
              "3    Chalobah                  Chelsea   D   5.0         19.0624\n",
              "4       Guéhi           Crystal Palace   D   4.5         17.9860\n",
              "5      McNeil                  Everton   M   6.0         21.7800\n",
              "6     M.Salah                Liverpool   M  14.5         48.7578\n",
              "7   Luis Díaz                Liverpool   M   8.0         27.3258\n",
              "8      Mbeumo        Manchester United   M   8.0         29.2268\n",
              "9        Amad        Manchester United   M   6.5         23.5700\n",
              "10   Dúbravka         Newcastle United   G   4.0         22.1584\n",
              "11       Aina        Nottingham Forest   D   5.0         18.5296\n",
              "12       Wood        Nottingham Forest   F   7.5         28.0448\n",
              "13      Bowen                 West Ham   F   8.0         27.0180\n",
              "14    Bentley  Wolverhampton Wanderers   G   4.0         21.4290"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f0a01dc7-28be-42ff-8b9f-a32053203766\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>team</th>\n",
              "      <th>pos</th>\n",
              "      <th>cost</th>\n",
              "      <th>Total GW1-5 XP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Gabriel</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>D</td>\n",
              "      <td>6.0</td>\n",
              "      <td>22.6380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>J.Timber</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>D</td>\n",
              "      <td>5.5</td>\n",
              "      <td>20.4820</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Wissa</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>F</td>\n",
              "      <td>7.5</td>\n",
              "      <td>26.0336</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Chalobah</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>D</td>\n",
              "      <td>5.0</td>\n",
              "      <td>19.0624</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Guéhi</td>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>D</td>\n",
              "      <td>4.5</td>\n",
              "      <td>17.9860</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>McNeil</td>\n",
              "      <td>Everton</td>\n",
              "      <td>M</td>\n",
              "      <td>6.0</td>\n",
              "      <td>21.7800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>M.Salah</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>M</td>\n",
              "      <td>14.5</td>\n",
              "      <td>48.7578</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Luis Díaz</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>M</td>\n",
              "      <td>8.0</td>\n",
              "      <td>27.3258</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Mbeumo</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>M</td>\n",
              "      <td>8.0</td>\n",
              "      <td>29.2268</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Amad</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>M</td>\n",
              "      <td>6.5</td>\n",
              "      <td>23.5700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Dúbravka</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>G</td>\n",
              "      <td>4.0</td>\n",
              "      <td>22.1584</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Aina</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>D</td>\n",
              "      <td>5.0</td>\n",
              "      <td>18.5296</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Wood</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>F</td>\n",
              "      <td>7.5</td>\n",
              "      <td>28.0448</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Bowen</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>F</td>\n",
              "      <td>8.0</td>\n",
              "      <td>27.0180</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Bentley</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>G</td>\n",
              "      <td>4.0</td>\n",
              "      <td>21.4290</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f0a01dc7-28be-42ff-8b9f-a32053203766')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f0a01dc7-28be-42ff-8b9f-a32053203766 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f0a01dc7-28be-42ff-8b9f-a32053203766');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8c4a17b0-51d3-43b5-a13b-70536125b2d4\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8c4a17b0-51d3-43b5-a13b-70536125b2d4')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8c4a17b0-51d3-43b5-a13b-70536125b2d4 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"print(f\\\"Total Cost for Optimal Squad: {optimal_squad_df['cost']\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"Amad\",\n          \"Aina\",\n          \"Gabriel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"Liverpool\",\n          \"Arsenal\",\n          \"West Ham\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pos\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"F\",\n          \"G\",\n          \"D\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.6026543227654186,\n        \"min\": 4.0,\n        \"max\": 14.5,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          6.5,\n          5.5,\n          14.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total GW1-5 XP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.50051098962756,\n        \"min\": 17.986,\n        \"max\": 48.757799999999996,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          23.57,\n          18.5296,\n          22.638000000000005\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Total GW1-5 XP for Optimal Squad: 374.0422\n",
            "Total Cost for Optimal Squad: 100.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 881
        },
        "id": "5dfb015d",
        "outputId": "0440cf6c-b4e4-418e-d816-2f76d254b700"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Get the top 100 players by 'Total GW1-5 XP'\n",
        "top_100_players = master_with_xp.nlargest(100, 'Total GW1-5 XP').copy()\n",
        "\n",
        "# Create the scatter plot\n",
        "plt.figure(figsize=(15, 10))\n",
        "ax = sns.scatterplot(x='cost', y='Total GW1-5 XP', data=top_100_players)\n",
        "\n",
        "# Add player names as annotations\n",
        "for i, row in top_100_players.iterrows():\n",
        "    ax.text(row['cost'], row['Total GW1-5 XP'], row['name'], fontsize=9, ha='left', va='bottom')\n",
        "\n",
        "plt.title('Total GW1-5 XP vs Cost for Top 100 Players')\n",
        "plt.xlabel('Cost')\n",
        "plt.ylabel('Total GW1-5 XP')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "dfa56c22",
        "outputId": "1de6dd12-4990-4e25-9226-d95554916ce8"
      },
      "source": [
        "import plotly.express as px\n",
        "import pandas as pd\n",
        "\n",
        "positions = ['G', 'D', 'M', 'F']\n",
        "\n",
        "for pos in positions:\n",
        "    # Filter data by position\n",
        "    pos_df = master_with_xp[master_with_xp['pos'] == pos].copy()\n",
        "\n",
        "    # Create the interactive scatter plot using Plotly Express\n",
        "    fig = px.scatter(\n",
        "        pos_df,\n",
        "        x='cost',\n",
        "        y='Total GW1-5 XP',\n",
        "        size='selected_by_percent',\n",
        "        hover_name='name',  # Show player name on hover\n",
        "        hover_data={        # Show additional data on hover\n",
        "            'cost': True,\n",
        "            'Total GW1-5 XP': True,\n",
        "            'selected_by_percent': True,\n",
        "            'team': True,    # Include team name on hover\n",
        "            'pos': True      # Include position on hover\n",
        "        },\n",
        "        title=f'Total GW1-5 XP vs Cost for {pos}s (Bubble size: Selected by Percent)',\n",
        "        labels={'cost': 'Cost', 'Total GW1-5 XP': 'Total GW1-5 XP'}\n",
        "    )\n",
        "\n",
        "    fig.show()"
      ],
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"3710dc9e-58d8-4159-b36c-fd8ee6b51142\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"3710dc9e-58d8-4159-b36c-fd8ee6b51142\")) {                    Plotly.newPlot(                        \"3710dc9e-58d8-4159-b36c-fd8ee6b51142\",                        [{\"customdata\":[[18.5,\"Arsenal\",\"G\"],[1.0,\"Arsenal\",\"G\"],[0.6,\"Arsenal\",\"G\"],[0.2,\"Arsenal\",\"G\"],[0.5,\"Aston Villa\",\"G\"],[0.3,\"Aston Villa\",\"G\"],[1.0,\"Aston Villa\",\"G\"],[0.3,\"Aston Villa\",\"G\"],[3.9,\"Bournemouth\",\"G\"],[0.1,\"Bournemouth\",\"G\"],[0.4,\"Bournemouth\",\"G\"],[0.4,\"Bournemouth\",\"G\"],[1.2,\"Brentford\",\"G\"],[5.3,\"Brentford\",\"G\"],[0.7,\"Brentford\",\"G\"],[0.2,\"Brentford\",\"G\"],[0.2,\"Brentford\",\"G\"],[32.1,\"Brighton\",\"G\"],[0.3,\"Brighton\",\"G\"],[0.2,\"Brighton\",\"G\"],[0.1,\"Brighton\",\"G\"],[2.3,\"Brighton\",\"G\"],[0.4,\"Burnley\",\"G\"],[6.6,\"Burnley\",\"G\"],[0.2,\"Burnley\",\"G\"],[0.1,\"Burnley\",\"G\"],[0.1,\"Burnley\",\"G\"],[13.7,\"Chelsea\",\"G\"],[0.2,\"Chelsea\",\"G\"],[0.1,\"Chelsea\",\"G\"],[0.1,\"Chelsea\",\"G\"],[3.2,\"Crystal Palace\",\"G\"],[0.4,\"Crystal Palace\",\"G\"],[0.1,\"Crystal Palace\",\"G\"],[13.2,\"Everton\",\"G\"],[0.2,\"Everton\",\"G\"],[0.2,\"Everton\",\"G\"],[1.6,\"Fulham\",\"G\"],[0.2,\"Fulham\",\"G\"],[0.2,\"Fulham\",\"G\"],[1.3,\"Leeds\",\"G\"],[0.4,\"Leeds\",\"G\"],[8.5,\"Leeds\",\"G\"],[0.1,\"Leeds\",\"G\"],[10.3,\"Liverpool\",\"G\"],[0.6,\"Liverpool\",\"G\"],[0.1,\"Liverpool\",\"G\"],[0.1,\"Liverpool\",\"G\"],[3.7,\"Manchester City\",\"G\"],[0.6,\"Manchester City\",\"G\"],[0.3,\"Manchester City\",\"G\"],[0.5,\"Manchester United\",\"G\"],[0.1,\"Manchester United\",\"G\"],[0.1,\"Manchester United\",\"G\"],[0.4,\"Manchester United\",\"G\"],[0.1,\"Manchester United\",\"G\"],[4.0,\"Newcastle United\",\"G\"],[11.3,\"Newcastle United\",\"G\"],[0.1,\"Newcastle United\",\"G\"],[0.2,\"Newcastle United\",\"G\"],[17.8,\"Nottingham Forest\",\"G\"],[0.3,\"Nottingham Forest\",\"G\"],[1.4,\"Nottingham Forest\",\"G\"],[0.6,\"Sunderland\",\"G\"],[0.6,\"Sunderland\",\"G\"],[0.3,\"Sunderland\",\"G\"],[3.4,\"Tottenham\",\"G\"],[0.3,\"Tottenham\",\"G\"],[6.2,\"Tottenham\",\"G\"],[6.3,\"West Ham\",\"G\"],[1.0,\"West Ham\",\"G\"],[0.5,\"West Ham\",\"G\"],[0.2,\"Wolverhampton Wanderers\",\"G\"],[2.6,\"Wolverhampton Wanderers\",\"G\"],[1.1,\"Wolverhampton Wanderers\",\"G\"],[3.6,\"Wolverhampton Wanderers\",\"G\"]],\"hovertemplate\":\"\\u003cb\\u003e%{hovertext}\\u003c\\u002fb\\u003e\\u003cbr\\u003e\\u003cbr\\u003eCost=%{x}\\u003cbr\\u003eTotal GW1-5 XP=%{y}\\u003cbr\\u003eselected_by_percent=%{customdata[0]}\\u003cbr\\u003eteam=%{customdata[1]}\\u003cbr\\u003epos=%{customdata[2]}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"hovertext\":[\"Raya\",\"Arrizabalaga\",\"Hein\",\"Setford\",\"Martinez\",\"M.Bizot\",\"Gauci\",\"Marschall\",\"Trafford\",\"Weiss\",\"Green\",\"Hladký\",\"Neto\",\"Petrović\",\"Dennis\",\"McKenna\",\"Paulsen\",\"Kelleher\",\"Balcombe\",\"Cox\",\"Eyestone\",\"Valdimarsson\",\"Steele\",\"Verbruggen\",\"McGill\",\"Rushworth\",\"Scherpen\",\"Sánchez\",\"Jörgensen\",\"Penders\",\"Slonina\",\"Henderson\",\"Benitez\",\"Matthews\",\"Pickford\",\"Travers\",\"Tyrer\",\"Leno\",\"Benda\",\"Lecomte\",\"Meslier\",\"Cairns\",\"Darlow\",\"Perri\",\"A.Becker\",\"Mamardashvili\",\"Pécsi\",\"Woodman\",\"Ederson M.\",\"Ortega Moreno\",\"Bettinelli\",\"Bayindir\",\"Onana\",\"Harrison\",\"Heaton\",\"Mee\",\"Pope\",\"Dúbravka\",\"Gillespie\",\"Odysseas\",\"Sels\",\"C.Miguel\",\"Turner\",\"Patterson\",\"Moore\",\"Nna Noukeu\",\"Vicario\",\"Austin\",\"Kinsky\",\"Areola\",\"Foderingham\",\"Hegyi\",\"Johnstone\",\"José Sá\",\"Bentley\",\"King\"],\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"size\":[18.5,1.0,0.6,0.2,0.5,0.3,1.0,0.3,3.9,0.1,0.4,0.4,1.2,5.3,0.7,0.2,0.2,32.1,0.3,0.2,0.1,2.3,0.4,6.6,0.2,0.1,0.1,13.7,0.2,0.1,0.1,3.2,0.4,0.1,13.2,0.2,0.2,1.6,0.2,0.2,1.3,0.4,8.5,0.1,10.3,0.6,0.1,0.1,3.7,0.6,0.3,0.5,0.1,0.1,0.4,0.1,4.0,11.3,0.1,0.2,17.8,0.3,1.4,0.6,0.6,0.3,3.4,0.3,6.2,6.3,1.0,0.5,0.2,2.6,1.1,3.6],\"sizemode\":\"area\",\"sizeref\":0.08025,\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[5.5,4.5,4.0,4.0,5.0,4.5,4.0,4.0,5.0,4.5,4.0,4.0,4.5,4.5,4.0,4.0,4.0,4.5,4.0,4.0,4.0,4.0,4.5,4.5,4.0,4.0,4.0,5.0,4.5,4.0,4.0,5.0,4.0,4.0,5.5,4.5,4.0,5.0,4.0,4.0,4.5,4.0,4.0,4.5,5.5,4.5,4.0,4.0,5.5,5.0,4.0,5.0,5.0,4.0,4.0,4.0,5.0,4.0,4.0,4.0,5.0,4.0,4.0,4.5,4.0,4.0,5.0,4.0,4.0,4.5,4.0,4.0,4.5,4.5,4.0,4.0],\"xaxis\":\"x\",\"y\":[19.943,18.326,0.0,0.0,15.065999999999999,0.0,0.0,0.0,0.0,0.0,0.0,0.0,17.64,0.0,0.0,0.0,0.0,22.104,0.0,0.0,0.0,4.912,21.411,13.798200000000001,0.0,0.0,0.0,20.092799999999997,15.456,0.0,0.0,19.044000000000004,0.0,0.0,20.79,18.81,0.0,14.838000000000001,0.0,0.0,0.0,0.0,0.0,0.0,21.432000000000002,0.0,0.0,0.0,22.747,14.283000000000001,0.0,9.427999999999999,16.499,0.0,0.0,0.0,18.1296,22.1584,0.0,0.0,19.5312,0.0,0.0,0.0,0.0,0.0,13.86,4.949999999999999,13.86,12.798,0.0,0.0,8.0954,15.238399999999999,21.429000000000002,4.762],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Cost\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Total GW1-5 XP\"}},\"legend\":{\"tracegroupgap\":0,\"itemsizing\":\"constant\"},\"title\":{\"text\":\"Total GW1-5 XP vs Cost for Gs (Bubble size: Selected by Percent)\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('3710dc9e-58d8-4159-b36c-fd8ee6b51142');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"82ae91a3-e592-438f-a28d-0f5488b73cda\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"82ae91a3-e592-438f-a28d-0f5488b73cda\")) {                    Plotly.newPlot(                        \"82ae91a3-e592-438f-a28d-0f5488b73cda\",                        [{\"customdata\":[[26.1,\"Arsenal\",\"D\"],[13.5,\"Arsenal\",\"D\"],[0.6,\"Arsenal\",\"D\"],[2.5,\"Arsenal\",\"D\"],[0.1,\"Arsenal\",\"D\"],[6.1,\"Arsenal\",\"D\"],[0.8,\"Arsenal\",\"D\"],[0.3,\"Arsenal\",\"D\"],[0.7,\"Arsenal\",\"D\"],[0.3,\"Arsenal\",\"D\"],[0.3,\"Arsenal\",\"D\"],[0.1,\"Arsenal\",\"D\"],[1.6,\"Aston Villa\",\"D\"],[1.5,\"Aston Villa\",\"D\"],[24.1,\"Aston Villa\",\"D\"],[1.0,\"Aston Villa\",\"D\"],[0.5,\"Aston Villa\",\"D\"],[0.4,\"Aston Villa\",\"D\"],[1.0,\"Aston Villa\",\"D\"],[11.7,\"Aston Villa\",\"D\"],[0.3,\"Aston Villa\",\"D\"],[0.3,\"Aston Villa\",\"D\"],[0.3,\"Aston Villa\",\"D\"],[0.1,\"Bournemouth\",\"D\"],[2.4,\"Bournemouth\",\"D\"],[0.5,\"Bournemouth\",\"D\"],[0.3,\"Bournemouth\",\"D\"],[0.3,\"Bournemouth\",\"D\"],[8.8,\"Bournemouth\",\"D\"],[0.4,\"Bournemouth\",\"D\"],[0.4,\"Bournemouth\",\"D\"],[0.3,\"Bournemouth\",\"D\"],[0.3,\"Bournemouth\",\"D\"],[0.2,\"Bournemouth\",\"D\"],[0.2,\"Bournemouth\",\"D\"],[4.2,\"Bournemouth\",\"D\"],[0.2,\"Bournemouth\",\"D\"],[0.6,\"Brentford\",\"D\"],[0.7,\"Brentford\",\"D\"],[0.2,\"Brentford\",\"D\"],[1.9,\"Brentford\",\"D\"],[0.4,\"Brentford\",\"D\"],[0.4,\"Brentford\",\"D\"],[0.7,\"Brentford\",\"D\"],[1.3,\"Brentford\",\"D\"],[0.3,\"Brentford\",\"D\"],[0.4,\"Brentford\",\"D\"],[1.5,\"Brighton\",\"D\"],[0.4,\"Brighton\",\"D\"],[0.2,\"Brighton\",\"D\"],[0.2,\"Brighton\",\"D\"],[0.3,\"Brighton\",\"D\"],[0.3,\"Brighton\",\"D\"],[0.1,\"Brighton\",\"D\"],[0.4,\"Brighton\",\"D\"],[0.4,\"Brighton\",\"D\"],[0.3,\"Brighton\",\"D\"],[1.0,\"Brighton\",\"D\"],[0.3,\"Brighton\",\"D\"],[0.2,\"Brighton\",\"D\"],[0.2,\"Burnley\",\"D\"],[0.1,\"Burnley\",\"D\"],[10.0,\"Burnley\",\"D\"],[0.9,\"Burnley\",\"D\"],[0.7,\"Burnley\",\"D\"],[0.3,\"Burnley\",\"D\"],[0.1,\"Burnley\",\"D\"],[0.4,\"Burnley\",\"D\"],[1.2,\"Burnley\",\"D\"],[0.3,\"Burnley\",\"D\"],[0.1,\"Burnley\",\"D\"],[0.3,\"Burnley\",\"D\"],[0.3,\"Burnley\",\"D\"],[0.2,\"Burnley\",\"D\"],[19.9,\"Chelsea\",\"D\"],[4.7,\"Chelsea\",\"D\"],[0.7,\"Chelsea\",\"D\"],[5.2,\"Chelsea\",\"D\"],[2.4,\"Chelsea\",\"D\"],[0.1,\"Chelsea\",\"D\"],[0.2,\"Chelsea\",\"D\"],[0.1,\"Chelsea\",\"D\"],[0.4,\"Chelsea\",\"D\"],[0.3,\"Chelsea\",\"D\"],[0.2,\"Chelsea\",\"D\"],[9.0,\"Crystal Palace\",\"D\"],[0.9,\"Crystal Palace\",\"D\"],[0.9,\"Crystal Palace\",\"D\"],[0.1,\"Crystal Palace\",\"D\"],[13.7,\"Crystal Palace\",\"D\"],[0.5,\"Crystal Palace\",\"D\"],[0.0,\"Crystal Palace\",\"D\"],[0.7,\"Crystal Palace\",\"D\"],[0.3,\"Crystal Palace\",\"D\"],[0.2,\"Crystal Palace\",\"D\"],[1.9,\"Everton\",\"D\"],[4.9,\"Everton\",\"D\"],[4.9,\"Everton\",\"D\"],[0.4,\"Everton\",\"D\"],[0.1,\"Everton\",\"D\"],[0.3,\"Everton\",\"D\"],[0.2,\"Everton\",\"D\"],[0.3,\"Everton\",\"D\"],[0.2,\"Everton\",\"D\"],[6.9,\"Fulham\",\"D\"],[0.6,\"Fulham\",\"D\"],[0.4,\"Fulham\",\"D\"],[0.2,\"Fulham\",\"D\"],[0.1,\"Fulham\",\"D\"],[0.1,\"Fulham\",\"D\"],[0.2,\"Fulham\",\"D\"],[0.3,\"Fulham\",\"D\"],[0.9,\"Leeds\",\"D\"],[0.5,\"Leeds\",\"D\"],[0.2,\"Leeds\",\"D\"],[0.3,\"Leeds\",\"D\"],[0.4,\"Leeds\",\"D\"],[1.9,\"Leeds\",\"D\"],[1.8,\"Leeds\",\"D\"],[0.3,\"Leeds\",\"D\"],[27.9,\"Liverpool\",\"D\"],[12.4,\"Liverpool\",\"D\"],[2.3,\"Liverpool\",\"D\"],[19.4,\"Liverpool\",\"D\"],[2.6,\"Liverpool\",\"D\"],[0.7,\"Liverpool\",\"D\"],[0.2,\"Liverpool\",\"D\"],[0.1,\"Liverpool\",\"D\"],[0.2,\"Liverpool\",\"D\"],[0.3,\"Liverpool\",\"D\"],[0.2,\"Liverpool\",\"D\"],[26.6,\"Manchester City\",\"D\"],[17.4,\"Manchester City\",\"D\"],[0.5,\"Manchester City\",\"D\"],[0.4,\"Manchester City\",\"D\"],[0.3,\"Manchester City\",\"D\"],[0.5,\"Manchester City\",\"D\"],[2.2,\"Manchester City\",\"D\"],[0.4,\"Manchester City\",\"D\"],[0.6,\"Manchester City\",\"D\"],[0.2,\"Manchester City\",\"D\"],[0.1,\"Manchester City\",\"D\"],[0.9,\"Manchester United\",\"D\"],[0.5,\"Manchester United\",\"D\"],[1.1,\"Manchester United\",\"D\"],[0.2,\"Manchester United\",\"D\"],[2.8,\"Manchester United\",\"D\"],[1.7,\"Manchester United\",\"D\"],[0.6,\"Manchester United\",\"D\"],[0.2,\"Manchester United\",\"D\"],[1.0,\"Manchester United\",\"D\"],[0.3,\"Manchester United\",\"D\"],[0.2,\"Manchester United\",\"D\"],[2.5,\"Manchester United\",\"D\"],[0.4,\"Manchester United\",\"D\"],[3.1,\"Newcastle United\",\"D\"],[2.1,\"Newcastle United\",\"D\"],[0.5,\"Newcastle United\",\"D\"],[3.1,\"Newcastle United\",\"D\"],[4.9,\"Newcastle United\",\"D\"],[1.3,\"Newcastle United\",\"D\"],[0.1,\"Newcastle United\",\"D\"],[0.1,\"Newcastle United\",\"D\"],[0.8,\"Newcastle United\",\"D\"],[0.2,\"Newcastle United\",\"D\"],[0.2,\"Newcastle United\",\"D\"],[0.5,\"Newcastle United\",\"D\"],[7.2,\"Nottingham Forest\",\"D\"],[3.6,\"Nottingham Forest\",\"D\"],[18.3,\"Nottingham Forest\",\"D\"],[2.0,\"Nottingham Forest\",\"D\"],[0.1,\"Nottingham Forest\",\"D\"],[0.1,\"Nottingham Forest\",\"D\"],[0.1,\"Nottingham Forest\",\"D\"],[0.1,\"Nottingham Forest\",\"D\"],[0.3,\"Nottingham Forest\",\"D\"],[0.6,\"Nottingham Forest\",\"D\"],[0.3,\"Sunderland\",\"D\"],[0.3,\"Sunderland\",\"D\"],[0.0,\"Sunderland\",\"D\"],[0.5,\"Sunderland\",\"D\"],[0.4,\"Sunderland\",\"D\"],[0.0,\"Sunderland\",\"D\"],[0.3,\"Sunderland\",\"D\"],[0.3,\"Sunderland\",\"D\"],[0.0,\"Sunderland\",\"D\"],[0.3,\"Sunderland\",\"D\"],[8.9,\"Sunderland\",\"D\"],[0.4,\"Sunderland\",\"D\"],[9.8,\"Tottenham\",\"D\"],[1.5,\"Tottenham\",\"D\"],[0.1,\"Tottenham\",\"D\"],[0.1,\"Tottenham\",\"D\"],[0.0,\"Tottenham\",\"D\"],[0.4,\"Tottenham\",\"D\"],[11.1,\"Tottenham\",\"D\"],[13.5,\"Tottenham\",\"D\"],[0.4,\"Tottenham\",\"D\"],[0.4,\"Tottenham\",\"D\"],[3.1,\"Tottenham\",\"D\"],[0.7,\"West Ham\",\"D\"],[0.2,\"West Ham\",\"D\"],[0.4,\"West Ham\",\"D\"],[0.1,\"West Ham\",\"D\"],[0.1,\"West Ham\",\"D\"],[0.1,\"West Ham\",\"D\"],[0.2,\"West Ham\",\"D\"],[32.3,\"West Ham\",\"D\"],[0.9,\"West Ham\",\"D\"],[0.4,\"West Ham\",\"D\"],[0.3,\"Wolverhampton Wanderers\",\"D\"],[0.2,\"Wolverhampton Wanderers\",\"D\"],[0.1,\"Wolverhampton Wanderers\",\"D\"],[0.1,\"Wolverhampton Wanderers\",\"D\"],[0.1,\"Wolverhampton Wanderers\",\"D\"],[0.1,\"Wolverhampton Wanderers\",\"D\"],[0.2,\"Wolverhampton Wanderers\",\"D\"],[1.1,\"Wolverhampton Wanderers\",\"D\"],[0.2,\"Wolverhampton Wanderers\",\"D\"],[1.5,\"Wolverhampton Wanderers\",\"D\"],[2.3,\"Wolverhampton Wanderers\",\"D\"]],\"hovertemplate\":\"\\u003cb\\u003e%{hovertext}\\u003c\\u002fb\\u003e\\u003cbr\\u003e\\u003cbr\\u003eCost=%{x}\\u003cbr\\u003eTotal GW1-5 XP=%{y}\\u003cbr\\u003eselected_by_percent=%{customdata[0]}\\u003cbr\\u003eteam=%{customdata[1]}\\u003cbr\\u003epos=%{customdata[2]}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"hovertext\":[\"Gabriel\",\"Saliba\",\"Calafiori\",\"J.Timber\",\"Kiwior\",\"Lewis-Skelly\",\"White\",\"Zinchenko\",\"Clarke\",\"Kacurri\",\"Nichols\",\"Mosquera\",\"Cash\",\"Digne\",\"Konsa\",\"Maatsen\",\"Mings\",\"Pau\",\"A.García\",\"Alex Moreno\",\"Bogarde\",\"Sousa\",\"Yasin\",\"Roberts\",\"Walker\",\"Delcroix\",\"Dodgson\",\"Ekdal\",\"Estève\",\"Hartman\",\"Humphreys\",\"Jordan\",\"Lucas Pires\",\"Sambo\",\"Sonne\",\"Tuanzebe\",\"Worrall\",\"Zabarnyi\",\"Senesi\",\"Smith\",\"Truffert\",\"Akinmboni\",\"Bevan\",\"Hill\",\"J.Araujo\",\"Mepham\",\"Soler\",\"Collins\",\"Lewis-Potter\",\"Ajer\",\"Henry\",\"Kayode\",\"Pinnock\",\"Roerslev\",\"Van den Berg\",\"Arthur\",\"Fredrick\",\"Hickey\",\"Ji-soo\",\"Meghoma\",\"Boscagli\",\"Coppola\",\"De Cuyper\",\"Dunk\",\"Estupiñan\",\"F.Kadıoğlu\",\"Igor\",\"Lamptey\",\"Van Hecke\",\"Veltman\",\"Webster\",\"Cashin\",\"Slater\",\"Tasker\",\"Cucurella\",\"James\",\"Chalobah\",\"Colwill\",\"Gusto\",\"B.Badiashile\",\"Fofana\",\"M.Sarr\",\"Tosin\",\"Acheampong\",\"Anselmino\",\"Muñoz\",\"Lacroix\",\"Mitchell\",\"Sosa\",\"Guéhi\",\"Richards\",\"Chadi Riad\",\"Clyne\",\"Holding\",\"Kporha\",\"Branthwaite\",\"Tarkowski\",\"Mykolenko\",\"O'Brien\",\"Coleman\",\"Keane\",\"Patterson\",\"Dixon\",\"Welch\",\"Robinson\",\"Andersen\",\"Bassey\",\"Castagne\",\"Diop\",\"J.Cuenca\",\"Tete\",\"Amissah\",\"Bogle\",\"Struijk\",\"Bijol\",\"Bornauw\",\"Byram\",\"Gudmundsson\",\"Rodon\",\"Schmidt\",\"Frimpong\",\"Kerkez\",\"Robertson\",\"Virgil\",\"Konaté\",\"Bradley\",\"Gomez\",\"Tsimikas\",\"Nallo\",\"R.Williams\",\"Ramsay\",\"Aït-Nouri\",\"Gvardiol\",\"Akanji\",\"Aké\",\"Khusanov\",\"Matheus N.\",\"Rúben\",\"Stones\",\"Lewis\",\"O’Reilly\",\"Vitor Reis\",\"De Ligt\",\"Martinez\",\"Mazraoui\",\"D.Leon\",\"Dalot\",\"Dorgu\",\"Maguire\",\"Shaw\",\"Yoro\",\"Amass\",\"Fredricson\",\"Heaven\",\"Malacia\",\"Hall\",\"Schär\",\"Botman\",\"Burn\",\"Livramento\",\"Trippier\",\"Krafth\",\"Lascelles\",\"A.Murphy\",\"Ashby\",\"Pivas\",\"Targett\",\"Milenković\",\"Murillo\",\"Aina\",\"N.Williams\",\"David Carmo\",\"Jair Cunha\",\"Morato\",\"O.Richards\",\"Abbott\",\"Boly\",\"Ballard\",\"Hume\",\"Alese\",\"Anderson\",\"Cirkin\",\"Hjelde\",\"Huggins\",\"Johnson\",\"O'Nien\",\"Pembele\",\"Reinildo\",\"Seelt\",\"Pedro Porro\",\"Romero\",\"Danso\",\"Davies\",\"Dragusin\",\"Spence\",\"Udogie\",\"Van de Ven\",\"Phillips\",\"Takai\",\"Vuskovic\",\"Diouf\",\"Emerson\",\"Kilman\",\"Mavropanos\",\"N.Aguerd\",\"Scarles\",\"Todibo\",\"Wan-Bissaka\",\"Casey\",\"Walker-Peters\",\"Agbadou\",\"Doherty\",\"H.Bueno\",\"Mosquera\",\"R.Gomes\",\"S.Bueno\",\"Toti\",\"Hoever\",\"Meupiyou\",\"Pedro Lima\",\"Pond\"],\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"size\":[26.1,13.5,0.6,2.5,0.1,6.1,0.8,0.3,0.7,0.3,0.3,0.1,1.6,1.5,24.1,1.0,0.5,0.4,1.0,11.7,0.3,0.3,0.3,0.1,2.4,0.5,0.3,0.3,8.8,0.4,0.4,0.3,0.3,0.2,0.2,4.2,0.2,0.6,0.7,0.2,1.9,0.4,0.4,0.7,1.3,0.3,0.4,1.5,0.4,0.2,0.2,0.3,0.3,0.1,0.4,0.4,0.3,1.0,0.3,0.2,0.2,0.1,10.0,0.9,0.7,0.3,0.1,0.4,1.2,0.3,0.1,0.3,0.3,0.2,19.9,4.7,0.7,5.2,2.4,0.1,0.2,0.1,0.4,0.3,0.2,9.0,0.9,0.9,0.1,13.7,0.5,0.0,0.7,0.3,0.2,1.9,4.9,4.9,0.4,0.1,0.3,0.2,0.3,0.2,6.9,0.6,0.4,0.2,0.1,0.1,0.2,0.3,0.9,0.5,0.2,0.3,0.4,1.9,1.8,0.3,27.9,12.4,2.3,19.4,2.6,0.7,0.2,0.1,0.2,0.3,0.2,26.6,17.4,0.5,0.4,0.3,0.5,2.2,0.4,0.6,0.2,0.1,0.9,0.5,1.1,0.2,2.8,1.7,0.6,0.2,1.0,0.3,0.2,2.5,0.4,3.1,2.1,0.5,3.1,4.9,1.3,0.1,0.1,0.8,0.2,0.2,0.5,7.2,3.6,18.3,2.0,0.1,0.1,0.1,0.1,0.3,0.6,0.3,0.3,0.0,0.5,0.4,0.0,0.3,0.3,0.0,0.3,8.9,0.4,9.8,1.5,0.1,0.1,0.0,0.4,11.1,13.5,0.4,0.4,3.1,0.7,0.2,0.4,0.1,0.1,0.1,0.2,32.3,0.9,0.4,0.3,0.2,0.1,0.1,0.1,0.1,0.2,1.1,0.2,1.5,2.3],\"sizemode\":\"area\",\"sizeref\":0.08074999999999999,\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[6.0,6.0,5.5,5.5,5.5,5.5,5.5,5.0,4.0,4.0,4.0,5.5,4.5,4.5,4.5,4.5,4.5,4.5,4.0,4.0,4.0,4.0,4.0,4.5,4.5,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,5.0,4.5,4.5,4.5,4.0,4.0,4.0,4.0,4.0,4.0,5.0,5.0,4.5,4.5,4.5,4.5,4.5,4.5,4.0,4.0,4.0,4.0,4.0,4.5,4.5,4.5,4.5,4.5,4.5,4.5,4.5,4.5,4.5,4.5,4.0,4.0,4.0,6.0,5.5,5.0,5.0,5.0,4.5,4.5,4.5,4.5,4.0,4.0,5.5,5.0,5.0,5.0,4.5,4.5,4.0,4.0,4.0,4.0,5.5,5.5,5.0,5.0,4.5,4.5,4.5,4.0,4.0,5.0,4.5,4.5,4.5,4.5,4.5,4.5,4.0,4.5,4.5,4.0,4.0,4.0,4.0,4.0,4.0,6.0,6.0,6.0,6.0,5.5,5.0,5.0,5.0,4.0,4.0,4.0,6.0,6.0,5.5,5.5,5.5,5.5,5.5,5.5,5.0,5.0,5.0,5.0,5.0,5.0,4.5,4.5,4.5,4.5,4.5,4.5,4.0,4.0,4.0,4.0,5.5,5.5,5.0,5.0,5.0,5.0,4.5,4.5,4.0,4.0,4.0,4.0,5.5,5.5,5.0,5.0,4.5,4.5,4.5,4.5,4.0,4.0,4.5,4.5,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,5.5,5.0,4.5,4.5,4.5,4.5,4.5,4.5,4.0,4.0,4.0,4.5,4.5,4.5,4.5,4.5,4.5,4.5,4.5,4.0,4.5,4.5,4.5,4.5,4.5,4.5,4.5,4.5,4.0,4.0,4.0,4.0],\"xaxis\":\"x\",\"y\":[22.638000000000005,19.943,11.319000000000003,20.482000000000003,13.475000000000001,8.624,15.631,14.553,0.0,0.0,0.0,0.0,14.061599999999999,14.061599999999999,15.065999999999999,10.044,17.0748,11.5506,5.5242,11.5506,4.0176,0.0,0.0,0.0,4.537800000000001,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,6.0504,0.0,13.104000000000003,9.072000000000001,11.591999999999999,0.0,0.0,0.0,8.568000000000001,5.04,0.0,5.04,16.2096,12.280000000000001,7.8591999999999995,3.9295999999999998,10.8064,10.3152,9.3328,9.824,0.0,0.0,0.0,4.912,4.912,0.0,0.0,0.0,8.564400000000001,9.9918,15.2256,6.661199999999999,13.322399999999998,12.370800000000001,13.322399999999998,13.322399999999998,2.379,0.0,0.0,19.062399999999997,14.4256,19.062399999999997,15.9712,9.7888,7.2128,9.7888,0.0,16.4864,5.151999999999999,0.0,20.102,17.457,17.457,0.0,17.986,14.812000000000001,5.290000000000001,7.406000000000001,0.0,5.290000000000001,14.355,15.84,17.325,15.84,4.95,16.83,6.93,0.0,0.0,14.3434,8.4082,10.386600000000001,9.397400000000001,7.4190000000000005,5.440600000000002,10.881200000000003,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,18.753,15.002399999999998,20.8962,18.2172,11.787600000000001,8.572799999999999,12.8592,0.0,0.0,0.0,17.985999999999997,21.689,12.166999999999998,13.225000000000001,12.166999999999998,16.399,17.457,13.754,12.696000000000002,17.985999999999997,5.29,10.842199999999998,16.0276,11.3136,0.0,13.670599999999999,7.071,8.485199999999999,3.2997999999999994,4.7139999999999995,3.7712,4.7139999999999995,11.785,3.2997999999999994,19.1368,17.625999999999998,11.0792,15.6116,14.1008,14.6044,7.0504,0.0,0.0,0.0,0.0,5.036,19.5312,18.0288,18.5296,15.524799999999999,0.0,0.0,7.0112000000000005,0.0,0.0,5.008,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.85,13.364999999999998,7.92,7.92,7.425,9.899999999999999,8.415,12.375,0.0,0.0,0.0,0.0,11.850000000000001,10.428,6.635999999999999,0.0,9.005999999999998,9.48,15.642,4.74,0.0,13.333599999999999,11.905,0.0,2.8571999999999997,8.0954,8.5716,11.905,0.0,0.0,3.3333999999999997,4.762],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Cost\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Total GW1-5 XP\"}},\"legend\":{\"tracegroupgap\":0,\"itemsizing\":\"constant\"},\"title\":{\"text\":\"Total GW1-5 XP vs Cost for Ds (Bubble size: Selected by Percent)\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('82ae91a3-e592-438f-a28d-0f5488b73cda');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"9363a1ab-9619-41c5-97e8-624d44b2184f\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"9363a1ab-9619-41c5-97e8-624d44b2184f\")) {                    Plotly.newPlot(                        \"9363a1ab-9619-41c5-97e8-624d44b2184f\",                        [{\"customdata\":[[17.3,\"Arsenal\",\"M\"],[3.2,\"Arsenal\",\"M\"],[2.0,\"Arsenal\",\"M\"],[1.5,\"Arsenal\",\"M\"],[1.6,\"Arsenal\",\"M\"],[7.4,\"Arsenal\",\"M\"],[1.0,\"Arsenal\",\"M\"],[0.1,\"Arsenal\",\"M\"],[0.7,\"Arsenal\",\"M\"],[0.5,\"Arsenal\",\"M\"],[1.9,\"Arsenal\",\"M\"],[0.2,\"Arsenal\",\"M\"],[0.3,\"Arsenal\",\"M\"],[0.2,\"Arsenal\",\"M\"],[22.9,\"Aston Villa\",\"M\"],[1.5,\"Aston Villa\",\"M\"],[0.4,\"Aston Villa\",\"M\"],[0.1,\"Aston Villa\",\"M\"],[0.0,\"Aston Villa\",\"M\"],[0.6,\"Aston Villa\",\"M\"],[0.8,\"Aston Villa\",\"M\"],[0.6,\"Aston Villa\",\"M\"],[0.3,\"Aston Villa\",\"M\"],[0.0,\"Aston Villa\",\"M\"],[0.1,\"Aston Villa\",\"M\"],[0.2,\"Aston Villa\",\"M\"],[1.8,\"Aston Villa\",\"M\"],[0.3,\"Aston Villa\",\"M\"],[0.4,\"Aston Villa\",\"M\"],[0.1,\"Aston Villa\",\"M\"],[0.5,\"Aston Villa\",\"M\"],[0.1,\"Bournemouth\",\"M\"],[0.0,\"Bournemouth\",\"M\"],[0.1,\"Bournemouth\",\"M\"],[0.1,\"Bournemouth\",\"M\"],[0.1,\"Bournemouth\",\"M\"],[0.1,\"Bournemouth\",\"M\"],[0.3,\"Bournemouth\",\"M\"],[0.2,\"Bournemouth\",\"M\"],[0.1,\"Bournemouth\",\"M\"],[0.1,\"Bournemouth\",\"M\"],[0.1,\"Bournemouth\",\"M\"],[12.6,\"Bournemouth\",\"M\"],[0.1,\"Bournemouth\",\"M\"],[0.1,\"Bournemouth\",\"M\"],[0.1,\"Bournemouth\",\"M\"],[5.1,\"Brentford\",\"M\"],[5.4,\"Brentford\",\"M\"],[0.3,\"Brentford\",\"M\"],[0.5,\"Brentford\",\"M\"],[0.2,\"Brentford\",\"M\"],[0.1,\"Brentford\",\"M\"],[0.6,\"Brentford\",\"M\"],[0.0,\"Brentford\",\"M\"],[0.1,\"Brentford\",\"M\"],[0.1,\"Brentford\",\"M\"],[0.3,\"Brentford\",\"M\"],[0.3,\"Brentford\",\"M\"],[0.3,\"Brentford\",\"M\"],[0.1,\"Brentford\",\"M\"],[0.5,\"Brentford\",\"M\"],[0.1,\"Brentford\",\"M\"],[2.2,\"Brighton\",\"M\"],[1.3,\"Brighton\",\"M\"],[0.1,\"Brighton\",\"M\"],[0.4,\"Brighton\",\"M\"],[0.5,\"Brighton\",\"M\"],[0.2,\"Brighton\",\"M\"],[0.1,\"Brighton\",\"M\"],[0.1,\"Brighton\",\"M\"],[0.1,\"Brighton\",\"M\"],[0.1,\"Brighton\",\"M\"],[0.1,\"Brighton\",\"M\"],[0.2,\"Brighton\",\"M\"],[0.1,\"Brighton\",\"M\"],[0.1,\"Brighton\",\"M\"],[0.1,\"Brighton\",\"M\"],[5.8,\"Burnley\",\"M\"],[0.5,\"Burnley\",\"M\"],[0.1,\"Burnley\",\"M\"],[0.8,\"Burnley\",\"M\"],[0.2,\"Burnley\",\"M\"],[0.1,\"Burnley\",\"M\"],[0.2,\"Burnley\",\"M\"],[0.2,\"Burnley\",\"M\"],[0.0,\"Burnley\",\"M\"],[0.2,\"Burnley\",\"M\"],[4.4,\"Burnley\",\"M\"],[0.3,\"Burnley\",\"M\"],[0.1,\"Burnley\",\"M\"],[0.1,\"Burnley\",\"M\"],[0.1,\"Burnley\",\"M\"],[0.1,\"Burnley\",\"M\"],[0.1,\"Burnley\",\"M\"],[0.1,\"Burnley\",\"M\"],[0.1,\"Burnley\",\"M\"],[0.1,\"Burnley\",\"M\"],[0.1,\"Burnley\",\"M\"],[51.1,\"Chelsea\",\"M\"],[4.9,\"Chelsea\",\"M\"],[4.5,\"Chelsea\",\"M\"],[0.5,\"Chelsea\",\"M\"],[0.4,\"Chelsea\",\"M\"],[0.2,\"Chelsea\",\"M\"],[7.6,\"Chelsea\",\"M\"],[0.1,\"Chelsea\",\"M\"],[0.1,\"Chelsea\",\"M\"],[0.1,\"Chelsea\",\"M\"],[0.0,\"Chelsea\",\"M\"],[0.5,\"Chelsea\",\"M\"],[0.1,\"Chelsea\",\"M\"],[0.1,\"Chelsea\",\"M\"],[8.6,\"Crystal Palace\",\"M\"],[2.0,\"Crystal Palace\",\"M\"],[0.0,\"Crystal Palace\",\"M\"],[0.3,\"Crystal Palace\",\"M\"],[0.1,\"Crystal Palace\",\"M\"],[0.1,\"Crystal Palace\",\"M\"],[0.1,\"Crystal Palace\",\"M\"],[0.6,\"Crystal Palace\",\"M\"],[0.1,\"Crystal Palace\",\"M\"],[0.1,\"Crystal Palace\",\"M\"],[1.7,\"Crystal Palace\",\"M\"],[0.1,\"Crystal Palace\",\"M\"],[0.1,\"Crystal Palace\",\"M\"],[0.2,\"Crystal Palace\",\"M\"],[0.1,\"Crystal Palace\",\"M\"],[0.0,\"Crystal Palace\",\"M\"],[0.0,\"Crystal Palace\",\"M\"],[11.7,\"Everton\",\"M\"],[1.2,\"Everton\",\"M\"],[0.4,\"Everton\",\"M\"],[0.1,\"Everton\",\"M\"],[0.1,\"Everton\",\"M\"],[0.1,\"Everton\",\"M\"],[0.4,\"Everton\",\"M\"],[0.1,\"Everton\",\"M\"],[0.1,\"Everton\",\"M\"],[0.1,\"Everton\",\"M\"],[0.0,\"Everton\",\"M\"],[1.3,\"Fulham\",\"M\"],[1.2,\"Fulham\",\"M\"],[0.4,\"Fulham\",\"M\"],[0.5,\"Fulham\",\"M\"],[0.2,\"Fulham\",\"M\"],[0.4,\"Fulham\",\"M\"],[0.1,\"Fulham\",\"M\"],[0.1,\"Fulham\",\"M\"],[0.1,\"Fulham\",\"M\"],[0.1,\"Fulham\",\"M\"],[0.1,\"Fulham\",\"M\"],[0.3,\"Fulham\",\"M\"],[0.3,\"Fulham\",\"M\"],[0.1,\"Leeds\",\"M\"],[0.9,\"Leeds\",\"M\"],[0.2,\"Leeds\",\"M\"],[1.1,\"Leeds\",\"M\"],[0.2,\"Leeds\",\"M\"],[0.2,\"Leeds\",\"M\"],[0.1,\"Leeds\",\"M\"],[0.1,\"Leeds\",\"M\"],[0.5,\"Leeds\",\"M\"],[0.1,\"Leeds\",\"M\"],[0.4,\"Leeds\",\"M\"],[0.1,\"Leeds\",\"M\"],[0.4,\"Leeds\",\"M\"],[0.1,\"Leeds\",\"M\"],[56.5,\"Liverpool\",\"M\"],[34.8,\"Liverpool\",\"M\"],[2.1,\"Liverpool\",\"M\"],[2.0,\"Liverpool\",\"M\"],[0.1,\"Liverpool\",\"M\"],[1.4,\"Liverpool\",\"M\"],[1.6,\"Liverpool\",\"M\"],[0.1,\"Liverpool\",\"M\"],[0.3,\"Liverpool\",\"M\"],[0.1,\"Liverpool\",\"M\"],[0.1,\"Liverpool\",\"M\"],[0.1,\"Liverpool\",\"M\"],[0.1,\"Liverpool\",\"M\"],[0.0,\"Liverpool\",\"M\"],[0.0,\"Liverpool\",\"M\"],[0.1,\"Liverpool\",\"M\"],[15.4,\"Manchester City\",\"M\"],[3.4,\"Manchester City\",\"M\"],[2.0,\"Manchester City\",\"M\"],[0.5,\"Manchester City\",\"M\"],[10.6,\"Manchester City\",\"M\"],[1.2,\"Manchester City\",\"M\"],[0.1,\"Manchester City\",\"M\"],[0.1,\"Manchester City\",\"M\"],[1.7,\"Manchester City\",\"M\"],[0.0,\"Manchester City\",\"M\"],[0.1,\"Manchester City\",\"M\"],[0.1,\"Manchester City\",\"M\"],[0.1,\"Manchester City\",\"M\"],[0.1,\"Manchester City\",\"M\"],[5.2,\"Manchester City\",\"M\"],[0.1,\"Manchester City\",\"M\"],[0.1,\"Manchester City\",\"M\"],[18.4,\"Manchester United\",\"M\"],[10.5,\"Manchester United\",\"M\"],[12.4,\"Manchester United\",\"M\"],[0.8,\"Manchester United\",\"M\"],[3.5,\"Manchester United\",\"M\"],[0.2,\"Manchester United\",\"M\"],[0.1,\"Manchester United\",\"M\"],[0.1,\"Manchester United\",\"M\"],[0.1,\"Manchester United\",\"M\"],[0.2,\"Manchester United\",\"M\"],[1.0,\"Manchester United\",\"M\"],[0.2,\"Manchester United\",\"M\"],[0.2,\"Manchester United\",\"M\"],[0.0,\"Manchester United\",\"M\"],[0.1,\"Manchester United\",\"M\"],[0.1,\"Manchester United\",\"M\"],[0.0,\"Manchester United\",\"M\"],[2.9,\"Newcastle United\",\"M\"],[10.5,\"Newcastle United\",\"M\"],[0.5,\"Newcastle United\",\"M\"],[1.4,\"Newcastle United\",\"M\"],[2.9,\"Newcastle United\",\"M\"],[0.4,\"Newcastle United\",\"M\"],[2.4,\"Newcastle United\",\"M\"],[0.1,\"Newcastle United\",\"M\"],[0.2,\"Newcastle United\",\"M\"],[0.1,\"Newcastle United\",\"M\"],[0.1,\"Newcastle United\",\"M\"],[3.3,\"Newcastle United\",\"M\"],[0.2,\"Newcastle United\",\"M\"],[4.3,\"Nottingham Forest\",\"M\"],[2.3,\"Nottingham Forest\",\"M\"],[2.5,\"Nottingham Forest\",\"M\"],[0.1,\"Nottingham Forest\",\"M\"],[0.0,\"Nottingham Forest\",\"M\"],[0.0,\"Nottingham Forest\",\"M\"],[0.1,\"Nottingham Forest\",\"M\"],[0.2,\"Nottingham Forest\",\"M\"],[0.2,\"Nottingham Forest\",\"M\"],[0.1,\"Nottingham Forest\",\"M\"],[2.9,\"Sunderland\",\"M\"],[0.2,\"Sunderland\",\"M\"],[0.1,\"Sunderland\",\"M\"],[0.1,\"Sunderland\",\"M\"],[1.6,\"Sunderland\",\"M\"],[0.1,\"Sunderland\",\"M\"],[0.1,\"Sunderland\",\"M\"],[0.1,\"Sunderland\",\"M\"],[0.1,\"Sunderland\",\"M\"],[0.1,\"Sunderland\",\"M\"],[0.2,\"Sunderland\",\"M\"],[0.4,\"Sunderland\",\"M\"],[0.1,\"Sunderland\",\"M\"],[0.1,\"Sunderland\",\"M\"],[0.1,\"Sunderland\",\"M\"],[0.2,\"Sunderland\",\"M\"],[0.1,\"Sunderland\",\"M\"],[3.1,\"Tottenham\",\"M\"],[3.2,\"Tottenham\",\"M\"],[3.3,\"Tottenham\",\"M\"],[27.2,\"Tottenham\",\"M\"],[0.0,\"Tottenham\",\"M\"],[0.2,\"Tottenham\",\"M\"],[0.1,\"Tottenham\",\"M\"],[0.2,\"Tottenham\",\"M\"],[0.1,\"Tottenham\",\"M\"],[0.1,\"Tottenham\",\"M\"],[0.1,\"Tottenham\",\"M\"],[0.1,\"Tottenham\",\"M\"],[0.2,\"Tottenham\",\"M\"],[0.1,\"Tottenham\",\"M\"],[0.9,\"Tottenham\",\"M\"],[0.2,\"Tottenham\",\"M\"],[0.2,\"Tottenham\",\"M\"],[0.6,\"West Ham\",\"M\"],[0.8,\"West Ham\",\"M\"],[0.4,\"West Ham\",\"M\"],[0.0,\"West Ham\",\"M\"],[0.2,\"West Ham\",\"M\"],[0.1,\"West Ham\",\"M\"],[0.1,\"West Ham\",\"M\"],[0.1,\"West Ham\",\"M\"],[0.2,\"West Ham\",\"M\"],[0.3,\"West Ham\",\"M\"],[0.2,\"West Ham\",\"M\"],[0.7,\"West Ham\",\"M\"],[0.2,\"Wolverhampton Wanderers\",\"M\"],[0.1,\"Wolverhampton Wanderers\",\"M\"],[0.1,\"Wolverhampton Wanderers\",\"M\"],[0.1,\"Wolverhampton Wanderers\",\"M\"],[0.1,\"Wolverhampton Wanderers\",\"M\"],[0.1,\"Wolverhampton Wanderers\",\"M\"],[0.1,\"Wolverhampton Wanderers\",\"M\"],[0.1,\"Wolverhampton Wanderers\",\"M\"],[0.3,\"Wolverhampton Wanderers\",\"M\"],[0.4,\"Wolverhampton Wanderers\",\"M\"],[1.0,\"Wolverhampton Wanderers\",\"M\"],[0.8,\"Wolverhampton Wanderers\",\"M\"],[1.0,\"Wolverhampton Wanderers\",\"M\"]],\"hovertemplate\":\"\\u003cb\\u003e%{hovertext}\\u003c\\u002fb\\u003e\\u003cbr\\u003e\\u003cbr\\u003eCost=%{x}\\u003cbr\\u003eTotal GW1-5 XP=%{y}\\u003cbr\\u003eselected_by_percent=%{customdata[0]}\\u003cbr\\u003eteam=%{customdata[1]}\\u003cbr\\u003epos=%{customdata[2]}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"hovertext\":[\"Saka\",\"Ødegaard\",\"Madueke\",\"Martinelli\",\"Trossard\",\"Rice\",\"Merino\",\"Fábio Vieira\",\"Nørgaard\",\"Nwaneri\",\"Zubimendi\",\"Nelson\",\"Kabia\",\"Sambi\",\"Rogers\",\"Tielemans\",\"Bailey\",\"Buendía\",\"Iling Jr\",\"J.Ramsey\",\"Malen\",\"McGinn\",\"Barkley\",\"Barrenechea\",\"Dobbin\",\"Kamara\",\"Onana\",\"Broggio\",\"Dendoncker\",\"Jimoh-Aloba\",\"Young\",\"Anthony\",\"Benson\",\"Bruun Larsen\",\"Boateng\",\"Churlinov\",\"Cullen\",\"Edwards\",\"Hannibal\",\"Koleosho\",\"Laurent\",\"Tchaouna\",\"A.Ramsey\",\"Adewumi\",\"Banel\",\"Trésor\",\"Kluivert\",\"Semenyo\",\"O.Dango\",\"Tavernier\",\"Adams\",\"Brooks\",\"Christie\",\"Cook\",\"Philip\",\"Scott\",\"Sinisterra\",\"Faivre\",\"H.Traorè\",\"Sadi\",\"Silcott-Duberry\",\"Winterburn\",\"Schade\",\"Damsgaard\",\"Milambo\",\"Carvalho\",\"Henderson\",\"Janelt\",\"Jensen\",\"Nunes\",\"Onyeka\",\"Yarmoliuk\",\"Donovan\",\"Konak\",\"Maghoma\",\"Peart-Harris\",\"Trevitt\",\"Mitoma\",\"Georginio\",\"March\",\"Minteh\",\"Enciso\",\"Gruda\",\"Hinshelwood\",\"O'Riley\",\"Sima\",\"Ayari\",\"Baleba\",\"Buonanotte\",\"Gomez\",\"Milner\",\"Sarmiento\",\"Watson\",\"Wieffer\",\"Yalcouye\",\"Knight\",\"Mazilu\",\"Moran\",\"Palmer\",\"Neto\",\"Enzo\",\"Estêvão\",\"Gittens\",\"Nkunku\",\"Caicedo\",\"Dewsbury-Hall\",\"George\",\"Lavia\",\"Mudryk\",\"Andrey Santos\",\"D.Essugo\",\"Paez\",\"Eze\",\"Sarr\",\"Doucouré\",\"Esse\",\"Hughes\",\"Kamada\",\"Lerma\",\"Wharton\",\"Agbinone\",\"Ahamada\",\"Devenny\",\"Ebiowei\",\"J.Rak-Sakyi\",\"M.França\",\"Ozoh\",\"Rodney\",\"Umeh\",\"Ndiaye\",\"McNeil\",\"Alcaraz\",\"Gana\",\"Garner\",\"Iroegbunam\",\"Armstrong\",\"Bates\",\"Ebere\",\"Heath\",\"Metcalfe\",\"Iwobi\",\"Smith Rowe\",\"Adama\",\"Andreas\",\"Sessegnon\",\"Wilson\",\"Berge\",\"Cairney\",\"Lukić\",\"Godo\",\"Harris\",\"King\",\"Reed\",\"Aaronson\",\"Gnonto\",\"Harrison\",\"James\",\"Ampadu\",\"Greenwood\",\"Gruev\",\"Ramazani\",\"Tanaka\",\"Crew\",\"Gelhardt\",\"Gyabi\",\"Longstaff\",\"Stach\",\"M.Salah\",\"Wirtz\",\"Luis Díaz\",\"Gakpo\",\"Chiesa\",\"Mac Allister\",\"Szoboszlai\",\"C.Jones\",\"Elliott\",\"Gravenberch\",\"Doak\",\"Endo\",\"Bajcetic\",\"McConnell\",\"Morton\",\"Nyoni\",\"Marmoush\",\"Foden\",\"Savinho\",\"Bernardo\",\"Cherki\",\"Doku\",\"Grealish\",\"Gündoğan\",\"Rodrigo\",\"Kovačić\",\"N.Gonzalez\",\"Bobb\",\"Echeverri\",\"McAtee\",\"Reijnders\",\"Nypan\",\"Phillips\",\"Mbeumo\",\"B.Fernandes\",\"Cunha\",\"Rashford\",\"Amad\",\"Garnacho\",\"Antony\",\"Mount\",\"Sancho\",\"Casemiro\",\"Mainoo\",\"Ugarte\",\"Collyer\",\"Fitzgerald\",\"J.Fletcher\",\"Kone\",\"Moorhouse\",\"Gordon\",\"Elanga\",\"Barnes\",\"Bruno G.\",\"J.Murphy\",\"Joelinton\",\"Tonali\",\"Antoñito C.\",\"Willock\",\"Hayden\",\"Kuol\",\"L.Miley\",\"White\",\"Gibbs-White\",\"Hudson-Odoi\",\"Anderson\",\"Jota\",\"Dominguez\",\"O'Brien\",\"Sangaré\",\"Yates\",\"Da Silva Moreira\",\"Stamenic\",\"Adingra\",\"Diarra\",\"Roberts\",\"Aleksić\",\"E.Le Fée\",\"Mundle\",\"Neil\",\"Poveda\",\"Rigg\",\"Sadiki\",\"Talbi\",\"Ba\",\"Browne\",\"Ekwah\",\"H.Jones\",\"Matete\",\"Triantis\",\"Son\",\"Johnson\",\"Maddison\",\"Kudus\",\"Kulusevski\",\"Tel\",\"Bentancur\",\"Bergvall\",\"Bissouma\",\"Odobert\",\"Solomon\",\"Bryan\",\"Gray\",\"Moore\",\"P.M.Sarr\",\"Min-hyeok\",\"Olusesi\",\"L.Paquetá\",\"Souček\",\"Ward-Prowse\",\"Summerville\",\"Álvarez\",\"Cornet\",\"G.Rodriguez\",\"L.Guilherme\",\"Earthy\",\"Irving\",\"Orford\",\"Potts\",\"Hee Chan\",\"André\",\"Bellegarde\",\"Fer López\",\"Gomes\",\"Guedes\",\"Munetsi\",\"B.Traore\",\"Chirewa\",\"Edozie\",\"Gonzalez\",\"Hodge\",\"J.Arias\"],\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"size\":[17.3,3.2,2.0,1.5,1.6,7.4,1.0,0.1,0.7,0.5,1.9,0.2,0.3,0.2,22.9,1.5,0.4,0.1,0.0,0.6,0.8,0.6,0.3,0.0,0.1,0.2,1.8,0.3,0.4,0.1,0.5,0.1,0.0,0.1,0.1,0.1,0.1,0.3,0.2,0.1,0.1,0.1,12.6,0.1,0.1,0.1,5.1,5.4,0.3,0.5,0.2,0.1,0.6,0.0,0.1,0.1,0.3,0.3,0.3,0.1,0.5,0.1,2.2,1.3,0.1,0.4,0.5,0.2,0.1,0.1,0.1,0.1,0.1,0.2,0.1,0.1,0.1,5.8,0.5,0.1,0.8,0.2,0.1,0.2,0.2,0.0,0.2,4.4,0.3,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,51.1,4.9,4.5,0.5,0.4,0.2,7.6,0.1,0.1,0.1,0.0,0.5,0.1,0.1,8.6,2.0,0.0,0.3,0.1,0.1,0.1,0.6,0.1,0.1,1.7,0.1,0.1,0.2,0.1,0.0,0.0,11.7,1.2,0.4,0.1,0.1,0.1,0.4,0.1,0.1,0.1,0.0,1.3,1.2,0.4,0.5,0.2,0.4,0.1,0.1,0.1,0.1,0.1,0.3,0.3,0.1,0.9,0.2,1.1,0.2,0.2,0.1,0.1,0.5,0.1,0.4,0.1,0.4,0.1,56.5,34.8,2.1,2.0,0.1,1.4,1.6,0.1,0.3,0.1,0.1,0.1,0.1,0.0,0.0,0.1,15.4,3.4,2.0,0.5,10.6,1.2,0.1,0.1,1.7,0.0,0.1,0.1,0.1,0.1,5.2,0.1,0.1,18.4,10.5,12.4,0.8,3.5,0.2,0.1,0.1,0.1,0.2,1.0,0.2,0.2,0.0,0.1,0.1,0.0,2.9,10.5,0.5,1.4,2.9,0.4,2.4,0.1,0.2,0.1,0.1,3.3,0.2,4.3,2.3,2.5,0.1,0.0,0.0,0.1,0.2,0.2,0.1,2.9,0.2,0.1,0.1,1.6,0.1,0.1,0.1,0.1,0.1,0.2,0.4,0.1,0.1,0.1,0.2,0.1,3.1,3.2,3.3,27.2,0.0,0.2,0.1,0.2,0.1,0.1,0.1,0.1,0.2,0.1,0.9,0.2,0.2,0.6,0.8,0.4,0.0,0.2,0.1,0.1,0.1,0.2,0.3,0.2,0.7,0.2,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.3,0.4,1.0,0.8,1.0],\"sizemode\":\"area\",\"sizeref\":0.14125,\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[10.0,8.0,7.0,7.0,7.0,6.5,6.0,5.5,5.5,5.5,5.5,5.0,4.5,4.5,7.0,6.0,5.5,5.5,5.5,5.5,5.5,5.5,5.0,5.0,5.0,5.0,5.0,4.5,4.5,4.5,4.5,5.5,5.5,5.5,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,4.5,4.5,4.5,4.5,7.0,7.0,6.0,5.5,5.0,5.0,5.0,5.0,5.0,5.0,5.0,4.5,4.5,4.5,4.5,4.5,7.0,6.0,5.5,5.0,5.0,5.0,5.0,5.0,5.0,5.0,4.5,4.5,4.5,4.5,4.5,6.5,6.0,6.0,6.0,5.5,5.5,5.5,5.5,5.5,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,4.5,4.5,4.5,10.5,7.0,6.5,6.5,6.5,6.0,5.5,5.0,5.0,5.0,5.0,4.5,4.5,4.5,7.5,6.5,5.0,5.0,5.0,5.0,5.0,5.0,4.5,4.5,4.5,4.5,4.5,4.5,4.5,4.5,4.5,6.5,6.0,5.5,5.5,5.0,5.0,4.5,4.5,4.5,4.5,4.5,6.5,6.0,5.5,5.5,5.5,5.5,5.0,5.0,5.0,4.5,4.5,4.5,4.5,5.5,5.5,5.5,5.5,5.0,5.0,5.0,5.0,5.0,4.5,4.5,4.5,5.0,5.0,14.5,8.5,8.0,7.5,6.5,6.5,6.5,5.5,5.5,5.5,5.0,5.0,4.5,4.5,4.5,4.5,8.5,8.0,7.0,6.5,6.5,6.5,6.5,6.5,6.5,6.0,6.0,5.5,5.5,5.5,5.5,5.0,5.0,8.0,9.0,8.0,7.0,6.5,6.5,6.0,6.0,6.0,5.5,5.0,5.0,4.5,4.5,4.5,4.5,4.5,7.5,7.0,6.5,6.5,6.5,6.0,5.5,5.0,5.0,4.5,4.5,4.5,4.5,7.5,6.0,5.5,5.5,5.0,5.0,5.0,5.0,4.5,4.5,5.5,5.5,5.5,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,4.5,4.5,4.5,4.5,4.5,4.5,8.5,7.0,7.0,6.5,6.5,6.5,5.5,5.5,5.5,5.5,5.5,5.0,5.0,5.0,5.0,4.5,4.5,6.0,6.0,6.0,5.5,5.0,5.0,5.0,5.0,4.5,4.5,4.5,4.5,6.0,5.5,5.5,5.5,5.5,5.5,5.5,5.0,4.5,4.5,4.5,4.5,5.5],\"xaxis\":\"x\",\"y\":[27.489,21.021,20.482000000000003,20.482000000000003,21.560000000000002,19.404,17.787,0.0,16.709000000000003,13.475000000000001,0.0,11.858,0.0,0.0,22.0968,17.0748,10.044,4.5198,0.0,11.5506,12.0528,11.5506,11.0484,0.0,0.0,11.0484,12.555,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,23.183999999999997,22.68,17.64,15.12,10.584,9.072000000000001,13.104000000000003,11.591999999999999,5.04,6.552000000000001,9.576,0.0,0.0,0.0,5.04,5.04,19.1568,16.7008,0.0,8.841600000000001,0.0,11.2976,7.8591999999999995,4.912,4.912,6.876799999999999,0.0,4.912,4.912,0.0,4.912,19.032,16.1772,4.2822000000000005,15.2256,11.4192,9.9918,16.1772,11.4192,0.0,10.467600000000001,12.370800000000001,11.4192,9.040199999999999,7.137,4.758,0.0,9.9918,0.0,0.0,0.0,0.0,29.8816,15.456,19.5776,0.0,0.0,11.334399999999999,13.395199999999999,7.2128,10.819199999999999,8.2432,5.151999999999999,0.0,0.0,0.0,23.276000000000003,20.631,7.9350000000000005,16.399000000000004,10.580000000000002,6.877,9.522000000000002,11.109,5.290000000000001,0.0,7.9350000000000005,0.0,0.0,11.638000000000002,0.0,0.0,0.0,17.325,21.78,13.86,11.88,9.9,5.94,3.465,0.0,0.0,0.0,0.0,20.2786,16.8164,12.859600000000002,12.365000000000002,17.805600000000002,15.332600000000001,8.4082,6.429800000000001,9.397400000000001,4.9460000000000015,0.0,5.935200000000001,3.9568000000000003,0.0,0.0,11.6352,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,6.7872,0.0,48.757799999999996,0.0,27.325799999999994,19.2888,6.4296,18.753,21.432000000000002,13.9308,9.6444,13.395,0.0,5.893800000000001,0.0,0.0,0.0,0.0,24.333999999999996,20.102,19.573,17.457,0.0,15.87,10.051,15.341,5.29,18.515,14.812000000000001,5.29,5.29,11.109,0.0,0.0,7.406000000000001,29.226799999999997,22.6272,25.4556,17.913199999999996,23.57,13.670599999999999,4.7139999999999995,7.071,13.199199999999998,9.427999999999999,8.0138,8.0138,4.7139999999999995,0.0,0.0,0.0,0.0,18.1296,20.144,19.640399999999996,18.1296,22.662,17.1224,14.6044,0.0,7.0504,0.0,0.0,7.554,0.0,22.536,16.5264,14.523200000000001,8.5136,8.0128,0.0,7.512,9.5152,5.008,0.0,9.1896,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,21.284999999999997,20.79,21.284999999999997,16.335,18.314999999999998,15.84,9.405,7.92,8.91,10.395,0.0,0.0,7.92,9.405,9.899999999999999,0.0,0.0,11.376,17.064,9.954,8.058,6.635999999999999,2.37,7.5840000000000005,4.74,0.0,4.266,4.74,0.0,8.5716,8.5716,12.3812,0.0,11.428799999999999,10.0002,17.1432,4.762,0.0,0.0,0.0,0.0,0.0],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Cost\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Total GW1-5 XP\"}},\"legend\":{\"tracegroupgap\":0,\"itemsizing\":\"constant\"},\"title\":{\"text\":\"Total GW1-5 XP vs Cost for Ms (Bubble size: Selected by Percent)\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('9363a1ab-9619-41c5-97e8-624d44b2184f');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"fa7c0c4e-abb0-4410-a03e-240d8cf54b1f\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"fa7c0c4e-abb0-4410-a03e-240d8cf54b1f\")) {                    Plotly.newPlot(                        \"fa7c0c4e-abb0-4410-a03e-240d8cf54b1f\",                        [{\"customdata\":[[1.8,\"Arsenal\",\"F\"],[0.0,\"Arsenal\",\"F\"],[14.1,\"Arsenal\",\"F\"],[10.4,\"Aston Villa\",\"F\"],[0.9,\"Aston Villa\",\"F\"],[0.3,\"Bournemouth\",\"F\"],[0.5,\"Bournemouth\",\"F\"],[0.4,\"Bournemouth\",\"F\"],[5.2,\"Bournemouth\",\"F\"],[0.9,\"Bournemouth\",\"F\"],[2.6,\"Brentford\",\"F\"],[0.0,\"Brentford\",\"F\"],[0.5,\"Brentford\",\"F\"],[2.0,\"Brentford\",\"F\"],[8.4,\"Brighton\",\"F\"],[0.8,\"Brighton\",\"F\"],[0.6,\"Brighton\",\"F\"],[8.1,\"Burnley\",\"F\"],[0.3,\"Burnley\",\"F\"],[0.1,\"Burnley\",\"F\"],[0.8,\"Burnley\",\"F\"],[57.2,\"Chelsea\",\"F\"],[4.7,\"Chelsea\",\"F\"],[0.1,\"Chelsea\",\"F\"],[0.8,\"Chelsea\",\"F\"],[5.9,\"Crystal Palace\",\"F\"],[1.6,\"Crystal Palace\",\"F\"],[1.0,\"Crystal Palace\",\"F\"],[0.4,\"Crystal Palace\",\"F\"],[1.6,\"Everton\",\"F\"],[15.4,\"Everton\",\"F\"],[0.2,\"Everton\",\"F\"],[0.3,\"Everton\",\"F\"],[2.4,\"Fulham\",\"F\"],[2.6,\"Fulham\",\"F\"],[3.5,\"Leeds\",\"F\"],[3.4,\"Leeds\",\"F\"],[0.3,\"Leeds\",\"F\"],[0.9,\"Leeds\",\"F\"],[1.9,\"Liverpool\",\"F\"],[0.2,\"Liverpool\",\"F\"],[4.6,\"Liverpool\",\"F\"],[18.1,\"Manchester City\",\"F\"],[0.9,\"Manchester United\",\"F\"],[1.2,\"Manchester United\",\"F\"],[6.2,\"Manchester United\",\"F\"],[0.2,\"Manchester United\",\"F\"],[34.1,\"Newcastle United\",\"F\"],[0.2,\"Newcastle United\",\"F\"],[0.3,\"Newcastle United\",\"F\"],[14.8,\"Nottingham Forest\",\"F\"],[1.5,\"Nottingham Forest\",\"F\"],[0.7,\"Nottingham Forest\",\"F\"],[0.4,\"Sunderland\",\"F\"],[0.6,\"Sunderland\",\"F\"],[1.3,\"Sunderland\",\"F\"],[0.3,\"Sunderland\",\"F\"],[0.4,\"Sunderland\",\"F\"],[16.4,\"Tottenham\",\"F\"],[0.9,\"Tottenham\",\"F\"],[0.4,\"Tottenham\",\"F\"],[0.9,\"Tottenham\",\"F\"],[20.0,\"West Ham\",\"F\"],[1.2,\"West Ham\",\"F\"],[0.9,\"West Ham\",\"F\"],[6.2,\"Wolverhampton Wanderers\",\"F\"],[0.7,\"Wolverhampton Wanderers\",\"F\"],[0.2,\"Wolverhampton Wanderers\",\"F\"],[0.1,\"Wolverhampton Wanderers\",\"F\"],[2.9,\"Wolverhampton Wanderers\",\"F\"]],\"hovertemplate\":\"\\u003cb\\u003e%{hovertext}\\u003c\\u002fb\\u003e\\u003cbr\\u003e\\u003cbr\\u003eCost=%{x}\\u003cbr\\u003eTotal GW1-5 XP=%{y}\\u003cbr\\u003eselected_by_percent=%{customdata[0]}\\u003cbr\\u003eteam=%{customdata[1]}\\u003cbr\\u003epos=%{customdata[2]}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"hovertext\":[\"Havertz\",\"G.Jesus\",\"Gyökeres\",\"Watkins\",\"Redmond\",\"Flemming\",\"Amdouni\",\"Foster\",\"Barnes\",\"Obafemi\",\"Evanilson\",\"Enes Ünal\",\"Adu-Adjei\",\"Kroupi.Jr\",\"Wissa\",\"Thiago\",\"Morgan\",\"Welbeck\",\"Ferguson\",\"Tzimas\",\"Kostoulas\",\"João Pedro\",\"Delap\",\"N.Jackson\",\"Marc Guiu\",\"Mateta\",\"Nketiah\",\"Édouard\",\"Marsh\",\"Barry\",\"Beto\",\"Y.Chermiti\",\"Sherif\",\"Raúl\",\"Muniz\",\"Piroe\",\"Bamford\",\"Mateo Joseph\",\"Nmecha\",\"Darwin\",\"Danns\",\"Ekitiké\",\"Haaland\",\"Højlund\",\"Zirkzee\",\"Obi\",\"Wheatley\",\"Isak\",\"Osula\",\"Neave\",\"Wood\",\"Igor Jesus\",\"Awoniyi\",\"Isidor\",\"Mayenda\",\"Abdullahi\",\"Luís Hemir\",\"Rusyn\",\"Solanke\",\"Richarlison\",\"Lankshear\",\"Scarlett\",\"Bowen\",\"Füllkrug\",\"Marshall\",\"Strand Larsen\",\"Fábio Silva\",\"Kalajdžić\",\"Chiwome\",\"Fraser\"],\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"size\":[1.8,0.0,14.1,10.4,0.9,0.3,0.5,0.4,5.2,0.9,2.6,0.0,0.5,2.0,8.4,0.8,0.6,8.1,0.3,0.1,0.8,57.2,4.7,0.1,0.8,5.9,1.6,1.0,0.4,1.6,15.4,0.2,0.3,2.4,2.6,3.5,3.4,0.3,0.9,1.9,0.2,4.6,18.1,0.9,1.2,6.2,0.2,34.1,0.2,0.3,14.8,1.5,0.7,0.4,0.6,1.3,0.3,0.4,16.4,0.9,0.4,0.9,20.0,1.2,0.9,6.2,0.7,0.2,0.1,2.9],\"sizemode\":\"area\",\"sizeref\":0.14300000000000002,\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[7.5,6.5,9.0,9.0,4.5,5.5,5.0,5.0,4.5,4.5,7.0,5.5,4.5,4.5,7.5,6.0,4.5,6.5,5.5,5.5,5.0,7.5,6.5,6.5,4.5,7.5,5.5,5.0,4.5,6.0,5.5,5.0,4.5,6.5,5.5,5.5,5.0,5.0,5.0,6.5,4.5,8.5,14.0,6.5,6.0,4.5,4.5,10.5,5.5,4.5,7.5,6.0,5.5,5.5,5.5,4.5,4.5,4.5,7.5,6.5,4.5,4.5,8.0,6.0,4.5,6.5,5.0,5.0,4.5,4.5],\"xaxis\":\"x\",\"y\":[22.638000000000005,13.475000000000001,0.0,24.607799999999997,0.0,0.0,0.0,0.0,0.0,0.0,20.663999999999998,9.576,0.0,0.0,26.0336,5.4032,0.0,19.9836,6.1854000000000005,0.0,0.0,24.214399999999998,18.5472,20.607999999999997,5.151999999999999,21.689,9.522000000000002,6.348,0.0,0.0,14.355,3.96,0.0,19.2894,13.848800000000002,0.0,0.0,0.0,0.0,11.787600000000001,5.3580000000000005,0.0,30.682,11.3136,9.427999999999999,4.7139999999999995,0.0,31.2232,7.0504,0.0,28.044800000000002,0.0,6.009600000000001,0.0,0.0,0.0,0.0,0.0,19.799999999999997,11.384999999999998,4.949999999999999,9.899999999999999,27.018,10.902000000000001,0.0,19.5242,0.0,0.0,0.0,0.0],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Cost\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Total GW1-5 XP\"}},\"legend\":{\"tracegroupgap\":0,\"itemsizing\":\"constant\"},\"title\":{\"text\":\"Total GW1-5 XP vs Cost for Fs (Bubble size: Selected by Percent)\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('fa7c0c4e-abb0-4410-a03e-240d8cf54b1f');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "93e49ec0",
        "outputId": "0998d28c-f284-4147-c4df-c45de0627cb6"
      },
      "source": [
        "positions = ['G', 'D', 'M', 'F']\n",
        "\n",
        "for pos in positions:\n",
        "    print(f\"--- {pos} ---\")\n",
        "\n",
        "    # Filter data by position\n",
        "    pos_df = master_with_xp[master_with_xp['pos'] == pos].copy()\n",
        "\n",
        "    # Get the top 10 most selected players\n",
        "    top_10_selected = pos_df.nlargest(10, 'selected_by_percent')\n",
        "    print(f\"\\nTop 10 Most Selected {pos}s:\")\n",
        "    display(top_10_selected[['name', 'team', 'selected_by_percent', 'Total GW1-5 XP']])\n",
        "\n",
        "    # Get players not in the top 10 most selected\n",
        "    other_players = pos_df[~pos_df['id'].isin(top_10_selected['id'])]\n",
        "\n",
        "    # Get the top 10 players by Total GW1-5 XP from the remaining players\n",
        "    top_10_xp_not_selected = other_players.nlargest(10, 'Total GW1-5 XP')\n",
        "\n",
        "    print(f\"\\nTop 10 {pos}s by Total GW1-5 XP (excluding Top 10 Selected):\")\n",
        "    display(top_10_xp_not_selected[['name', 'team', 'selected_by_percent', 'Total GW1-5 XP']])\n",
        "\n",
        "    print(\"\\n\")"
      ],
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- G ---\n",
            "\n",
            "Top 10 Most Selected Gs:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "           name               team  selected_by_percent  Total GW1-5 XP\n",
              "140    Kelleher           Brighton                 32.1         22.1040\n",
              "0          Raya            Arsenal                 18.5         19.9430\n",
              "507        Sels  Nottingham Forest                 17.8         19.5312\n",
              "220     Sánchez            Chelsea                 13.7         20.0928\n",
              "287    Pickford            Everton                 13.2         20.7900\n",
              "476    Dúbravka   Newcastle United                 11.3         22.1584\n",
              "370    A.Becker          Liverpool                 10.3         21.4320\n",
              "342      Darlow              Leeds                  8.5          0.0000\n",
              "177  Verbruggen            Burnley                  6.6         13.7982\n",
              "605      Areola           West Ham                  6.3         12.7980"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8e2d2f12-fdf6-41ba-9f13-74cc5e77f9fa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>team</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>Total GW1-5 XP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>140</th>\n",
              "      <td>Kelleher</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>32.1</td>\n",
              "      <td>22.1040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Raya</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>18.5</td>\n",
              "      <td>19.9430</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>507</th>\n",
              "      <td>Sels</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>17.8</td>\n",
              "      <td>19.5312</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220</th>\n",
              "      <td>Sánchez</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>13.7</td>\n",
              "      <td>20.0928</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>287</th>\n",
              "      <td>Pickford</td>\n",
              "      <td>Everton</td>\n",
              "      <td>13.2</td>\n",
              "      <td>20.7900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>476</th>\n",
              "      <td>Dúbravka</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>11.3</td>\n",
              "      <td>22.1584</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>370</th>\n",
              "      <td>A.Becker</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>10.3</td>\n",
              "      <td>21.4320</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>342</th>\n",
              "      <td>Darlow</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>8.5</td>\n",
              "      <td>0.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>Verbruggen</td>\n",
              "      <td>Burnley</td>\n",
              "      <td>6.6</td>\n",
              "      <td>13.7982</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>605</th>\n",
              "      <td>Areola</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>6.3</td>\n",
              "      <td>12.7980</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8e2d2f12-fdf6-41ba-9f13-74cc5e77f9fa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8e2d2f12-fdf6-41ba-9f13-74cc5e77f9fa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8e2d2f12-fdf6-41ba-9f13-74cc5e77f9fa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-3e12107d-144b-48ce-b482-abfc68e02aa1\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3e12107d-144b-48ce-b482-abfc68e02aa1')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-3e12107d-144b-48ce-b482-abfc68e02aa1 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(\\\"\\\\n\\\")\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Verbruggen\",\n          \"Raya\",\n          \"D\\u00fabravka\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Burnley\",\n          \"Arsenal\",\n          \"Newcastle United\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"selected_by_percent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.659569178485172,\n        \"min\": 6.3,\n        \"max\": 32.1,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          6.6,\n          18.5,\n          11.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total GW1-5 XP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.8920857470644465,\n        \"min\": 0.0,\n        \"max\": 22.1584,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          13.798200000000001,\n          19.943,\n          22.1584\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Top 10 Gs by Total GW1-5 XP (excluding Top 10 Selected):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "             name                     team  selected_by_percent  \\\n",
              "404    Ederson M.          Manchester City                  3.7   \n",
              "635       Bentley  Wolverhampton Wanderers                  1.1   \n",
              "176        Steele                  Burnley                  0.4   \n",
              "253     Henderson           Crystal Palace                  3.2   \n",
              "288       Travers                  Everton                  0.2   \n",
              "1    Arrizabalaga                  Arsenal                  1.0   \n",
              "475          Pope         Newcastle United                  4.0   \n",
              "105          Neto                Brentford                  1.2   \n",
              "438         Onana        Manchester United                  0.1   \n",
              "221     Jörgensen                  Chelsea                  0.2   \n",
              "\n",
              "     Total GW1-5 XP  \n",
              "404         22.7470  \n",
              "635         21.4290  \n",
              "176         21.4110  \n",
              "253         19.0440  \n",
              "288         18.8100  \n",
              "1           18.3260  \n",
              "475         18.1296  \n",
              "105         17.6400  \n",
              "438         16.4990  \n",
              "221         15.4560  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-be594964-971e-4229-9241-aa8e1803f656\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>team</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>Total GW1-5 XP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>404</th>\n",
              "      <td>Ederson M.</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>3.7</td>\n",
              "      <td>22.7470</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>635</th>\n",
              "      <td>Bentley</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>1.1</td>\n",
              "      <td>21.4290</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>Steele</td>\n",
              "      <td>Burnley</td>\n",
              "      <td>0.4</td>\n",
              "      <td>21.4110</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>253</th>\n",
              "      <td>Henderson</td>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>3.2</td>\n",
              "      <td>19.0440</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>288</th>\n",
              "      <td>Travers</td>\n",
              "      <td>Everton</td>\n",
              "      <td>0.2</td>\n",
              "      <td>18.8100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Arrizabalaga</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>1.0</td>\n",
              "      <td>18.3260</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>475</th>\n",
              "      <td>Pope</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>4.0</td>\n",
              "      <td>18.1296</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>105</th>\n",
              "      <td>Neto</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>1.2</td>\n",
              "      <td>17.6400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>438</th>\n",
              "      <td>Onana</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>0.1</td>\n",
              "      <td>16.4990</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>221</th>\n",
              "      <td>Jörgensen</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>0.2</td>\n",
              "      <td>15.4560</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-be594964-971e-4229-9241-aa8e1803f656')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-be594964-971e-4229-9241-aa8e1803f656 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-be594964-971e-4229-9241-aa8e1803f656');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7470c7f1-722f-4fa7-8789-aa2cfe669733\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7470c7f1-722f-4fa7-8789-aa2cfe669733')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7470c7f1-722f-4fa7-8789-aa2cfe669733 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(\\\"\\\\n\\\")\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Onana\",\n          \"Bentley\",\n          \"Arrizabalaga\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Manchester United\",\n          \"Wolverhampton Wanderers\",\n          \"Arsenal\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"selected_by_percent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5285795875765043,\n        \"min\": 0.1,\n        \"max\": 4.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          1.2,\n          1.1,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total GW1-5 XP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.3007624123803447,\n        \"min\": 15.456,\n        \"max\": 22.747,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          16.499,\n          21.429000000000002,\n          18.326\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "--- D ---\n",
            "\n",
            "Top 10 Most Selected Ds:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "            name               team  selected_by_percent  Total GW1-5 XP\n",
              "615  Wan-Bissaka           West Ham                 32.3         15.6420\n",
              "374     Frimpong          Liverpool                 27.9          0.0000\n",
              "407    Aït-Nouri    Manchester City                 26.6         17.9860\n",
              "4        Gabriel            Arsenal                 26.1         22.6380\n",
              "39         Konsa        Aston Villa                 24.1         15.0660\n",
              "224    Cucurella            Chelsea                 19.9         19.0624\n",
              "377       Virgil          Liverpool                 19.4         20.8962\n",
              "512         Aina  Nottingham Forest                 18.3         18.5296\n",
              "408     Gvardiol    Manchester City                 17.4         21.6890\n",
              "260        Guéhi     Crystal Palace                 13.7         17.9860"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-04e942b8-57ac-4a96-9ed5-f6f59683b476\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>team</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>Total GW1-5 XP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>615</th>\n",
              "      <td>Wan-Bissaka</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>32.3</td>\n",
              "      <td>15.6420</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374</th>\n",
              "      <td>Frimpong</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>27.9</td>\n",
              "      <td>0.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>407</th>\n",
              "      <td>Aït-Nouri</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>26.6</td>\n",
              "      <td>17.9860</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Gabriel</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>26.1</td>\n",
              "      <td>22.6380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>Konsa</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>24.1</td>\n",
              "      <td>15.0660</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>224</th>\n",
              "      <td>Cucurella</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>19.9</td>\n",
              "      <td>19.0624</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>377</th>\n",
              "      <td>Virgil</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>19.4</td>\n",
              "      <td>20.8962</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>512</th>\n",
              "      <td>Aina</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>18.3</td>\n",
              "      <td>18.5296</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>408</th>\n",
              "      <td>Gvardiol</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>17.4</td>\n",
              "      <td>21.6890</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>260</th>\n",
              "      <td>Guéhi</td>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>13.7</td>\n",
              "      <td>17.9860</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-04e942b8-57ac-4a96-9ed5-f6f59683b476')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-04e942b8-57ac-4a96-9ed5-f6f59683b476 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-04e942b8-57ac-4a96-9ed5-f6f59683b476');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6a669a80-6c57-4304-9510-53b03a0faa2d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6a669a80-6c57-4304-9510-53b03a0faa2d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6a669a80-6c57-4304-9510-53b03a0faa2d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(\\\"\\\\n\\\")\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Gvardiol\",\n          \"Frimpong\",\n          \"Cucurella\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Liverpool\",\n          \"Chelsea\",\n          \"West Ham\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"selected_by_percent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.724615465009176,\n        \"min\": 13.7,\n        \"max\": 32.3,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          17.4,\n          27.9,\n          19.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total GW1-5 XP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.429538941963275,\n        \"min\": 0.0,\n        \"max\": 22.638000000000005,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          21.689,\n          0.0,\n          19.062399999999997\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Top 10 Ds by Total GW1-5 XP (excluding Top 10 Selected):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "           name               team  selected_by_percent  Total GW1-5 XP\n",
              "7      J.Timber            Arsenal                  2.5         20.4820\n",
              "256       Muñoz     Crystal Palace                  9.0         20.1020\n",
              "5        Saliba            Arsenal                 13.5         19.9430\n",
              "510  Milenković  Nottingham Forest                  7.2         19.5312\n",
              "479        Hall   Newcastle United                  3.1         19.1368\n",
              "226    Chalobah            Chelsea                  0.7         19.0624\n",
              "375      Kerkez          Liverpool                 12.4         18.7530\n",
              "378      Konaté          Liverpool                  2.6         18.2172\n",
              "511     Murillo  Nottingham Forest                  3.6         18.0288\n",
              "416    O’Reilly    Manchester City                  0.2         17.9860"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2baf2b16-24ed-43d8-8f50-d0f82b8b39dc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>team</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>Total GW1-5 XP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>J.Timber</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>2.5</td>\n",
              "      <td>20.4820</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>256</th>\n",
              "      <td>Muñoz</td>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>9.0</td>\n",
              "      <td>20.1020</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Saliba</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>13.5</td>\n",
              "      <td>19.9430</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>510</th>\n",
              "      <td>Milenković</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>7.2</td>\n",
              "      <td>19.5312</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>479</th>\n",
              "      <td>Hall</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>3.1</td>\n",
              "      <td>19.1368</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>226</th>\n",
              "      <td>Chalobah</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>0.7</td>\n",
              "      <td>19.0624</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>375</th>\n",
              "      <td>Kerkez</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>12.4</td>\n",
              "      <td>18.7530</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>378</th>\n",
              "      <td>Konaté</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>2.6</td>\n",
              "      <td>18.2172</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>511</th>\n",
              "      <td>Murillo</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>3.6</td>\n",
              "      <td>18.0288</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>416</th>\n",
              "      <td>O’Reilly</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>0.2</td>\n",
              "      <td>17.9860</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2baf2b16-24ed-43d8-8f50-d0f82b8b39dc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2baf2b16-24ed-43d8-8f50-d0f82b8b39dc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2baf2b16-24ed-43d8-8f50-d0f82b8b39dc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7fca5245-bbcf-437b-b457-cbd42a1c07b6\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7fca5245-bbcf-437b-b457-cbd42a1c07b6')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7fca5245-bbcf-437b-b457-cbd42a1c07b6 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(\\\"\\\\n\\\")\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Murillo\",\n          \"Mu\\u00f1oz\",\n          \"Chalobah\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Arsenal\",\n          \"Crystal Palace\",\n          \"Liverpool\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"selected_by_percent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.768601006118624,\n        \"min\": 0.2,\n        \"max\": 13.5,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          3.6,\n          9.0,\n          0.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total GW1-5 XP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.887919725100318,\n        \"min\": 17.985999999999997,\n        \"max\": 20.482000000000003,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          18.0288,\n          20.102,\n          19.062399999999997\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "--- M ---\n",
            "\n",
            "Top 10 Most Selected Ms:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "         name               team  selected_by_percent  Total GW1-5 XP\n",
              "385   M.Salah          Liverpool                 56.5         48.7578\n",
              "235    Palmer            Chelsea                 51.1         29.8816\n",
              "386     Wirtz          Liverpool                 34.8          0.0000\n",
              "587     Kudus          Tottenham                 27.2         16.3350\n",
              "48     Rogers        Aston Villa                 22.9         22.0968\n",
              "436    Mbeumo  Manchester United                 18.4         29.2268\n",
              "15       Saka            Arsenal                 17.3         27.4890\n",
              "418  Marmoush    Manchester City                 15.4         24.3340\n",
              "96   A.Ramsey        Bournemouth                 12.6          0.0000\n",
              "456     Cunha  Manchester United                 12.4         25.4556"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e7799295-1ead-4d66-911a-a02bf261f282\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>team</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>Total GW1-5 XP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>385</th>\n",
              "      <td>M.Salah</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>56.5</td>\n",
              "      <td>48.7578</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>235</th>\n",
              "      <td>Palmer</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>51.1</td>\n",
              "      <td>29.8816</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>386</th>\n",
              "      <td>Wirtz</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>34.8</td>\n",
              "      <td>0.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>587</th>\n",
              "      <td>Kudus</td>\n",
              "      <td>Tottenham</td>\n",
              "      <td>27.2</td>\n",
              "      <td>16.3350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>Rogers</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>22.9</td>\n",
              "      <td>22.0968</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>436</th>\n",
              "      <td>Mbeumo</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>18.4</td>\n",
              "      <td>29.2268</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Saka</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>17.3</td>\n",
              "      <td>27.4890</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>418</th>\n",
              "      <td>Marmoush</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>15.4</td>\n",
              "      <td>24.3340</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>A.Ramsey</td>\n",
              "      <td>Bournemouth</td>\n",
              "      <td>12.6</td>\n",
              "      <td>0.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>456</th>\n",
              "      <td>Cunha</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>12.4</td>\n",
              "      <td>25.4556</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e7799295-1ead-4d66-911a-a02bf261f282')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e7799295-1ead-4d66-911a-a02bf261f282 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e7799295-1ead-4d66-911a-a02bf261f282');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a561423a-8b0f-47e8-8ffc-e621cde06e57\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a561423a-8b0f-47e8-8ffc-e621cde06e57')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a561423a-8b0f-47e8-8ffc-e621cde06e57 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(\\\"\\\\n\\\")\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"A.Ramsey\",\n          \"Palmer\",\n          \"Mbeumo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Chelsea\",\n          \"Arsenal\",\n          \"Liverpool\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"selected_by_percent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.81730416699101,\n        \"min\": 12.4,\n        \"max\": 56.5,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          12.6,\n          51.1,\n          18.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total GW1-5 XP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.440169106750638,\n        \"min\": 0.0,\n        \"max\": 48.757799999999996,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          24.333999999999996,\n          29.8816,\n          29.226799999999997\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Top 10 Ms by Total GW1-5 XP (excluding Top 10 Selected):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "            name               team  selected_by_percent  Total GW1-5 XP\n",
              "387    Luis Díaz          Liverpool                  2.1         27.3258\n",
              "458         Amad  Manchester United                  3.5         23.5700\n",
              "266          Eze     Crystal Palace                  8.6         23.2760\n",
              "120     Kluivert          Brentford                  5.1         23.1840\n",
              "121      Semenyo          Brentford                  5.4         22.6800\n",
              "495     J.Murphy   Newcastle United                  2.9         22.6620\n",
              "455  B.Fernandes  Manchester United                 10.5         22.6272\n",
              "520  Gibbs-White  Nottingham Forest                  4.3         22.5360\n",
              "300       McNeil            Everton                  1.2         21.7800\n",
              "19      Trossard            Arsenal                  1.6         21.5600"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fd808fce-2b5c-499f-97c5-3bc6f6213aee\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>team</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>Total GW1-5 XP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>387</th>\n",
              "      <td>Luis Díaz</td>\n",
              "      <td>Liverpool</td>\n",
              "      <td>2.1</td>\n",
              "      <td>27.3258</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>458</th>\n",
              "      <td>Amad</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>3.5</td>\n",
              "      <td>23.5700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>266</th>\n",
              "      <td>Eze</td>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>8.6</td>\n",
              "      <td>23.2760</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>120</th>\n",
              "      <td>Kluivert</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>5.1</td>\n",
              "      <td>23.1840</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>121</th>\n",
              "      <td>Semenyo</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>5.4</td>\n",
              "      <td>22.6800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>495</th>\n",
              "      <td>J.Murphy</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>2.9</td>\n",
              "      <td>22.6620</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>455</th>\n",
              "      <td>B.Fernandes</td>\n",
              "      <td>Manchester United</td>\n",
              "      <td>10.5</td>\n",
              "      <td>22.6272</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>520</th>\n",
              "      <td>Gibbs-White</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>4.3</td>\n",
              "      <td>22.5360</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>300</th>\n",
              "      <td>McNeil</td>\n",
              "      <td>Everton</td>\n",
              "      <td>1.2</td>\n",
              "      <td>21.7800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Trossard</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>1.6</td>\n",
              "      <td>21.5600</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fd808fce-2b5c-499f-97c5-3bc6f6213aee')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fd808fce-2b5c-499f-97c5-3bc6f6213aee button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fd808fce-2b5c-499f-97c5-3bc6f6213aee');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-86a13d1d-ec79-479f-835f-1b70c65169d1\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-86a13d1d-ec79-479f-835f-1b70c65169d1')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-86a13d1d-ec79-479f-835f-1b70c65169d1 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(\\\"\\\\n\\\")\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"McNeil\",\n          \"Amad\",\n          \"J.Murphy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Manchester United\",\n          \"Nottingham Forest\",\n          \"Liverpool\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"selected_by_percent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.030144844356087,\n        \"min\": 1.2,\n        \"max\": 10.5,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          1.2,\n          3.5,\n          2.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total GW1-5 XP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.603335321551087,\n        \"min\": 21.560000000000002,\n        \"max\": 27.325799999999994,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          21.78,\n          23.57,\n          22.662\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "--- F ---\n",
            "\n",
            "Top 10 Most Selected Fs:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "           name               team  selected_by_percent  Total GW1-5 XP\n",
              "249  João Pedro            Chelsea                 57.2         24.2144\n",
              "504        Isak   Newcastle United                 34.1         31.2232\n",
              "629       Bowen           West Ham                 20.0         27.0180\n",
              "435     Haaland    Manchester City                 18.1         30.6820\n",
              "601     Solanke          Tottenham                 16.4         19.8000\n",
              "311        Beto            Everton                 15.4         14.3550\n",
              "530        Wood  Nottingham Forest                 14.8         28.0448\n",
              "32     Gyökeres            Arsenal                 14.1          0.0000\n",
              "65      Watkins        Aston Villa                 10.4         24.6078\n",
              "173       Wissa           Brighton                  8.4         26.0336"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e2b1285d-a475-4389-8382-4b52b50711a6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>team</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>Total GW1-5 XP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>249</th>\n",
              "      <td>João Pedro</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>57.2</td>\n",
              "      <td>24.2144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>504</th>\n",
              "      <td>Isak</td>\n",
              "      <td>Newcastle United</td>\n",
              "      <td>34.1</td>\n",
              "      <td>31.2232</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>629</th>\n",
              "      <td>Bowen</td>\n",
              "      <td>West Ham</td>\n",
              "      <td>20.0</td>\n",
              "      <td>27.0180</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>435</th>\n",
              "      <td>Haaland</td>\n",
              "      <td>Manchester City</td>\n",
              "      <td>18.1</td>\n",
              "      <td>30.6820</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>601</th>\n",
              "      <td>Solanke</td>\n",
              "      <td>Tottenham</td>\n",
              "      <td>16.4</td>\n",
              "      <td>19.8000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>311</th>\n",
              "      <td>Beto</td>\n",
              "      <td>Everton</td>\n",
              "      <td>15.4</td>\n",
              "      <td>14.3550</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>530</th>\n",
              "      <td>Wood</td>\n",
              "      <td>Nottingham Forest</td>\n",
              "      <td>14.8</td>\n",
              "      <td>28.0448</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>Gyökeres</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>14.1</td>\n",
              "      <td>0.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65</th>\n",
              "      <td>Watkins</td>\n",
              "      <td>Aston Villa</td>\n",
              "      <td>10.4</td>\n",
              "      <td>24.6078</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>173</th>\n",
              "      <td>Wissa</td>\n",
              "      <td>Brighton</td>\n",
              "      <td>8.4</td>\n",
              "      <td>26.0336</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2b1285d-a475-4389-8382-4b52b50711a6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e2b1285d-a475-4389-8382-4b52b50711a6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e2b1285d-a475-4389-8382-4b52b50711a6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-449add45-451e-4ed3-8b38-57b3f3bd8547\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-449add45-451e-4ed3-8b38-57b3f3bd8547')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-449add45-451e-4ed3-8b38-57b3f3bd8547 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(\\\"\\\\n\\\")\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Watkins\",\n          \"Isak\",\n          \"Beto\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Aston Villa\",\n          \"Newcastle United\",\n          \"Everton\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"selected_by_percent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.5335970924078,\n        \"min\": 8.4,\n        \"max\": 57.2,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          10.4,\n          34.1,\n          15.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total GW1-5 XP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.391781339116546,\n        \"min\": 0.0,\n        \"max\": 31.2232,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          24.607799999999997,\n          31.2232,\n          14.355\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Top 10 Fs by Total GW1-5 XP (excluding Top 10 Selected):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "              name                     team  selected_by_percent  \\\n",
              "29         Havertz                  Arsenal                  1.8   \n",
              "283         Mateta           Crystal Palace                  5.9   \n",
              "136      Evanilson                Brentford                  2.6   \n",
              "251      N.Jackson                  Chelsea                  0.1   \n",
              "216        Welbeck                  Burnley                  8.1   \n",
              "660  Strand Larsen  Wolverhampton Wanderers                  6.2   \n",
              "337           Raúl                   Fulham                  2.4   \n",
              "250          Delap                  Chelsea                  4.7   \n",
              "338          Muniz                   Fulham                  2.6   \n",
              "30         G.Jesus                  Arsenal                  0.0   \n",
              "\n",
              "     Total GW1-5 XP  \n",
              "29          22.6380  \n",
              "283         21.6890  \n",
              "136         20.6640  \n",
              "251         20.6080  \n",
              "216         19.9836  \n",
              "660         19.5242  \n",
              "337         19.2894  \n",
              "250         18.5472  \n",
              "338         13.8488  \n",
              "30          13.4750  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ece811cc-7a1c-4e9c-b548-ebec8f8af3d2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>team</th>\n",
              "      <th>selected_by_percent</th>\n",
              "      <th>Total GW1-5 XP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>Havertz</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>1.8</td>\n",
              "      <td>22.6380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>283</th>\n",
              "      <td>Mateta</td>\n",
              "      <td>Crystal Palace</td>\n",
              "      <td>5.9</td>\n",
              "      <td>21.6890</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>136</th>\n",
              "      <td>Evanilson</td>\n",
              "      <td>Brentford</td>\n",
              "      <td>2.6</td>\n",
              "      <td>20.6640</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>251</th>\n",
              "      <td>N.Jackson</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>0.1</td>\n",
              "      <td>20.6080</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>216</th>\n",
              "      <td>Welbeck</td>\n",
              "      <td>Burnley</td>\n",
              "      <td>8.1</td>\n",
              "      <td>19.9836</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>660</th>\n",
              "      <td>Strand Larsen</td>\n",
              "      <td>Wolverhampton Wanderers</td>\n",
              "      <td>6.2</td>\n",
              "      <td>19.5242</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>337</th>\n",
              "      <td>Raúl</td>\n",
              "      <td>Fulham</td>\n",
              "      <td>2.4</td>\n",
              "      <td>19.2894</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>250</th>\n",
              "      <td>Delap</td>\n",
              "      <td>Chelsea</td>\n",
              "      <td>4.7</td>\n",
              "      <td>18.5472</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>338</th>\n",
              "      <td>Muniz</td>\n",
              "      <td>Fulham</td>\n",
              "      <td>2.6</td>\n",
              "      <td>13.8488</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>G.Jesus</td>\n",
              "      <td>Arsenal</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13.4750</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ece811cc-7a1c-4e9c-b548-ebec8f8af3d2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ece811cc-7a1c-4e9c-b548-ebec8f8af3d2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ece811cc-7a1c-4e9c-b548-ebec8f8af3d2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-58d88725-9bd6-4198-b4eb-5b17a873970f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-58d88725-9bd6-4198-b4eb-5b17a873970f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-58d88725-9bd6-4198-b4eb-5b17a873970f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(\\\"\\\\n\\\")\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Muniz\",\n          \"Mateta\",\n          \"Strand Larsen\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Arsenal\",\n          \"Crystal Palace\",\n          \"Wolverhampton Wanderers\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"selected_by_percent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.6903944361788708,\n        \"min\": 0.0,\n        \"max\": 8.1,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          4.7,\n          5.9,\n          6.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total GW1-5 XP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.062401139556272,\n        \"min\": 13.475000000000001,\n        \"max\": 22.638000000000005,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          13.848800000000002,\n          21.689,\n          19.5242\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n"
          ]
        }
      ]
    }
  ]
}